<?php
require_once 'test_base.php';
require_once 'Erfurt/Versioning.php';

require_once 'Erfurt/Versioning/StoreStub.php';
require_once 'Erfurt/Versioning/AuthStub.php';

/**
 * Test class for Erfurt_Versioning.
 * Generated by PHPUnit on 2008-12-18 at 21:54:10.
 */
class Erfurt_VersioningTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Erfurt_Versioning
     * @access protected
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->_object    = new Erfurt_Versioning();
        $this->_storeStub = new Erfurt_Versioning_StoreStub(); 
        $this->_authStub  = new Erfurt_Versioning_AuthStub();
        
    }
    
    protected function _getMockedVersioning()
    {
        $versioning = $this->getMock('Erfurt_Versioning',
            array('_getStore', '_getAuth')
        );
        
        $versioning->expects($this->any())
                   ->method('_getStore')
                   ->will($this->returnValue($this->_storeStub));
        
        $versioning->expects($this->any())
                   ->method('_getAuth')
                   ->will($this->returnValue($this->_authStub));
        
        return $versioning;
    }
    
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    public function testIsVersioningEnabledByDefault() 
    {
        $this->assertTrue($this->_object->isVersioningEnabled());
    }
    
    public function testIsVersioningEnabledAfterDisabled()
    {
        $this->_object->enableVersioning(false);
        $this->assertFalse($this->_object->isVersioningEnabled());
    }
    
    public function testIsVersioningEnabledAfterEnabledWithNoParam() 
    {
        $this->_object->enableVersioning();
        $this->assertTrue($this->_object->isVersioningEnabled());
    }
    
    public function testIsVersioningEnabledAfterEnabledWithParamTrue()
    {
        $this->_object->enableVersioning(true);
        $this->assertTrue($this->_object->isVersioningEnabled());
    }
    
    public function testIsActionStartedByDefault()
    {
        $this->assertFalse($this->_object->isActionStarted());
    }
    
    public function testIsActionStartedAfterStartAction()
    {
        $this->_object->startAction(Erfurt_Versioning::STATEMENT_ADDED);
        
        $this->assertTrue($this->_object->isActionStarted());
    }
    
    public function testIsActionStartedAfterStartAndEndAction()
    {
        $this->_object->startAction(Erfurt_Versioning::STATEMENT_REMOVED);
        $this->_object->endAction();
        
        $this->assertFalse($this->_object->isActionStarted());
    }
    
    public function testEndActionWithoutStartAction()
    {
        try {
            $this->_object->endAction();
            
            // Should not happen if exception is thrown as expected.
            $this->fail();
        } catch (Exception $e) {
            // If we are here everything went right... so we do nothing.
        }
    }
    
    public function testStartActionWhileActionIsRunning()
    {
        try {
            $this->_object->startAction(Erfurt_Versioning::STATEMENT_ADDED);
            
            // The following should fail.
            $this->_object->startAction(Erfurt_Versioning::STATEMENT_REMOVED);
            $this->fail();
        } catch (Exception $e) {
            // If we are here everything went right... so we do nothing.
        }
    }
    
    public function testGetLastModifiedForResource() 
    {    
        // We need a mocked versioning object here.
        $this->_object = $this->_getMockedVersioning();
        
        $result = $this->_object->getLastModifiedForResource('http://example.org/resource1', 'http://example.org/');
        
        // Result should contain the following keys.
        $this->assertArrayHasKey('id', $result);
        $this->assertArrayHasKey('user', $result);
        $this->assertArrayHasKey('tstamp', $result);
        $this->assertArrayHasKey('action_type', $result);
    }

    public function testGetHistoryForGraph() 
    {
        // We need a mocked versioning object here.
        $this->_object = $this->_getMockedVersioning();
        
        $result = $this->_object->getHistoryForGraph('http://example.org/');
        
        // Result should contain maximum n elements, where n is the limit set for the object.
        $this->assertLessThanOrEqual($this->_object->getLimit(), count($result));
        
        // Each result row should contain the following keys.
        foreach ($result as $row) {
            $this->assertArrayHasKey('id', $row);
            $this->assertArrayHasKey('user', $row);
            $this->assertArrayHasKey('resource', $row);
            $this->assertArrayHasKey('tstamp', $row);
            $this->assertArrayHasKey('action_type', $row);
        }
    }

    public function testGetHistoryForResource() 
    {
        // We need a mocked versioning object here.
        $this->_object = $this->_getMockedVersioning();
        
        $result = $this->_object->getHistoryForResource('http://example.org/resource1', 'http://example.org/');
    
        // Result should contain maximum n elements, where n is the limit set for the object.
        $this->assertLessThanOrEqual($this->_object->getLimit(), count($result));
    
        // Each result row should contain the following keys.
        foreach ($result as $row) {
            $this->assertArrayHasKey('id', $row);
            $this->assertArrayHasKey('user', $row);
            $this->assertArrayHasKey('tstamp', $row);
            $this->assertArrayHasKey('action_type', $row);
        }
    }

    public function testGetHistoryForUser() 
    {
        // We need a mocked versioning object here.
        $this->_object = $this->_getMockedVersioning();
        
        $result = $this->_object->getHistoryForUser('http://example.org/user1/');
    
        // Result should contain maximum n elements, where n is the limit set for the object.
        $this->assertLessThanOrEqual($this->_object->getLimit(), count($result));
    
        // Each result row should contain the following keys.
        foreach ($result as $row) {
            $this->assertArrayHasKey('id', $row);
            $this->assertArrayHasKey('resource', $row);
            $this->assertArrayHasKey('tstamp', $row);
            $this->assertArrayHasKey('action_type', $row);
        }
    }

    public function testSetAndGetLimit() 
    {
        // By default the limit value should be 10.
        $this->assertEquals(10, $this->_object->getLimit());
        
        $this->_object->setLimit(100);
        $this->assertEquals(100, $this->_object->getLimit());
        
        // Try to set an invalid value
        try {
            $this->_object->setLimit(0);
            
            fail();
        } catch (Exception $e) {
            // If we are here everything is fine.
        }
    }

    /**
     * @todo Implement testOnAddStatement().
     */
    public function testOnAddStatement() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOnAddMultipleStatements().
     */
    public function testOnAddMultipleStatements() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOnDeleteMatchingStatements().
     */
    public function testOnDeleteMatchingStatements() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testOnDeleteMultipleStatements().
     */
    public function testOnDeleteMultipleStatements() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRollbackAction().
     */
    public function testRollbackAction() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
