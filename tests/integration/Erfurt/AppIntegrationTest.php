<?php
/**
 * Test class
 * Generated by PHPUnit on 2008-12-18 at 21:54:10.
 */
class Erfurt_AppIntegrationTest extends Erfurt_TestCase
{
    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testAuthenticateWithDefaultAnonymous($storeAdapterName)
    {
        $this->markTestNeedsStore($storeAdapterName);

        // Authenticate as Anonymous
        $result = Erfurt_App::getInstance()->authenticate();
        $this->assertTrue($result->isValid());
        $identity = $result->getIdentity();
        $this->assertEquals('Anonymous', $identity->getUsername());
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testAuthenticateWithExplicitAnonymous($storeAdapterName)
    {
        $this->markTestNeedsStore($storeAdapterName);

        // Authenticate as Anonymous
        $result = Erfurt_App::getInstance()->authenticate('Anonymous');
        $this->assertTrue($result->isValid());
        $identity = $result->getIdentity();
        $this->assertEquals('Anonymous', $identity->getUsername());
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testAuthenticateWithAdmin($storeAdapterName)
    {
        $this->markTestNeedsStore($storeAdapterName);
        
        // Authenticate as Anonymous
        $result = Erfurt_App::getInstance()->authenticate('Admin');
        $this->assertTrue($result->isValid());
        $identity = $result->getIdentity();
        $this->assertEquals('Admin', $identity->getUsername());
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testAuthenticateWithAdminWrongPassword($storeAdapterName)
    {
        $this->markTestNeedsStore($storeAdapterName);
        
        // Authenticate as Anonymous
        $result = Erfurt_App::getInstance()->authenticate('Admin', 'theWrongPassword');
        $this->assertFalse($result->isValid());
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testAuthenticateWithDefaultSuperAdmin($storeAdapterName)
    {
        $this->markTestNeedsStore($storeAdapterName);
        
        // Authenticate as Anonymous
        $result = Erfurt_App::getInstance()->authenticate($this->getDbUser(), $this->getDbPassword());
        $this->assertTrue($result->isValid());
        $identity = $result->getIdentity();
        $this->assertEquals('SuperAdmin', $identity->getUsername());
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testAuthenticateWithOpenIdWillFail($storeAdapterName)
    {
        $this->markTestNeedsStore($storeAdapterName);
        
        // OpenId for a user that does not exist!
        $openId      = 'http://thisisnotanopenidprovider.com/fakeOpenId';
        $verifyUrl   = 'http://doesnotmatterhere.com';
        $redirectUrl = 'http://doesnotmatterhere.com';
        
        $result = Erfurt_App::getInstance()->authenticateWithOpenId($openId, $verifyUrl, $redirectUrl);
        
        $this->assertTrue($result instanceof Zend_Auth_Result);
        $this->assertFalse($result->isValid());
        
        // Erfurt (versioning) needs a user...
        $this->authenticateAnonymous();
        
        // Now we add the user, so we can test whether a non existing provider url also fails.
        Erfurt_App::getInstance()->addOpenIdUser($openId);
        
        $result = Erfurt_App::getInstance()->authenticateWithOpenId($openId, $verifyUrl, $redirectUrl);
        $this->assertTrue($result instanceof Zend_Auth_Result);
        $this->assertFalse($result->isValid());

        // We only test cases here that will fail, for otherwise we would be redirected!
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testGetQueryCacheWithDatabaseCacheBackend($storeAdapterName)
    {   
        Erfurt_App::reset();
        $this->markTestNeedsStore($storeAdapterName);
        $app = Erfurt_App::getInstance();
        $config = $app->getConfig();
        $config->cache->query->enable = true;
        $config->cache->query->type = 'database';
        
        $cache = $app->getQueryCache();
        $this->assertTrue($cache instanceof Erfurt_Cache_Frontend_QueryCache);
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testGetStore($storeAdapterName)
    {
        Erfurt_App::reset();
        $this->markTestNeedsStore($storeAdapterName);
        
        $store = Erfurt_App::getInstance()->getStore();
        $this->assertTrue($store instanceof Erfurt_Store);
    }
    
    public function testGetStoreWithCleanDatabase()
    {
        Erfurt_App::reset();
        $this->markTestNeedsCleanZendDbStore();
        
        try {
            $store = Erfurt_App::getInstance()->getStore();
        } catch (Erfurt_Exception $e) {
            // Should not fail! Instead should initialize the db tables.
            $this->fail('Something went wrong while initialization of new db environment: ' . $e->getMessage());
        }
    }   

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testGetSysOntModel($storeAdapterName)
    {
        $this->markTestNeedsStore($storeAdapterName);
        
        $config      = Erfurt_App::getInstance()->getConfig();
        $sysModelUri = $config->sysont->modelUri;
        
        $sysModel = Erfurt_App::getInstance()->getSysOntModel();
        $this->assertTrue($sysModel instanceof Erfurt_Rdf_Model);
        $this->assertEquals($sysModelUri, $sysModel->getModelUri());
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testGetUsers($storeAdapterName)
    {
        $this->markTestNeedsStore($storeAdapterName);
        
        $users = Erfurt_App::getInstance()->getUsers();
        $this->assertTrue(array_key_exists('http://localhost/OntoWiki/Config/Admin', $users));
        $this->assertTrue(array_key_exists('http://ns.ontowiki.net/SysOnt/Anonymous', $users));
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testIsActionAllowed($storeAdapterName)
    {        
        $this->markTestNeedsStore($storeAdapterName);
        
        $app = Erfurt_App::getInstance();
        $ac = $app->getAc();
        
        $this->authenticateAnonymous();
        
        $this->assertEquals(
            $ac->isActionAllowed('SomeNonExistingAction'), 
            $app->isActionAllowed('SomeNonExistingAction')
        );
        
        // Now test with an existing action (Login)
        $this->assertEquals(
            $ac->isActionAllowed('Login'), 
            $app->isActionAllowed('Login')
        );
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testVerifyOpenIdResult($storeAdapterName)
    {
        $this->markTestNeedsStore($storeAdapterName);
        
        $get = array();
        $result = Erfurt_App::getInstance()->verifyOpenIdResult($get);
        $this->assertFalse($result->isValid());
    }

    /**
     * @dataProvider allSupportedStoresProvider
     */
    public function testGetCacheWithDatabaseCacheBackend($storeAdapterName)
    {   
        $this->markTestNeedsStore($storeAdapterName);
    
        $app = Erfurt_App::getInstance();
        $config = $app->getConfig();
        $config->cache->frontend->enable = true;
        $config->cache->backend->type   = 'database';
        
        $cache = $app->getCache();
        $this->assertTrue($cache instanceof Erfurt_Cache_Frontend_ObjectCache);
    }

}
