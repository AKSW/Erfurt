<?php
//require_once 'SyntaxConstants.php';
require_once 'manchester.php';
//%declare_class {class OWLParser}
class ManchesterLexer
{

	const 	NOT_OPERATOR  = OWLParser::NOT_OPERATOR;
	const 	ALPHANUMERIC  = OWLParser::ALPHANUMERIC;
	const 	AND_OPERATOR  = OWLParser::AND_OPERATOR;
	const 	OR_OPERATOR   = OWLParser::OR_OPERATOR;
	const 	MIN_OPERATOR   = OWLParser::MIN_OPERATOR;
	const 	MAX_OPERATOR   = OWLParser::MAX_OPERATOR;
	const 	EXACTLY_OPERATOR  = OWLParser::EXACTLY_OPERATOR;
	const 	HAS_OPERATOR    = OWLParser::HAS_OPERATOR;
	const 	ONLYSOME_OPERATOR  = OWLParser::ONLYSOME_OPERATOR;
	const 	ONLY_OPERATOR   = OWLParser::ONLY_OPERATOR;
	const 	SOME_OPERATOR   = OWLParser::SOME_OPERATOR;
	const 	LPAREN         = OWLParser:: LPAREN;
	const 	RPAREN       = OWLParser::RPAREN;
	const 	LBRACE       = OWLParser::LBRACE;
	const 	RBRACE        = OWLParser::RBRACE;
	const 	LSQUAREBRACKET  = OWLParser::LSQUAREBRACKET;
	const 	RSQUAREBRACKET  = OWLParser::RSQUAREBRACKET;
	const 	NUMERIC       = OWLParser::NUMERIC;
	const 	COMMA        = OWLParser::COMMA;

	private $data;
	private $N;
	public $token;
	public $value;
    public $line;
	private $debug = 0;
	
    function __construct($data)
    {
        $this->data = $data;
        $this->N = 0;
//        $this->line = 1;
    }

/*!lex2php
%input $this->data
%counter $this->N
%token $this->token
%value $this->value
%line $this->line
ALPHANUMERIC = /[a-zA-Z]+[0-9]*/
NUMERIC = /[0-9]+/
WHITESPACE = /[ \t\n\r]+/
LPAREN="("
RPAREN=")"
NOT_OPERATOR=/[Nn][Oo][Tt]/
AND_OPERATOR=/[Aa][Nn][Dd]/
OR_OPERATOR=/[Oo][Rr]/
COMMA=","
LSQUAREBRACKET="["
RSQUAREBRACKET="]"
LBRACE="{"
RBRACE="}"
MIN_OPERATOR=/[Mm][Ii][Nn]/
MAX_OPERATOR=/[Mm][Aa][Xx]/
EXACTLY_OPERATOR=/[Ee][Xx][Aa][Cc][Tt][Ll][Yy]/
HAS_OPERATOR=/[Hh][Aa][Ss]/
ONLYSOME_OPERATOR=/[Oo][Nn][Ll][Yy][Ss][Oo][Mm][Ee]/
ONLY_OPERATOR=/[Oo][Nn][Ll][Yy]/
SOME_OPERATOR=/[Ss][Oo][Mm][Ee]/
SEPARATOR_CHAR=/[ \t\n\r]+/
*/
/*!lex2php
%statename START
WHITESPACE {
	if ($this->debug) echo "whitespace found\n";
    return false; // skip this token (do not return it)
}
AND_OPERATOR SEPARATOR_CHAR{
	if ($this->debug) echo "and operator found\n";
	$this->token=self::AND_OPERATOR;
}
OR_OPERATOR SEPARATOR_CHAR{
	if ($this->debug) echo "or operator found\n";
	$this->token=self::OR_OPERATOR;
}
NOT_OPERATOR SEPARATOR_CHAR{
	if ($this->debug) echo "not operator found\n";
	$this->token=self::NOT_OPERATOR;
}
MIN_OPERATOR SEPARATOR_CHAR{
	if ($this->debug) echo "min operator found\n";
	$this->token=self::MIN_OPERATOR;
}
MAX_OPERATOR SEPARATOR_CHAR{
	if ($this->debug) echo "max operator found\n";
	$this->token=self::MAX_OPERATOR;
}
EXACTLY_OPERATOR SEPARATOR_CHAR{
	if ($this->debug) echo "exactly operator found\n";
	$this->token=self::EXACTLY_OPERATOR;
}
HAS_OPERATOR SEPARATOR_CHAR{
	if ($this->debug) echo "has operator found\n";
	$this->token=self::HAS_OPERATOR;
}
ONLYSOME_OPERATOR SEPARATOR_CHAR{
	if ($this->debug) echo "onlysome_operator operator found\n";
	$this->token=self::ONLYSOME_OPERATOR;
}
SOME_OPERATOR SEPARATOR_CHAR{
	if ($this->debug) echo "some_operator operator found\n";
	$this->token=self::SOME_OPERATOR;
}
ONLY_OPERATOR SEPARATOR_CHAR{
	if ($this->debug) echo "only_operator operator found\n";
	$this->token=self::ONLY_OPERATOR;
}
COMMA{
	if ($this->debug) echo "comma found\n";
	$this->token=self::COMMA;
}
LPAREN {
	if ($this->debug) echo "lparen found\n";
	$this->token=self::LPAREN;
}
RPAREN {
	if ($this->debug) echo "rparen found\n";
	$this->token=self::RPAREN;
}
LBRACE {
	if ($this->debug) echo "lbrace found\n";
	$this->token=self::LBRACE;
}
RBRACE {
	if ($this->debug) echo "rbrace found\n";
	$this->token=self::RBRACE;
}
LSQUAREBRACKET{
	if ($this->debug) echo "lsquarebracket found\n";
	$this->token=self::LSQUAREBRACKET;
}
RSQUAREBRACKET{
	if ($this->debug) echo "rsquarebracket found\n";
	$this->token=self::RSQUAREBRACKET;
}
NUMERIC{
	if ($this->debug) echo "numeric found\n";
	$this->token=self::NUMERIC;
}
ALPHANUMERIC{
	if ($this->debug) echo "alphanumeric found\n";
	$this->token=self::ALPHANUMERIC;
}
*/
}