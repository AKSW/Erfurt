<?php
// $ANTLR 3.1.3 “ˆŽ 06, 2009 18:28:01 Tokens.g 2010-02-17 13:38:24


# for convenience in actions
if (!defined('HIDDEN')) define('HIDDEN', BaseRecognizer::$HIDDEN);

 
function Erfurt_Sparql_Sparql10_Tokens_DFA15_static(){
    $eot = array(5, 65535);
    $eof = array(5, 65535);
    $min = array(2, 46, 3, 65535);
    $max = array(1, 57, 1, 101, 3, 65535);
    $accept = array(2, 65535, 1, 2, 1, 3, 1, 1);
    $special = array(5, 65535);
    $transitionS = array(array(1, 2, 1, 65535, 10, 1), array(1, 4, 1, 65535, 
    10, 1, 11, 65535, 1, 3, 31, 65535, 1, 3), array(), array(), array());

    $arr = array();
    $arr['eot'] = DFA::unpackRLE($eot);
    $arr['eof'] = DFA::unpackRLE($eof);
    $arr['min'] = DFA::unpackRLE($min, true);
    $arr['max'] = DFA::unpackRLE($max, true);
    $arr['accept'] = DFA::unpackRLE($accept);
    $arr['special'] = DFA::unpackRLE($special);


    $numStates = sizeof($transitionS);
    $arr['transition'] = array();
    for ($i=0; $i<$numStates; $i++) {
        $arr['transition'][$i] = DFA::unpackRLE($transitionS[$i]);
    }
    return $arr;
}
$Erfurt_Sparql_Sparql10_Tokens_DFA15 = Erfurt_Sparql_Sparql10_Tokens_DFA15_static();

class Erfurt_Sparql_Sparql10_Tokens_DFA15 extends DFA {

    public function __construct($recognizer) {
        global $Erfurt_Sparql_Sparql10_Tokens_DFA15;
        $DFA = $Erfurt_Sparql_Sparql10_Tokens_DFA15;
        $this->recognizer = $recognizer;
        $this->decisionNumber = 15;
        $this->eot = $DFA['eot'];
        $this->eof = $DFA['eof'];
        $this->min = $DFA['min'];
        $this->max = $DFA['max'];
        $this->accept = $DFA['accept'];
        $this->special = $DFA['special'];
        $this->transition = $DFA['transition'];
    }
    public function getDescription() {
        return "282:1: DOUBLE : ( ( DIGIT )+ DOT ( DIGIT )* EXPONENT | DOT ( DIGIT )+ EXPONENT | ( DIGIT )+ EXPONENT );";
    }
}
function Erfurt_Sparql_Sparql10_Tokens_DFA29_static(){
    $eot = array(1, 65535, 6, 8, 3, 65535);
    $eof = array(10, 65535);
    $min = array(7, 45, 3, 65535);
    $max = array(7, 65533, 3, 65535);
    $accept = array(7, 65535, 1, 2, 1, 3, 1, 1);
    $special = array(10, 65535);
    $transitionS = array(array(1, 2, 1, 7, 1, 65535, 10, 3, 7, 65535, 26, 
    1, 4, 65535, 1, 1, 1, 65535, 26, 1, 60, 65535, 1, 4, 8, 65535, 23, 1, 
    1, 65535, 31, 1, 1, 65535, 520, 1, 112, 5, 14, 1, 1, 65535, 7297, 1, 
    12, 65535, 2, 1, 49, 65535, 2, 6, 47, 65535, 288, 1, 2672, 65535, 1008, 
    1, 17, 65535, 43007, 1, 8448, 65535, 1232, 1, 32, 65535, 526, 1), array(
    2, 9, 1, 65535, 10, 9, 7, 65535, 26, 9, 4, 65535, 1, 9, 1, 65535, 26, 
    9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 646, 
    9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 288, 
    9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 9, 
    32, 65535, 526, 9), array(2, 9, 1, 65535, 10, 9, 7, 65535, 26, 9, 4, 
    65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 
    31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 
    2, 9, 47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 
    8448, 65535, 1232, 9, 32, 65535, 526, 9), array(2, 9, 1, 65535, 10, 
    9, 7, 65535, 26, 9, 4, 65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 9, 
    8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 
    9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 288, 9, 2672, 65535, 
    1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 9, 32, 65535, 526, 
    9), array(2, 9, 1, 65535, 10, 9, 7, 65535, 26, 9, 4, 65535, 1, 9, 1, 
    65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 
    65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 9, 
    47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 
    65535, 1232, 9, 32, 65535, 526, 9), array(2, 9, 1, 65535, 10, 9, 7, 
    65535, 26, 9, 4, 65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 
    23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 
    2, 9, 49, 65535, 2, 9, 47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 
    65535, 43007, 9, 8448, 65535, 1232, 9, 32, 65535, 526, 9), array(2, 
    9, 1, 65535, 10, 9, 7, 65535, 26, 9, 4, 65535, 1, 9, 1, 65535, 26, 9, 
    60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 
    1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 288, 
    9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 9, 
    32, 65535, 526, 9), array(), array(), array());

    $arr = array();
    $arr['eot'] = DFA::unpackRLE($eot);
    $arr['eof'] = DFA::unpackRLE($eof);
    $arr['min'] = DFA::unpackRLE($min, true);
    $arr['max'] = DFA::unpackRLE($max, true);
    $arr['accept'] = DFA::unpackRLE($accept);
    $arr['special'] = DFA::unpackRLE($special);


    $numStates = sizeof($transitionS);
    $arr['transition'] = array();
    for ($i=0; $i<$numStates; $i++) {
        $arr['transition'][$i] = DFA::unpackRLE($transitionS[$i]);
    }
    return $arr;
}
$Erfurt_Sparql_Sparql10_Tokens_DFA29 = Erfurt_Sparql_Sparql10_Tokens_DFA29_static();

class Erfurt_Sparql_Sparql10_Tokens_DFA29 extends DFA {

    public function __construct($recognizer) {
        global $Erfurt_Sparql_Sparql10_Tokens_DFA29;
        $DFA = $Erfurt_Sparql_Sparql10_Tokens_DFA29;
        $this->recognizer = $recognizer;
        $this->decisionNumber = 29;
        $this->eot = $DFA['eot'];
        $this->eof = $DFA['eof'];
        $this->min = $DFA['min'];
        $this->max = $DFA['max'];
        $this->accept = $DFA['accept'];
        $this->special = $DFA['special'];
        $this->transition = $DFA['transition'];
    }
    public function getDescription() {
        return "()* loopback of 393:22: ( PN_CHARS | DOT )*";
    }
}
function Erfurt_Sparql_Sparql10_Tokens_DFA32_static(){
    $eot = array(1, 65535, 6, 8, 3, 65535);
    $eof = array(10, 65535);
    $min = array(7, 45, 3, 65535);
    $max = array(7, 65533, 3, 65535);
    $accept = array(7, 65535, 1, 2, 1, 3, 1, 1);
    $special = array(10, 65535);
    $transitionS = array(array(1, 2, 1, 7, 1, 65535, 10, 3, 7, 65535, 26, 
    1, 4, 65535, 1, 1, 1, 65535, 26, 1, 60, 65535, 1, 4, 8, 65535, 23, 1, 
    1, 65535, 31, 1, 1, 65535, 520, 1, 112, 5, 14, 1, 1, 65535, 7297, 1, 
    12, 65535, 2, 1, 49, 65535, 2, 6, 47, 65535, 288, 1, 2672, 65535, 1008, 
    1, 17, 65535, 43007, 1, 8448, 65535, 1232, 1, 32, 65535, 526, 1), array(
    2, 9, 1, 65535, 10, 9, 7, 65535, 26, 9, 4, 65535, 1, 9, 1, 65535, 26, 
    9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 646, 
    9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 288, 
    9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 9, 
    32, 65535, 526, 9), array(2, 9, 1, 65535, 10, 9, 7, 65535, 26, 9, 4, 
    65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 
    31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 
    2, 9, 47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 
    8448, 65535, 1232, 9, 32, 65535, 526, 9), array(2, 9, 1, 65535, 10, 
    9, 7, 65535, 26, 9, 4, 65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 9, 
    8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 
    9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 288, 9, 2672, 65535, 
    1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 9, 32, 65535, 526, 
    9), array(2, 9, 1, 65535, 10, 9, 7, 65535, 26, 9, 4, 65535, 1, 9, 1, 
    65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 
    65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 9, 
    47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 
    65535, 1232, 9, 32, 65535, 526, 9), array(2, 9, 1, 65535, 10, 9, 7, 
    65535, 26, 9, 4, 65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 
    23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 
    2, 9, 49, 65535, 2, 9, 47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 
    65535, 43007, 9, 8448, 65535, 1232, 9, 32, 65535, 526, 9), array(2, 
    9, 1, 65535, 10, 9, 7, 65535, 26, 9, 4, 65535, 1, 9, 1, 65535, 26, 9, 
    60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 
    1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 288, 
    9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 9, 
    32, 65535, 526, 9), array(), array(), array());

    $arr = array();
    $arr['eot'] = DFA::unpackRLE($eot);
    $arr['eof'] = DFA::unpackRLE($eof);
    $arr['min'] = DFA::unpackRLE($min, true);
    $arr['max'] = DFA::unpackRLE($max, true);
    $arr['accept'] = DFA::unpackRLE($accept);
    $arr['special'] = DFA::unpackRLE($special);


    $numStates = sizeof($transitionS);
    $arr['transition'] = array();
    for ($i=0; $i<$numStates; $i++) {
        $arr['transition'][$i] = DFA::unpackRLE($transitionS[$i]);
    }
    return $arr;
}
$Erfurt_Sparql_Sparql10_Tokens_DFA32 = Erfurt_Sparql_Sparql10_Tokens_DFA32_static();

class Erfurt_Sparql_Sparql10_Tokens_DFA32 extends DFA {

    public function __construct($recognizer) {
        global $Erfurt_Sparql_Sparql10_Tokens_DFA32;
        $DFA = $Erfurt_Sparql_Sparql10_Tokens_DFA32;
        $this->recognizer = $recognizer;
        $this->decisionNumber = 32;
        $this->eot = $DFA['eot'];
        $this->eof = $DFA['eof'];
        $this->min = $DFA['min'];
        $this->max = $DFA['max'];
        $this->accept = $DFA['accept'];
        $this->special = $DFA['special'];
        $this->transition = $DFA['transition'];
    }
    public function getDescription() {
        return "()* loopback of 399:36: ( PN_CHARS | DOT )*";
    }
}
function Erfurt_Sparql_Sparql10_Tokens_DFA35_static(){
    $eot = array(13, 65535, 1, 91, 7, 65535, 1, 103, 1, 65535, 1, 105, 3, 
    65535, 1, 107, 1, 110, 1, 112, 1, 115, 13, 65535, 1, 123, 2, 65535, 
    1, 125, 5, 65535, 1, 127, 18, 65535, 1, 144, 16, 65535, 1, 167, 12, 
    65535, 1, 180, 6, 65535, 1, 181, 1, 65535, 1, 181, 1, 65535, 1, 184, 
    2, 65535, 1, 188, 1, 65535, 1, 119, 1, 65535, 1, 121, 10, 65535, 1, 
    197, 1, 198, 22, 65535, 1, 220, 1, 65535, 1, 222, 3, 65535, 1, 226, 
    3, 65535, 1, 230, 1, 231, 1, 65535, 1, 232, 13, 65535, 1, 181, 1, 244, 
    2, 65535, 1, 244, 1, 246, 2, 65535, 1, 246, 2, 65535, 1, 248, 6, 65535, 
    1, 254, 1, 256, 1, 257, 2, 65535, 1, 260, 4, 65535, 1, 265, 1, 65535, 
    1, 268, 20, 65535, 1, 283, 9, 65535, 1, 293, 1, 65535, 1, 244, 1, 65535, 
    1, 246, 1, 65535, 1, 294, 11, 65535, 1, 302, 1, 303, 3, 65535, 1, 306, 
    2, 65535, 1, 308, 2, 65535, 1, 311, 6, 65535, 1, 318, 1, 319, 1, 65535, 
    1, 321, 2, 65535, 1, 323, 1, 324, 1, 325, 2, 65535, 1, 328, 1, 329, 
    3, 65535, 1, 331, 1, 332, 1, 333, 3, 65535, 1, 337, 7, 65535, 1, 341, 
    3, 65535, 1, 344, 1, 345, 1, 65535, 1, 347, 1, 348, 4, 65535, 1, 350, 
    3, 65535, 1, 351, 3, 65535, 1, 353, 7, 65535, 1, 357, 10, 65535, 1, 
    363, 4, 65535, 1, 365, 1, 366, 1, 367, 4, 65535, 1, 371, 1, 372, 1, 
    65535, 1, 373, 3, 65535, 1, 374, 1, 65535, 1, 376, 6, 65535, 1, 378, 
    1, 65535);
    $eof = array(379, 65535);
    $min = array(1, 9, 20, 45, 1, 33, 1, 45, 1, 48, 3, 65535, 1, 46, 1, 
    48, 2, 46, 2, 0, 11, 65535, 1, 61, 2, 65535, 1, 61, 4, 65535, 39, 45, 
    1, 65535, 10, 45, 1, 33, 6, 65535, 1, 48, 1, 65535, 1, 48, 1, 65535, 
    1, 46, 1, 48, 1, 65535, 1, 46, 1, 48, 1, 39, 1, 65535, 1, 34, 5, 65535, 
    1, 45, 1, 65535, 16, 45, 1, 65535, 22, 45, 1, 65535, 12, 45, 2, 65535, 
    2, 48, 2, 65535, 2, 48, 2, 65535, 1, 48, 2, 65535, 4, 45, 2, 65535, 
    21, 45, 1, 65535, 1, 45, 1, 65535, 3, 45, 1, 65535, 3, 45, 3, 65535, 
    11, 45, 1, 65535, 1, 48, 1, 65535, 1, 48, 1, 65535, 5, 45, 1, 65535, 
    1, 45, 2, 65535, 2, 45, 1, 65535, 4, 45, 1, 65535, 2, 45, 1, 65535, 
    14, 45, 1, 65535, 9, 45, 2, 65535, 7, 45, 2, 65535, 2, 45, 1, 65535, 
    1, 45, 1, 65535, 2, 45, 1, 65535, 6, 45, 2, 65535, 1, 45, 1, 65535, 
    1, 45, 3, 65535, 2, 45, 2, 65535, 1, 45, 3, 65535, 3, 45, 1, 65535, 
    3, 45, 1, 65535, 2, 45, 2, 65535, 1, 45, 2, 65535, 1, 45, 2, 65535, 
    1, 45, 1, 65535, 3, 45, 1, 65535, 5, 45, 1, 65535, 1, 45, 3, 65535, 
    3, 45, 4, 65535, 1, 45, 1, 65535, 1, 45, 1, 65535);
    $max = array(21, 65533, 1, 65535, 2, 65533, 3, 65535, 1, 101, 3, 57, 
    2, 65535, 11, 65535, 1, 61, 2, 65535, 1, 61, 4, 65535, 39, 65533, 1, 
    65535, 10, 65533, 1, 65535, 6, 65535, 1, 101, 1, 65535, 1, 101, 1, 65535, 
    1, 101, 1, 57, 1, 65535, 1, 101, 1, 57, 1, 39, 1, 65535, 1, 34, 5, 65535, 
    1, 65533, 1, 65535, 16, 65533, 1, 65535, 22, 65533, 1, 65535, 12, 65533, 
    2, 65535, 2, 101, 2, 65535, 2, 101, 2, 65535, 1, 101, 2, 65535, 4, 65533, 
    2, 65535, 21, 65533, 1, 65535, 1, 65533, 1, 65535, 3, 65533, 1, 65535, 
    3, 65533, 3, 65535, 11, 65533, 1, 65535, 1, 101, 1, 65535, 1, 101, 1, 
    65535, 5, 65533, 1, 65535, 1, 65533, 2, 65535, 2, 65533, 1, 65535, 4, 
    65533, 1, 65535, 2, 65533, 1, 65535, 14, 65533, 1, 65535, 9, 65533, 
    2, 65535, 7, 65533, 2, 65535, 2, 65533, 1, 65535, 1, 65533, 1, 65535, 
    2, 65533, 1, 65535, 6, 65533, 2, 65535, 1, 65533, 1, 65535, 1, 65533, 
    3, 65535, 2, 65533, 2, 65535, 1, 65533, 3, 65535, 3, 65533, 1, 65535, 
    3, 65533, 1, 65535, 2, 65533, 2, 65535, 1, 65533, 2, 65535, 1, 65533, 
    2, 65535, 1, 65533, 1, 65535, 3, 65533, 1, 65535, 5, 65533, 1, 65535, 
    1, 65533, 3, 65535, 3, 65533, 4, 65535, 1, 65533, 1, 65535, 1, 65533, 
    1, 65535);
    $accept = array(24, 65535, 1, 62, 1, 63, 1, 64, 6, 65535, 1, 78, 1, 
    79, 1, 80, 1, 81, 1, 82, 1, 83, 1, 84, 1, 85, 1, 86, 1, 90, 1, 91, 1, 
    65535, 1, 93, 1, 94, 1, 65535, 1, 97, 1, 98, 1, 102, 1, 103, 39, 65535, 
    1, 37, 11, 65535, 1, 95, 1, 59, 1, 60, 1, 61, 1, 65, 1, 67, 1, 65535, 
    1, 87, 1, 65535, 1, 88, 2, 65535, 1, 89, 3, 65535, 1, 74, 1, 65535, 
    1, 75, 1, 101, 1, 92, 1, 100, 1, 96, 1, 65535, 1, 28, 16, 65535, 1, 
    57, 22, 65535, 1, 38, 12, 65535, 1, 99, 1, 66, 2, 65535, 1, 68, 1, 70, 
    2, 65535, 1, 71, 1, 73, 1, 65535, 1, 76, 1, 77, 4, 65535, 1, 52, 1, 
    53, 21, 65535, 1, 39, 1, 65535, 1, 51, 3, 65535, 1, 15, 3, 65535, 1, 
    21, 1, 29, 1, 54, 11, 65535, 1, 69, 1, 65535, 1, 72, 1, 65535, 1, 1, 
    5, 65535, 1, 30, 1, 65535, 1, 6, 1, 12, 2, 65535, 1, 7, 4, 65535, 1, 
    8, 2, 65535, 1, 40, 14, 65535, 1, 22, 9, 65535, 1, 55, 1, 43, 7, 65535, 
    1, 45, 1, 46, 2, 65535, 1, 31, 1, 65535, 1, 9, 2, 65535, 1, 50, 6, 65535, 
    1, 35, 1, 23, 1, 65535, 1, 49, 1, 65535, 1, 56, 1, 24, 1, 25, 2, 65535, 
    1, 26, 1, 34, 1, 65535, 1, 2, 1, 3, 1, 4, 3, 65535, 1, 5, 3, 65535, 
    1, 10, 2, 65535, 1, 11, 1, 16, 1, 65535, 1, 13, 1, 14, 1, 65535, 1, 
    36, 1, 32, 1, 65535, 1, 27, 3, 65535, 1, 47, 5, 65535, 1, 18, 1, 65535, 
    1, 20, 1, 42, 1, 17, 3, 65535, 1, 58, 1, 44, 1, 33, 1, 48, 1, 65535, 
    1, 19, 1, 65535, 1, 41);
    $special = array(31, 65535, 1, 0, 1, 1, 346, 65535);
    $transitionS = array(array(2, 33, 2, 65535, 1, 33, 18, 65535, 1, 33, 
    1, 44, 1, 32, 1, 38, 1, 25, 1, 65535, 1, 36, 1, 31, 1, 48, 1, 49, 1, 
    42, 1, 29, 1, 43, 1, 30, 1, 28, 1, 45, 10, 27, 1, 23, 1, 41, 1, 21, 
    1, 46, 1, 47, 1, 24, 1, 26, 1, 19, 1, 1, 1, 7, 1, 4, 1, 9, 1, 14, 1, 
    17, 1, 18, 1, 5, 2, 22, 1, 6, 1, 3, 1, 11, 1, 16, 1, 2, 1, 22, 1, 12, 
    1, 8, 1, 20, 1, 10, 1, 22, 1, 15, 3, 22, 1, 50, 1, 65535, 1, 51, 1, 
    35, 1, 34, 1, 65535, 1, 13, 1, 1, 1, 7, 1, 4, 1, 9, 1, 14, 1, 17, 1, 
    18, 1, 5, 2, 22, 1, 6, 1, 3, 1, 11, 1, 16, 1, 2, 1, 22, 1, 12, 1, 8, 
    1, 20, 1, 10, 1, 22, 1, 15, 3, 22, 1, 39, 1, 37, 1, 40, 66, 65535, 23, 
    22, 1, 65535, 31, 22, 1, 65535, 520, 22, 112, 65535, 14, 22, 1, 65535, 
    7297, 22, 12, 65535, 2, 22, 98, 65535, 288, 22, 2672, 65535, 1008, 22, 
    17, 65535, 43007, 22, 8448, 65535, 1232, 22, 32, 65535, 526, 22), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 52, 13, 55, 1, 54, 
    9, 55, 1, 53, 1, 55, 4, 65535, 1, 55, 1, 65535, 1, 52, 13, 55, 1, 54, 
    9, 55, 1, 53, 1, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 17, 55, 1, 62, 8, 55, 
    4, 65535, 1, 55, 1, 65535, 17, 55, 1, 62, 8, 55, 60, 65535, 1, 58, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 1, 65, 7, 55, 1, 64, 5, 55, 1, 63, 11, 55, 4, 65535, 1, 55, 
    1, 65535, 1, 65, 7, 55, 1, 64, 5, 55, 1, 63, 11, 55, 60, 65535, 1, 58, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 1, 67, 3, 55, 1, 66, 3, 55, 1, 69, 8, 55, 1, 68, 8, 55, 4, 
    65535, 1, 55, 1, 65535, 1, 67, 3, 55, 1, 66, 3, 55, 1, 69, 8, 55, 1, 
    68, 8, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 
    65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 
    49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 
    1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 5, 55, 1, 72, 7, 55, 1, 70, 
    4, 55, 1, 71, 7, 55, 4, 65535, 1, 55, 1, 65535, 5, 55, 1, 72, 7, 55, 
    1, 70, 4, 55, 1, 71, 7, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 75, 7, 55, 
    1, 74, 5, 55, 1, 73, 11, 55, 4, 65535, 1, 55, 1, 65535, 1, 75, 7, 55, 
    1, 74, 5, 55, 1, 73, 11, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 11, 55, 
    1, 76, 2, 55, 1, 78, 2, 55, 1, 77, 8, 55, 4, 65535, 1, 55, 1, 65535, 
    11, 55, 1, 76, 2, 55, 1, 78, 2, 55, 1, 77, 8, 55, 60, 65535, 1, 58, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 1, 82, 3, 55, 1, 80, 3, 55, 1, 79, 10, 55, 1, 81, 1, 83, 5, 
    55, 4, 65535, 1, 55, 1, 65535, 1, 82, 3, 55, 1, 80, 3, 55, 1, 79, 10, 
    55, 1, 81, 1, 83, 5, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 23, 55, 1, 84, 
    2, 55, 4, 65535, 1, 55, 1, 65535, 23, 55, 1, 84, 2, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 13, 55, 1, 85, 12, 55, 4, 65535, 1, 55, 1, 65535, 13, 
    55, 1, 85, 12, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 87, 13, 55, 1, 86, 
    11, 55, 4, 65535, 1, 55, 1, 65535, 1, 87, 13, 55, 1, 86, 11, 55, 60, 
    65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 
    112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 4, 55, 1, 88, 21, 55, 4, 65535, 1, 55, 1, 65535, 
    4, 55, 1, 88, 21, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 18, 55, 1, 89, 
    2, 55, 1, 90, 4, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 89, 2, 55, 
    1, 90, 4, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 94, 7, 55, 1, 93, 
    8, 55, 1, 92, 8, 55, 4, 65535, 1, 55, 1, 65535, 1, 94, 7, 55, 1, 93, 
    8, 55, 1, 92, 8, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 7, 55, 1, 95, 18, 55, 
    4, 65535, 1, 55, 1, 65535, 7, 55, 1, 95, 18, 55, 60, 65535, 1, 58, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 5, 55, 1, 97, 9, 55, 1, 98, 1, 55, 1, 96, 8, 55, 4, 65535, 
    1, 55, 1, 65535, 5, 55, 1, 97, 9, 55, 1, 98, 1, 55, 1, 96, 8, 55, 60, 
    65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 
    112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 17, 55, 1, 99, 8, 55, 4, 65535, 1, 55, 1, 65535, 
    17, 55, 1, 99, 8, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 100, 25, 55, 
    4, 65535, 1, 55, 1, 65535, 1, 100, 25, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 18, 
    55, 1, 89, 2, 55, 1, 90, 4, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 
    89, 2, 55, 1, 90, 4, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 17, 55, 1, 101, 
    8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 101, 8, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 104, 1, 65535, 25, 104, 1, 65535, 
    1, 102, 30, 104, 1, 65535, 1, 104, 1, 65535, 1, 104, 1, 65535, 26, 104, 
    3, 65535, 65410, 104), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(10, 106, 7, 65535, 26, 106, 4, 65535, 
    1, 106, 1, 65535, 26, 106, 69, 65535, 23, 106, 1, 65535, 31, 106, 1, 
    65535, 520, 106, 112, 65535, 14, 106, 1, 65535, 7297, 106, 12, 65535, 
    2, 106, 98, 65535, 288, 106, 2672, 65535, 1008, 106, 17, 65535, 43007, 
    106, 8448, 65535, 1232, 106, 32, 65535, 526, 106), array(), array(), 
    array(), array(1, 109, 1, 65535, 10, 27, 11, 65535, 1, 108, 31, 65535, 
    1, 108), array(10, 111), array(1, 114, 1, 65535, 10, 113), array(1, 
    117, 1, 65535, 10, 116), array(10, 119, 1, 65535, 2, 119, 1, 65535, 
    25, 119, 1, 118, 65496, 119), array(10, 121, 1, 65535, 2, 121, 1, 65535, 
    20, 121, 1, 120, 65501, 121), array(), array(), array(), array(), array(
    ), array(), array(), array(), array(), array(), array(), array(1, 122), 
    array(), array(), array(1, 124), array(), array(), array(), array(), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 18, 55, 1, 126, 
    7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 126, 7, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 20, 55, 1, 128, 5, 55, 4, 65535, 1, 55, 1, 65535, 20, 
    55, 1, 128, 5, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 
    1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 
    1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 
    1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 
    1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 
    1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 7, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 129, 
    21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 129, 21, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 3, 55, 1, 130, 22, 55, 4, 65535, 1, 55, 1, 65535, 3, 
    55, 1, 130, 22, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 13, 55, 1, 131, 12, 
    55, 4, 65535, 1, 55, 1, 65535, 13, 55, 1, 131, 12, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 23, 55, 1, 132, 2, 55, 4, 65535, 1, 55, 1, 65535, 23, 
    55, 1, 132, 2, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 11, 55, 1, 133, 6, 
    55, 1, 134, 7, 55, 4, 65535, 1, 55, 1, 65535, 11, 55, 1, 133, 6, 55, 
    1, 134, 7, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 19, 55, 1, 135, 6, 
    55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 135, 6, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 14, 55, 1, 136, 11, 55, 4, 65535, 1, 55, 1, 65535, 
    14, 55, 1, 136, 11, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 18, 55, 1, 137, 
    7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 137, 7, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 18, 55, 1, 138, 1, 139, 6, 55, 4, 65535, 1, 55, 1, 
    65535, 18, 55, 1, 138, 1, 139, 6, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 
    55, 1, 142, 6, 55, 1, 140, 2, 55, 1, 143, 8, 55, 1, 141, 5, 55, 4, 65535, 
    1, 55, 1, 65535, 1, 55, 1, 142, 6, 55, 1, 140, 2, 55, 1, 143, 8, 55, 
    1, 141, 5, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 145, 25, 55, 
    4, 65535, 1, 55, 1, 65535, 1, 145, 25, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 12, 
    55, 1, 146, 13, 55, 4, 65535, 1, 55, 1, 65535, 12, 55, 1, 146, 13, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 13, 55, 1, 147, 12, 55, 4, 65535, 
    1, 55, 1, 65535, 13, 55, 1, 147, 12, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 
    55, 1, 148, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 148, 21, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 149, 21, 55, 4, 65535, 
    1, 55, 1, 65535, 4, 55, 1, 149, 21, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 
    152, 12, 55, 1, 150, 6, 55, 1, 151, 5, 55, 4, 65535, 1, 55, 1, 65535, 
    1, 152, 12, 55, 1, 150, 6, 55, 1, 151, 5, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 11, 
    55, 1, 153, 14, 55, 4, 65535, 1, 55, 1, 65535, 11, 55, 1, 153, 14, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 11, 55, 1, 154, 14, 55, 4, 65535, 
    1, 55, 1, 65535, 11, 55, 1, 154, 14, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 17, 
    55, 1, 155, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 155, 8, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 12, 55, 1, 156, 13, 55, 4, 65535, 
    1, 55, 1, 65535, 12, 55, 1, 156, 13, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 12, 
    55, 1, 157, 13, 55, 4, 65535, 1, 55, 1, 65535, 12, 55, 1, 157, 13, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 8, 55, 1, 158, 17, 55, 4, 65535, 
    1, 55, 1, 65535, 8, 55, 1, 158, 17, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 8, 
    55, 1, 160, 9, 55, 1, 159, 7, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 
    1, 160, 9, 55, 1, 159, 7, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 19, 55, 
    1, 161, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 161, 6, 55, 60, 
    65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 
    112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 12, 55, 1, 162, 13, 55, 4, 65535, 1, 55, 1, 
    65535, 12, 55, 1, 162, 13, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 3, 55, 1, 
    163, 2, 55, 1, 164, 19, 55, 4, 65535, 1, 55, 1, 65535, 3, 55, 1, 163, 
    2, 55, 1, 164, 19, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 2, 55, 1, 166, 
    7, 55, 1, 165, 15, 55, 4, 65535, 1, 55, 1, 65535, 2, 55, 1, 166, 7, 
    55, 1, 165, 15, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 6, 55, 1, 168, 19, 
    55, 4, 65535, 1, 55, 1, 65535, 6, 55, 1, 168, 19, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 14, 55, 1, 169, 11, 55, 4, 65535, 1, 55, 1, 
    65535, 14, 55, 1, 169, 11, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 11, 55, 
    1, 170, 14, 55, 4, 65535, 1, 55, 1, 65535, 11, 55, 1, 170, 14, 55, 60, 
    65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 
    112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 11, 55, 1, 171, 14, 55, 4, 65535, 1, 55, 1, 
    65535, 11, 55, 1, 171, 14, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 
    172, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 172, 21, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 3, 55, 1, 173, 22, 55, 4, 65535, 1, 55, 1, 65535, 3, 
    55, 1, 173, 22, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 5, 55, 1, 174, 20, 
    55, 4, 65535, 1, 55, 1, 65535, 5, 55, 1, 174, 20, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 19, 55, 1, 175, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 
    55, 1, 175, 6, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 177, 13, 55, 1, 
    176, 11, 55, 4, 65535, 1, 55, 1, 65535, 1, 177, 13, 55, 1, 176, 11, 
    55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 
    1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 21, 55, 1, 178, 4, 55, 4, 
    65535, 1, 55, 1, 65535, 21, 55, 1, 178, 4, 55, 60, 65535, 1, 58, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 20, 55, 1, 179, 5, 55, 4, 65535, 1, 55, 1, 65535, 20, 55, 
    1, 179, 5, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 104, 1, 65535, 25, 104, 1, 65535, 31, 104, 1, 65535, 1, 104, 1, 65535, 
    1, 104, 1, 65535, 26, 104, 3, 65535, 65410, 104), array(), array(), 
    array(), array(), array(), array(), array(10, 182, 11, 65535, 1, 108, 
    31, 65535, 1, 108), array(), array(10, 111, 11, 65535, 1, 108, 31, 65535, 
    1, 108), array(), array(1, 183, 1, 65535, 10, 113, 11, 65535, 1, 185, 
    31, 65535, 1, 185), array(10, 186), array(), array(1, 187, 1, 65535, 
    10, 116, 11, 65535, 1, 189, 31, 65535, 1, 189), array(10, 190), array(
    1, 191), array(), array(1, 192), array(), array(), array(), array(), 
    array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 
    1, 193, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 193, 21, 55, 60, 
    65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 
    112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 
    61, 1, 65535, 10, 57, 1, 23, 6, 65535, 13, 55, 1, 194, 12, 55, 4, 65535, 
    1, 55, 1, 65535, 13, 55, 1, 194, 12, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 5, 
    55, 1, 195, 20, 55, 4, 65535, 1, 55, 1, 65535, 5, 55, 1, 195, 20, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 8, 55, 1, 196, 17, 55, 4, 65535, 
    1, 55, 1, 65535, 8, 55, 1, 196, 17, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 
    55, 1, 199, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 199, 21, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 2, 55, 1, 200, 23, 55, 4, 65535, 
    1, 55, 1, 65535, 2, 55, 1, 200, 23, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 
    201, 25, 55, 4, 65535, 1, 55, 1, 65535, 1, 201, 25, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 15, 55, 1, 202, 10, 55, 4, 65535, 1, 55, 1, 65535, 
    15, 55, 1, 202, 10, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 19, 55, 1, 203, 
    6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 203, 6, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 4, 55, 1, 204, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 
    55, 1, 204, 21, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 14, 55, 1, 205, 11, 
    55, 4, 65535, 1, 55, 1, 65535, 14, 55, 1, 205, 11, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 17, 55, 1, 206, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 
    55, 1, 206, 8, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 17, 55, 1, 207, 8, 
    55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 207, 8, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 11, 55, 1, 208, 14, 55, 4, 65535, 1, 55, 1, 65535, 
    11, 55, 1, 208, 14, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 8, 55, 1, 209, 
    17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 209, 17, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 3, 55, 1, 210, 22, 55, 4, 65535, 1, 55, 1, 
    65535, 3, 55, 1, 210, 22, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 8, 55, 1, 
    211, 17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 211, 17, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 6, 55, 1, 212, 19, 55, 4, 65535, 1, 55, 1, 65535, 6, 
    55, 1, 212, 19, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 213, 25, 55, 4, 
    65535, 1, 55, 1, 65535, 1, 213, 25, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 
    214, 25, 55, 4, 65535, 1, 55, 1, 65535, 1, 214, 25, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 18, 55, 1, 215, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 
    55, 1, 215, 7, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 13, 55, 1, 216, 12, 
    55, 4, 65535, 1, 55, 1, 65535, 13, 55, 1, 216, 12, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 11, 55, 1, 217, 14, 55, 4, 65535, 1, 55, 1, 65535, 
    11, 55, 1, 217, 14, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 218, 
    21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 218, 21, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 4, 55, 1, 219, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 
    55, 1, 219, 21, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 221, 
    21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 221, 21, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 18, 55, 1, 223, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 
    55, 1, 223, 7, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 224, 25, 55, 4, 
    65535, 1, 55, 1, 65535, 1, 224, 25, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 14, 
    55, 1, 225, 11, 55, 4, 65535, 1, 55, 1, 65535, 14, 55, 1, 225, 11, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 
    26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 
    1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 227, 21, 55, 4, 
    65535, 1, 55, 1, 65535, 4, 55, 1, 227, 21, 55, 60, 65535, 1, 58, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 20, 55, 1, 228, 5, 55, 4, 65535, 1, 55, 1, 65535, 20, 55, 
    1, 228, 5, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 229, 21, 
    55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 229, 21, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 12, 55, 1, 233, 13, 55, 4, 65535, 
    1, 55, 1, 65535, 12, 55, 1, 233, 13, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 19, 
    55, 1, 234, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 234, 6, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 18, 55, 1, 235, 7, 55, 4, 65535, 
    1, 55, 1, 65535, 18, 55, 1, 235, 7, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 17, 
    55, 1, 236, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 236, 8, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 237, 21, 55, 4, 65535, 
    1, 55, 1, 65535, 4, 55, 1, 237, 21, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 18, 
    55, 1, 238, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 238, 7, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 8, 55, 1, 239, 17, 55, 4, 65535, 
    1, 55, 1, 65535, 8, 55, 1, 239, 17, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 20, 
    55, 1, 240, 5, 55, 4, 65535, 1, 55, 1, 65535, 20, 55, 1, 240, 5, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 15, 55, 1, 241, 10, 55, 4, 65535, 
    1, 55, 1, 65535, 15, 55, 1, 241, 10, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 8, 
    55, 1, 242, 17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 242, 17, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 243, 21, 55, 4, 65535, 
    1, 55, 1, 65535, 4, 55, 1, 243, 21, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(), array(10, 182, 11, 65535, 1, 108, 31, 65535, 
    1, 108), array(10, 245, 11, 65535, 1, 185, 31, 65535, 1, 185), array(
    ), array(), array(10, 186, 11, 65535, 1, 185, 31, 65535, 1, 185), array(
    10, 247, 11, 65535, 1, 189, 31, 65535, 1, 189), array(), array(), array(
    10, 190, 11, 65535, 1, 189, 31, 65535, 1, 189), array(), array(), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 3, 55, 1, 249, 
    22, 55, 4, 65535, 1, 55, 1, 65535, 3, 55, 1, 249, 22, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 8, 55, 1, 250, 17, 55, 4, 65535, 1, 55, 1, 65535, 8, 
    55, 1, 250, 17, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 5, 55, 1, 251, 20, 
    55, 4, 65535, 1, 55, 1, 65535, 5, 55, 1, 251, 20, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 19, 55, 1, 252, 6, 55, 4, 65535, 
    1, 55, 1, 65535, 19, 55, 1, 252, 6, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 17, 
    55, 1, 253, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 253, 8, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 19, 55, 1, 255, 6, 55, 4, 65535, 
    1, 55, 1, 65535, 19, 55, 1, 255, 6, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 8, 
    55, 1, 258, 17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 258, 17, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 17, 55, 1, 259, 8, 55, 4, 65535, 
    1, 55, 1, 65535, 17, 55, 1, 259, 8, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 8, 
    55, 1, 261, 17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 261, 17, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 8, 55, 1, 262, 17, 55, 4, 65535, 
    1, 55, 1, 65535, 8, 55, 1, 262, 17, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 
    263, 25, 55, 4, 65535, 1, 55, 1, 65535, 1, 263, 25, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 19, 55, 1, 264, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 
    55, 1, 264, 6, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 19, 55, 1, 266, 
    6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 266, 6, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 12, 55, 1, 267, 13, 55, 4, 65535, 1, 55, 1, 65535, 
    12, 55, 1, 267, 13, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 17, 55, 1, 269, 
    8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 269, 8, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 19, 55, 1, 270, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 
    55, 1, 270, 6, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 19, 55, 1, 271, 6, 
    55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 271, 6, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 19, 55, 1, 272, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 
    55, 1, 272, 6, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 273, 21, 
    55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 273, 21, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 13, 55, 1, 274, 12, 55, 4, 65535, 1, 55, 1, 65535, 
    13, 55, 1, 274, 12, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 2, 55, 1, 275, 
    23, 55, 4, 65535, 1, 55, 1, 65535, 2, 55, 1, 275, 23, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 19, 55, 1, 276, 6, 55, 4, 65535, 1, 55, 1, 
    65535, 19, 55, 1, 276, 6, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 
    19, 55, 1, 277, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 277, 6, 
    55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 
    1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 8, 55, 1, 278, 17, 55, 4, 
    65535, 1, 55, 1, 65535, 8, 55, 1, 278, 17, 55, 60, 65535, 1, 58, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 13, 55, 1, 279, 12, 55, 4, 65535, 1, 55, 1, 65535, 13, 55, 
    1, 279, 12, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    ), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 3, 55, 1, 
    280, 22, 55, 4, 65535, 1, 55, 1, 65535, 3, 55, 1, 280, 22, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 2, 55, 1, 281, 23, 55, 4, 65535, 1, 55, 1, 65535, 2, 
    55, 1, 281, 23, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 23, 55, 1, 282, 2, 
    55, 4, 65535, 1, 55, 1, 65535, 23, 55, 1, 282, 2, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(), array(), array(1, 56, 
    1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 
    65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 284, 21, 
    55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 284, 21, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 4, 55, 1, 285, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 
    55, 1, 285, 21, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 286, 21, 
    55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 286, 21, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 17, 55, 1, 287, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 
    55, 1, 287, 8, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 288, 21, 
    55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 288, 21, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 14, 55, 1, 289, 11, 55, 4, 65535, 1, 55, 1, 65535, 
    14, 55, 1, 289, 11, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 15, 55, 1, 290, 
    10, 55, 4, 65535, 1, 55, 1, 65535, 15, 55, 1, 290, 10, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 7, 55, 1, 291, 18, 55, 4, 65535, 1, 55, 1, 65535, 7, 
    55, 1, 291, 18, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 13, 55, 1, 292, 12, 
    55, 4, 65535, 1, 55, 1, 65535, 13, 55, 1, 292, 12, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(10, 245, 11, 65535, 1, 
    185, 31, 65535, 1, 185), array(), array(10, 247, 11, 65535, 1, 189, 
    31, 65535, 1, 189), array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 
    23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 23, 55, 1, 295, 2, 55, 4, 65535, 1, 55, 1, 65535, 23, 
    55, 1, 295, 2, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 24, 55, 1, 296, 1, 
    55, 4, 65535, 1, 55, 1, 65535, 24, 55, 1, 296, 1, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 4, 55, 1, 297, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 
    55, 1, 297, 21, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 8, 55, 1, 298, 17, 
    55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 298, 17, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 24, 55, 1, 299, 1, 55, 4, 65535, 1, 55, 1, 
    65535, 24, 55, 1, 299, 1, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(), array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 13, 55, 1, 300, 12, 55, 4, 65535, 1, 55, 1, 65535, 13, 55, 
    1, 300, 12, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 19, 55, 1, 301, 6, 
    55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 301, 6, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 
    26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 
    1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 13, 55, 1, 304, 12, 55, 4, 
    65535, 1, 55, 1, 65535, 13, 55, 1, 304, 12, 55, 60, 65535, 1, 58, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 4, 55, 1, 305, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 
    305, 21, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 
    65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 
    49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 307, 25, 55, 
    4, 65535, 1, 55, 1, 65535, 1, 307, 25, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 
    26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 
    55, 1, 309, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 309, 21, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 17, 55, 1, 310, 8, 55, 4, 65535, 
    1, 55, 1, 65535, 17, 55, 1, 310, 8, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 18, 
    55, 1, 312, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 312, 7, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 19, 55, 1, 313, 6, 55, 4, 65535, 
    1, 55, 1, 65535, 19, 55, 1, 313, 6, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 19, 
    55, 1, 314, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 314, 6, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 315, 21, 55, 4, 65535, 
    1, 55, 1, 65535, 4, 55, 1, 315, 21, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 18, 
    55, 1, 316, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 316, 7, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 3, 55, 1, 317, 22, 55, 4, 65535, 
    1, 55, 1, 65535, 3, 55, 1, 317, 22, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 
    55, 1, 320, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 320, 21, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 
    26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 17, 55, 1, 322, 8, 
    55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 322, 8, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 19, 55, 1, 326, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 
    55, 1, 326, 6, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 13, 55, 1, 327, 12, 
    55, 4, 65535, 1, 55, 1, 65535, 13, 55, 1, 327, 12, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 6, 55, 1, 330, 19, 55, 4, 65535, 1, 55, 1, 65535, 6, 
    55, 1, 330, 19, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    ), array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 
    55, 1, 334, 24, 55, 4, 65535, 1, 55, 1, 65535, 1, 55, 1, 334, 24, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 15, 55, 1, 335, 10, 55, 4, 65535, 
    1, 55, 1, 65535, 15, 55, 1, 335, 10, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 2, 
    55, 1, 336, 23, 55, 4, 65535, 1, 55, 1, 65535, 2, 55, 1, 336, 23, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 
    26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(
    ), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 10, 55, 1, 
    338, 15, 55, 4, 65535, 1, 55, 1, 65535, 10, 55, 1, 338, 15, 55, 60, 
    65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 
    112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 17, 55, 1, 339, 8, 55, 4, 65535, 1, 55, 1, 
    65535, 17, 55, 1, 339, 8, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 
    19, 55, 1, 340, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 340, 6, 
    55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 20, 55, 1, 342, 
    5, 55, 4, 65535, 1, 55, 1, 65535, 20, 55, 1, 342, 5, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 2, 55, 1, 343, 23, 55, 4, 65535, 1, 55, 1, 
    65535, 2, 55, 1, 343, 23, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 
    4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 
    1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 
    4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 
    1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 17, 55, 
    1, 346, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 346, 8, 55, 60, 
    65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 
    112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 
    26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(
    ), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 3, 55, 1, 
    349, 22, 55, 4, 65535, 1, 55, 1, 65535, 3, 55, 1, 349, 22, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(), array(
    ), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 
    65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 
    1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 1, 352, 
    25, 55, 4, 65535, 1, 55, 1, 65535, 1, 352, 25, 55, 60, 65535, 1, 58, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(), array(
    ), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 
    354, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 354, 21, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 
    1, 23, 6, 65535, 4, 55, 1, 355, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 
    55, 1, 355, 21, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 19, 55, 1, 356, 6, 
    55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 356, 6, 55, 60, 65535, 1, 
    58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 
    60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 
    55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 1, 358, 25, 55, 4, 65535, 1, 55, 
    1, 65535, 1, 358, 25, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 2, 55, 1, 359, 
    23, 55, 4, 65535, 1, 55, 1, 65535, 2, 55, 1, 359, 23, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 2, 55, 1, 360, 23, 55, 4, 65535, 1, 55, 1, 
    65535, 2, 55, 1, 360, 23, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 4, 55, 1, 
    361, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 361, 21, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 12, 55, 1, 362, 13, 55, 4, 65535, 
    1, 55, 1, 65535, 12, 55, 1, 362, 13, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 
    23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 
    14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(), array(1, 56, 1, 61, 
    1, 65535, 10, 57, 1, 23, 6, 65535, 11, 55, 1, 364, 14, 55, 4, 65535, 
    1, 55, 1, 65535, 11, 55, 1, 364, 14, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 
    26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 
    11, 55, 1, 368, 14, 55, 4, 65535, 1, 55, 1, 65535, 11, 55, 1, 368, 14, 
    55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 
    1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 7, 55, 1, 369, 18, 55, 4, 
    65535, 1, 55, 1, 65535, 7, 55, 1, 369, 18, 55, 60, 65535, 1, 58, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 
    6, 65535, 19, 55, 1, 370, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 
    1, 370, 6, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 4, 65535, 
    1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(), array(), array(1, 56, 1, 61, 1, 65535, 10, 
    57, 1, 23, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 
    65535, 1, 58, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 
    112, 59, 14, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    60, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 4, 55, 1, 375, 21, 55, 4, 65535, 1, 55, 1, 
    65535, 4, 55, 1, 375, 21, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 26, 55, 
    4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 
    1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(), array(), array(), array(), array(1, 56, 1, 61, 1, 65535, 
    10, 57, 1, 23, 6, 65535, 18, 55, 1, 377, 7, 55, 4, 65535, 1, 55, 1, 
    65535, 18, 55, 1, 377, 7, 55, 60, 65535, 1, 58, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 7297, 55, 
    12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(), array(1, 56, 1, 61, 1, 65535, 10, 57, 1, 23, 6, 65535, 
    26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 58, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 520, 55, 112, 59, 14, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 60, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array());

    $arr = array();
    $arr['eot'] = DFA::unpackRLE($eot);
    $arr['eof'] = DFA::unpackRLE($eof);
    $arr['min'] = DFA::unpackRLE($min, true);
    $arr['max'] = DFA::unpackRLE($max, true);
    $arr['accept'] = DFA::unpackRLE($accept);
    $arr['special'] = DFA::unpackRLE($special);


    $numStates = sizeof($transitionS);
    $arr['transition'] = array();
    for ($i=0; $i<$numStates; $i++) {
        $arr['transition'][$i] = DFA::unpackRLE($transitionS[$i]);
    }
    return $arr;
}
$Erfurt_Sparql_Sparql10_Tokens_DFA35 = Erfurt_Sparql_Sparql10_Tokens_DFA35_static();

class Erfurt_Sparql_Sparql10_Tokens_DFA35 extends DFA {

    public function __construct($recognizer) {
        global $Erfurt_Sparql_Sparql10_Tokens_DFA35;
        $DFA = $Erfurt_Sparql_Sparql10_Tokens_DFA35;
        $this->recognizer = $recognizer;
        $this->decisionNumber = 35;
        $this->eot = $DFA['eot'];
        $this->eof = $DFA['eof'];
        $this->min = $DFA['min'];
        $this->max = $DFA['max'];
        $this->accept = $DFA['accept'];
        $this->special = $DFA['special'];
        $this->transition = $DFA['transition'];
    }
    public function getDescription() {
        return "1:1: Tokens : ( BASE | PREFIX | MODIFY | DELETE | INSERT | DATA | INTO | LOAD | CLEAR | CREATE | SILENT | DROP | EXISTS | UNSAID | NOT | SELECT | DISTINCT | REDUCED | CONSTRUCT | DESCRIBE | ASK | FROM | NAMED | WHERE | ORDER | GROUP | HAVING | BY | ASC | DESC | LIMIT | OFFSET | OPTIONAL | GRAPH | UNION | FILTER | A | AS | STR | LANG | LANGMATCHES | DATATYPE | BOUND | SAMETERM | ISIRI | ISURI | ISBLANK | ISLITERAL | REGEX | COUNT | SUM | MIN | MAX | AVG | TRUE | FALSE | IF | COALESCE | IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | LANGTAG | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | BLANK_NODE_LABEL | REFERENCE | AND | OR | COMMENT | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | SEMICOLON | DOT | PLUS | MINUS | ASTERISK | COMMA | NOT_SIGN | DIVIDE | EQUAL | LESS | GREATER | OPEN_BRACE | CLOSE_BRACE | LESS_EQUAL | GREATER_EQUAL | NOT_EQUAL | OPEN_SQUARE_BRACE | CLOSE_SQUARE_BRACE );";
    }
    public function specialStateTransition($s, IntStream $_input) {
        $input = $_input;
    	$_s = $s;
        switch ( $s ) {
                case 0 : 
                    $LA35_31 = $input->LA(1);

                    $s = -1;
                    if ( ($LA35_31==$this->getToken('39')) ) {$s = 118;}

                    else if ( (($LA35_31>=$this->getToken('0') && $LA35_31<=$this->getToken('9'))||($LA35_31>=$this->getToken('11') && $LA35_31<=$this->getToken('12'))||($LA35_31>=$this->getToken('14') && $LA35_31<=$this->getToken('38'))||($LA35_31>=$this->getToken('40') && $LA35_31<=$this->getToken('65535'))) ) {$s = 119;}

                    if ( $s>=0 ) return $s;
                    break;
                case 1 : 
                    $LA35_32 = $input->LA(1);

                    $s = -1;
                    if ( ($LA35_32==$this->getToken('34')) ) {$s = 120;}

                    else if ( (($LA35_32>=$this->getToken('0') && $LA35_32<=$this->getToken('9'))||($LA35_32>=$this->getToken('11') && $LA35_32<=$this->getToken('12'))||($LA35_32>=$this->getToken('14') && $LA35_32<=$this->getToken('33'))||($LA35_32>=$this->getToken('35') && $LA35_32<=$this->getToken('65535'))) ) {$s = 121;}

                    if ( $s>=0 ) return $s;
                    break;
        }
        $nvae =
            new NoViableAltException($this->getDescription(), 35, $_s, $input);
        $this->error($nvae);
        throw $nvae;        
    }
}
      

class Erfurt_Sparql_Sparql10_Tokens extends AntlrLexer {
    static $PREFIX=5;
    static $EXPONENT=80;
    static $SILENT=14;
    static $CLOSE_SQUARE_BRACE=116;
    static $GRAPH=37;
    static $REGEX=52;
    static $PNAME_LN=70;
    static $CONSTRUCT=22;
    static $COUNT=53;
    static $NOT=18;
    static $EOF=-1;
    static $CLEAR=12;
    static $VARNAME=71;
    static $ISLITERAL=51;
    static $CREATE=13;
    static $EOL=94;
    static $GREATER=63;
    static $INSERT=8;
    static $NOT_EQUAL=114;
    static $LESS=62;
    static $LANGMATCHES=44;
    static $DOUBLE=81;
    static $BASE=4;
    static $PN_CHARS_U=97;
    static $COMMENT=103;
    static $OPEN_CURLY_BRACE=64;
    static $SELECT=19;
    static $CLOSE_CURLY_BRACE=65;
    static $INTO=10;
    static $DOUBLE_POSITIVE=85;
    static $BOUND=46;
    static $DIVIDE=108;
    static $ISIRI=48;
    static $COALESCE=61;
    static $A=40;
    static $NOT_SIGN=107;
    static $ASC=32;
    static $LOAD=11;
    static $ASK=24;
    static $BLANK_NODE_LABEL=99;
    static $SEMICOLON=104;
    static $DELETE=7;
    static $ISBLANK=50;
    static $GROUP=29;
    static $WS=95;
    static $NAMED=26;
    static $INTEGER_POSITIVE=83;
    static $OR=102;
    static $STRING_LITERAL2=91;
    static $FILTER=39;
    static $DESCRIBE=23;
    static $STRING_LITERAL1=90;
    static $PN_CHARS=98;
    static $DATATYPE=45;
    static $LESS_EQUAL=112;
    static $DOUBLE_NEGATIVE=88;
    static $FROM=25;
    static $FALSE=59;
    static $DISTINCT=20;
    static $LANG=43;
    static $MODIFY=6;
    static $WHERE=27;
    static $IRI_REF=66;
    static $ORDER=28;
    static $LIMIT=34;
    static $T__117=117;
    static $MAX=56;
    static $AND=101;
    static $SUM=54;
    static $ASTERISK=105;
    static $IF=60;
    static $UNSAID=17;
    static $ISURI=49;
    static $STR=42;
    static $AS=41;
    static $SAMETERM=47;
    static $COMMA=106;
    static $OFFSET=35;
    static $AVG=57;
    static $EQUAL=109;
    static $DECIMAL_POSITIVE=84;
    static $PLUS=82;
    static $EXISTS=16;
    static $DIGIT=79;
    static $DOT=77;
    static $INTEGER=76;
    static $BY=31;
    static $REDUCED=21;
    static $INTEGER_NEGATIVE=86;
    static $PN_LOCAL=69;
    static $PNAME_NS=68;
    static $REFERENCE=100;
    static $HAVING=30;
    static $MIN=55;
    static $CLOSE_BRACE=111;
    static $MINUS=74;
    static $Tokens=118;
    static $TRUE=58;
    static $UNION=38;
    static $OPEN_SQUARE_BRACE=115;
    static $ECHAR=89;
    static $OPTIONAL=36;
    static $STRING_LITERAL_LONG2=93;
    static $PN_CHARS_BASE=96;
    static $DECIMAL=78;
    static $VAR1=72;
    static $DROP=15;
    static $VAR2=73;
    static $STRING_LITERAL_LONG1=92;
    static $DECIMAL_NEGATIVE=87;
    static $PN_PREFIX=67;
    static $DESC=33;
    static $OPEN_BRACE=110;
    static $GREATER_EQUAL=113;
    static $DATA=9;
    static $LANGTAG=75;

    // delegates
    // delegators
    /**
    * @param Erfurt_Sparql_Sparql10Lexer $gErfurt_Sparql_Sparql10
    */
    public $gErfurt_Sparql_Sparql10;
    /**
    * @param Erfurt_Sparql_Sparql10Lexer $gErfurt_Sparql_Sparql10
    */
    public $gParent;

    function __construct($input, $state=null){
        parent::__construct($input,$state);

        $this->gErfurt_Sparql_Sparql10 = $this->gErfurt_Sparql_Sparql10;
        $this->gParent = $this->gErfurt_Sparql_Sparql10;
        
            $this->dfa15 = new Erfurt_Sparql_Sparql10_Tokens_DFA15($this);
            $this->dfa29 = new Erfurt_Sparql_Sparql10_Tokens_DFA29($this);
            $this->dfa32 = new Erfurt_Sparql_Sparql10_Tokens_DFA32($this);
            $this->dfa35 = new Erfurt_Sparql_Sparql10_Tokens_DFA35($this);
    }
    function getGrammarFileName() { return "Tokens.g"; }

    // $ANTLR start "BASE"
    function mBASE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$BASE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:17:5: ( ( 'B' | 'b' ) ( 'A' | 'a' ) ( 'S' | 's' ) ( 'E' | 'e' ) ) 
            // Tokens.g:17:7: ( 'B' | 'b' ) ( 'A' | 'a' ) ( 'S' | 's' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('66')||$this->input->LA(1)==$this->getToken('98') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BASE"

    // $ANTLR start "PREFIX"
    function mPREFIX(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$PREFIX;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:21:5: ( ( 'P' | 'p' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'F' | 'f' ) ( 'I' | 'i' ) ( 'X' | 'x' ) ) 
            // Tokens.g:21:7: ( 'P' | 'p' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'F' | 'f' ) ( 'I' | 'i' ) ( 'X' | 'x' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('80')||$this->input->LA(1)==$this->getToken('112') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('88')||$this->input->LA(1)==$this->getToken('120') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PREFIX"

    // $ANTLR start "MODIFY"
    function mMODIFY(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$MODIFY;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:25:2: ( ( 'M' | 'm' ) ( 'O' | 'o' ) ( 'D' | 'd' ) ( 'I' | 'i' ) ( 'F' | 'f' ) ( 'Y' | 'y' ) ) 
            // Tokens.g:25:4: ( 'M' | 'm' ) ( 'O' | 'o' ) ( 'D' | 'd' ) ( 'I' | 'i' ) ( 'F' | 'f' ) ( 'Y' | 'y' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('89')||$this->input->LA(1)==$this->getToken('121') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "MODIFY"

    // $ANTLR start "DELETE"
    function mDELETE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DELETE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:29:2: ( ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'T' | 't' ) ( 'E' | 'e' ) ) 
            // Tokens.g:29:4: ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'T' | 't' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DELETE"

    // $ANTLR start "INSERT"
    function mINSERT(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$INSERT;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:33:2: ( ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'S' | 's' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'T' | 't' ) ) 
            // Tokens.g:33:4: ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'S' | 's' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INSERT"

    // $ANTLR start "DATA"
    function mDATA(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DATA;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:37:2: ( ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'A' | 'a' ) ) 
            // Tokens.g:37:4: ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'A' | 'a' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DATA"

    // $ANTLR start "INTO"
    function mINTO(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$INTO;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:41:2: ( ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'T' | 't' ) ( 'O' | 'o' ) ) 
            // Tokens.g:41:3: ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'T' | 't' ) ( 'O' | 'o' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INTO"

    // $ANTLR start "LOAD"
    function mLOAD(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$LOAD;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:45:2: ( ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'A' | 'a' ) ( 'D' | 'd' ) ) 
            // Tokens.g:45:4: ( 'L' | 'l' ) ( 'O' | 'o' ) ( 'A' | 'a' ) ( 'D' | 'd' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LOAD"

    // $ANTLR start "CLEAR"
    function mCLEAR(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$CLEAR;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:49:2: ( ( 'C' | 'c' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'A' | 'a' ) ( 'R' | 'r' ) ) 
            // Tokens.g:49:4: ( 'C' | 'c' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'A' | 'a' ) ( 'R' | 'r' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CLEAR"

    // $ANTLR start "CREATE"
    function mCREATE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$CREATE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:52:2: ( ( 'C' | 'c' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'E' | 'e' ) ) 
            // Tokens.g:52:4: ( 'C' | 'c' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CREATE"

    // $ANTLR start "SILENT"
    function mSILENT(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$SILENT;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:56:2: ( ( 'S' | 's' ) ( 'I' | 'i' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'N' | 'n' ) ( 'T' | 't' ) ) 
            // Tokens.g:56:4: ( 'S' | 's' ) ( 'I' | 'i' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'N' | 'n' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SILENT"

    // $ANTLR start "DROP"
    function mDROP(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DROP;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:60:2: ( ( 'D' | 'd' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'P' | 'p' ) ) 
            // Tokens.g:60:4: ( 'D' | 'd' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'P' | 'p' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('80')||$this->input->LA(1)==$this->getToken('112') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DROP"

    // $ANTLR start "EXISTS"
    function mEXISTS(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$EXISTS;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:64:2: ( ( 'E' | 'e' ) ( 'X' | 'x' ) ( 'I' | 'i' ) ( 'S' | 's' ) ( 'T' | 't' ) ( 'S' | 's' ) ) 
            // Tokens.g:64:4: ( 'E' | 'e' ) ( 'X' | 'x' ) ( 'I' | 'i' ) ( 'S' | 's' ) ( 'T' | 't' ) ( 'S' | 's' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('88')||$this->input->LA(1)==$this->getToken('120') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "EXISTS"

    // $ANTLR start "UNSAID"
    function mUNSAID(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$UNSAID;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:68:2: ( ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'S' | 's' ) ( 'A' | 'a' ) ( 'I' | 'i' ) ( 'D' | 'd' ) ) 
            // Tokens.g:68:4: ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'S' | 's' ) ( 'A' | 'a' ) ( 'I' | 'i' ) ( 'D' | 'd' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "UNSAID"

    // $ANTLR start "NOT"
    function mNOT(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$NOT;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:72:2: ( ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' ) ) 
            // Tokens.g:72:4: ( 'N' | 'n' ) ( 'O' | 'o' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NOT"

    // $ANTLR start "SELECT"
    function mSELECT(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$SELECT;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:76:5: ( ( 'S' | 's' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'C' | 'c' ) ( 'T' | 't' ) ) 
            // Tokens.g:76:7: ( 'S' | 's' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'C' | 'c' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SELECT"

    // $ANTLR start "DISTINCT"
    function mDISTINCT(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DISTINCT;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:80:5: ( ( 'D' | 'd' ) ( 'I' | 'i' ) ( 'S' | 's' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'C' | 'c' ) ( 'T' | 't' ) ) 
            // Tokens.g:80:7: ( 'D' | 'd' ) ( 'I' | 'i' ) ( 'S' | 's' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'C' | 'c' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DISTINCT"

    // $ANTLR start "REDUCED"
    function mREDUCED(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$REDUCED;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:84:5: ( ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ( 'U' | 'u' ) ( 'C' | 'c' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ) 
            // Tokens.g:84:7: ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ( 'U' | 'u' ) ( 'C' | 'c' ) ( 'E' | 'e' ) ( 'D' | 'd' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "REDUCED"

    // $ANTLR start "CONSTRUCT"
    function mCONSTRUCT(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$CONSTRUCT;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:88:5: ( ( 'C' | 'c' ) ( 'O' | 'o' ) ( 'N' | 'n' ) ( 'S' | 's' ) ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'C' | 'c' ) ( 'T' | 't' ) ) 
            // Tokens.g:88:7: ( 'C' | 'c' ) ( 'O' | 'o' ) ( 'N' | 'n' ) ( 'S' | 's' ) ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'C' | 'c' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CONSTRUCT"

    // $ANTLR start "DESCRIBE"
    function mDESCRIBE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DESCRIBE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:92:5: ( ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'C' | 'c' ) ( 'R' | 'r' ) ( 'I' | 'i' ) ( 'B' | 'b' ) ( 'E' | 'e' ) ) 
            // Tokens.g:92:7: ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'C' | 'c' ) ( 'R' | 'r' ) ( 'I' | 'i' ) ( 'B' | 'b' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('66')||$this->input->LA(1)==$this->getToken('98') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DESCRIBE"

    // $ANTLR start "ASK"
    function mASK(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$ASK;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:96:5: ( ( 'A' | 'a' ) ( 'S' | 's' ) ( 'K' | 'k' ) ) 
            // Tokens.g:96:7: ( 'A' | 'a' ) ( 'S' | 's' ) ( 'K' | 'k' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('75')||$this->input->LA(1)==$this->getToken('107') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ASK"

    // $ANTLR start "FROM"
    function mFROM(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$FROM;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:100:5: ( ( 'F' | 'f' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'M' | 'm' ) ) 
            // Tokens.g:100:7: ( 'F' | 'f' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'M' | 'm' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "FROM"

    // $ANTLR start "NAMED"
    function mNAMED(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$NAMED;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:104:5: ( ( 'N' | 'n' ) ( 'A' | 'a' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ) 
            // Tokens.g:104:7: ( 'N' | 'n' ) ( 'A' | 'a' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'D' | 'd' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NAMED"

    // $ANTLR start "WHERE"
    function mWHERE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$WHERE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:108:5: ( ( 'W' | 'w' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ) 
            // Tokens.g:108:7: ( 'W' | 'w' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('87')||$this->input->LA(1)==$this->getToken('119') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('72')||$this->input->LA(1)==$this->getToken('104') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "WHERE"

    // $ANTLR start "ORDER"
    function mORDER(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$ORDER;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:112:5: ( ( 'O' | 'o' ) ( 'R' | 'r' ) ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ) 
            // Tokens.g:112:7: ( 'O' | 'o' ) ( 'R' | 'r' ) ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'R' | 'r' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ORDER"

    // $ANTLR start "GROUP"
    function mGROUP(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$GROUP;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:116:2: ( ( 'G' | 'g' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'U' | 'u' ) ( 'P' | 'p' ) ) 
            // Tokens.g:116:4: ( 'G' | 'g' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'U' | 'u' ) ( 'P' | 'p' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('80')||$this->input->LA(1)==$this->getToken('112') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GROUP"

    // $ANTLR start "HAVING"
    function mHAVING(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$HAVING;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:120:2: ( ( 'H' | 'h' ) ( 'A' | 'a' ) ( 'V' | 'v' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'G' | 'g' ) ) 
            // Tokens.g:120:4: ( 'H' | 'h' ) ( 'A' | 'a' ) ( 'V' | 'v' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'G' | 'g' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('72')||$this->input->LA(1)==$this->getToken('104') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('86')||$this->input->LA(1)==$this->getToken('118') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "HAVING"

    // $ANTLR start "BY"
    function mBY(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$BY;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:124:5: ( ( 'B' | 'b' ) ( 'Y' | 'y' ) ) 
            // Tokens.g:124:7: ( 'B' | 'b' ) ( 'Y' | 'y' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('66')||$this->input->LA(1)==$this->getToken('98') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('89')||$this->input->LA(1)==$this->getToken('121') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BY"

    // $ANTLR start "ASC"
    function mASC(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$ASC;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:128:5: ( ( 'A' | 'a' ) ( 'S' | 's' ) ( 'C' | 'c' ) ) 
            // Tokens.g:128:7: ( 'A' | 'a' ) ( 'S' | 's' ) ( 'C' | 'c' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ASC"

    // $ANTLR start "DESC"
    function mDESC(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DESC;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:132:5: ( ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'C' | 'c' ) ) 
            // Tokens.g:132:7: ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'C' | 'c' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DESC"

    // $ANTLR start "LIMIT"
    function mLIMIT(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$LIMIT;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:136:5: ( ( 'L' | 'l' ) ( 'I' | 'i' ) ( 'M' | 'm' ) ( 'I' | 'i' ) ( 'T' | 't' ) ) 
            // Tokens.g:136:7: ( 'L' | 'l' ) ( 'I' | 'i' ) ( 'M' | 'm' ) ( 'I' | 'i' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LIMIT"

    // $ANTLR start "OFFSET"
    function mOFFSET(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$OFFSET;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:140:5: ( ( 'O' | 'o' ) ( 'F' | 'f' ) ( 'F' | 'f' ) ( 'S' | 's' ) ( 'E' | 'e' ) ( 'T' | 't' ) ) 
            // Tokens.g:140:7: ( 'O' | 'o' ) ( 'F' | 'f' ) ( 'F' | 'f' ) ( 'S' | 's' ) ( 'E' | 'e' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OFFSET"

    // $ANTLR start "OPTIONAL"
    function mOPTIONAL(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$OPTIONAL;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:144:5: ( ( 'O' | 'o' ) ( 'P' | 'p' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ) 
            // Tokens.g:144:7: ( 'O' | 'o' ) ( 'P' | 'p' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) ( 'A' | 'a' ) ( 'L' | 'l' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('80')||$this->input->LA(1)==$this->getToken('112') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPTIONAL"

    // $ANTLR start "GRAPH"
    function mGRAPH(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$GRAPH;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:148:5: ( ( 'G' | 'g' ) ( 'R' | 'r' ) ( 'A' | 'a' ) ( 'P' | 'p' ) ( 'H' | 'h' ) ) 
            // Tokens.g:148:7: ( 'G' | 'g' ) ( 'R' | 'r' ) ( 'A' | 'a' ) ( 'P' | 'p' ) ( 'H' | 'h' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('80')||$this->input->LA(1)==$this->getToken('112') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('72')||$this->input->LA(1)==$this->getToken('104') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GRAPH"

    // $ANTLR start "UNION"
    function mUNION(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$UNION;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:152:5: ( ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) ) 
            // Tokens.g:152:7: ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "UNION"

    // $ANTLR start "FILTER"
    function mFILTER(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$FILTER;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:156:5: ( ( 'F' | 'f' ) ( 'I' | 'i' ) ( 'L' | 'l' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ) 
            // Tokens.g:156:7: ( 'F' | 'f' ) ( 'I' | 'i' ) ( 'L' | 'l' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "FILTER"

    // $ANTLR start "A"
    function mA(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$A;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:160:5: ( ( 'a' ) ) 
            // Tokens.g:160:7: ( 'a' ) 
            {
            // Tokens.g:160:7: ( 'a' ) 
            // Tokens.g:160:8: 'a' 
            {
            $this->matchChar(97); 

            }


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "A"

    // $ANTLR start "AS"
    function mAS(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$AS;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:164:2: ( ( 'A' | 'a' ) ( 'S' | 's' ) ) 
            // Tokens.g:164:4: ( 'A' | 'a' ) ( 'S' | 's' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "AS"

    // $ANTLR start "STR"
    function mSTR(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$STR;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:168:5: ( ( 'S' | 's' ) ( 'T' | 't' ) ( 'R' | 'r' ) ) 
            // Tokens.g:168:7: ( 'S' | 's' ) ( 'T' | 't' ) ( 'R' | 'r' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STR"

    // $ANTLR start "LANG"
    function mLANG(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$LANG;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:172:5: ( ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'G' | 'g' ) ) 
            // Tokens.g:172:7: ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'G' | 'g' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LANG"

    // $ANTLR start "LANGMATCHES"
    function mLANGMATCHES(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$LANGMATCHES;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:176:5: ( ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'G' | 'g' ) ( 'M' | 'm' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'C' | 'c' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'S' | 's' ) ) 
            // Tokens.g:176:7: ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'G' | 'g' ) ( 'M' | 'm' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'C' | 'c' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'S' | 's' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('72')||$this->input->LA(1)==$this->getToken('104') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LANGMATCHES"

    // $ANTLR start "DATATYPE"
    function mDATATYPE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DATATYPE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:180:5: ( ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'Y' | 'y' ) ( 'P' | 'p' ) ( 'E' | 'e' ) ) 
            // Tokens.g:180:7: ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'Y' | 'y' ) ( 'P' | 'p' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('89')||$this->input->LA(1)==$this->getToken('121') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('80')||$this->input->LA(1)==$this->getToken('112') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DATATYPE"

    // $ANTLR start "BOUND"
    function mBOUND(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$BOUND;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:184:5: ( ( 'B' | 'b' ) ( 'O' | 'o' ) ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'D' | 'd' ) ) 
            // Tokens.g:184:7: ( 'B' | 'b' ) ( 'O' | 'o' ) ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'D' | 'd' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('66')||$this->input->LA(1)==$this->getToken('98') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BOUND"

    // $ANTLR start "SAMETERM"
    function mSAMETERM(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$SAMETERM;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:188:5: ( ( 'S' | 's' ) ( 'A' | 'a' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'M' | 'm' ) ) 
            // Tokens.g:188:7: ( 'S' | 's' ) ( 'A' | 'a' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'M' | 'm' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SAMETERM"

    // $ANTLR start "ISIRI"
    function mISIRI(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$ISIRI;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:192:5: ( ( 'I' | 'i' ) ( 'S' | 's' ) ( 'I' | 'i' ) ( 'R' | 'r' ) ( 'I' | 'i' ) ) 
            // Tokens.g:192:7: ( 'I' | 'i' ) ( 'S' | 's' ) ( 'I' | 'i' ) ( 'R' | 'r' ) ( 'I' | 'i' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISIRI"

    // $ANTLR start "ISURI"
    function mISURI(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$ISURI;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:196:5: ( ( 'I' | 'i' ) ( 'S' | 's' ) ( 'U' | 'u' ) ( 'R' | 'r' ) ( 'I' | 'i' ) ) 
            // Tokens.g:196:7: ( 'I' | 'i' ) ( 'S' | 's' ) ( 'U' | 'u' ) ( 'R' | 'r' ) ( 'I' | 'i' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISURI"

    // $ANTLR start "ISBLANK"
    function mISBLANK(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$ISBLANK;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:200:5: ( ( 'I' | 'i' ) ( 'S' | 's' ) ( 'B' | 'b' ) ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'K' | 'k' ) ) 
            // Tokens.g:200:7: ( 'I' | 'i' ) ( 'S' | 's' ) ( 'B' | 'b' ) ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'K' | 'k' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('66')||$this->input->LA(1)==$this->getToken('98') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('75')||$this->input->LA(1)==$this->getToken('107') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISBLANK"

    // $ANTLR start "ISLITERAL"
    function mISLITERAL(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$ISLITERAL;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:204:5: ( ( 'I' | 'i' ) ( 'S' | 's' ) ( 'L' | 'l' ) ( 'I' | 'i' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ) 
            // Tokens.g:204:7: ( 'I' | 'i' ) ( 'S' | 's' ) ( 'L' | 'l' ) ( 'I' | 'i' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'A' | 'a' ) ( 'L' | 'l' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISLITERAL"

    // $ANTLR start "REGEX"
    function mREGEX(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$REGEX;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:208:5: ( ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'G' | 'g' ) ( 'E' | 'e' ) ( 'X' | 'x' ) ) 
            // Tokens.g:208:7: ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'G' | 'g' ) ( 'E' | 'e' ) ( 'X' | 'x' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('88')||$this->input->LA(1)==$this->getToken('120') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "REGEX"

    // $ANTLR start "COUNT"
    function mCOUNT(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$COUNT;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:212:2: ( ( 'C' | 'c' ) ( 'O' | 'o' ) ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'T' | 't' ) ) 
            // Tokens.g:212:4: ( 'C' | 'c' ) ( 'O' | 'o' ) ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "COUNT"

    // $ANTLR start "SUM"
    function mSUM(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$SUM;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:216:2: ( ( 'S' | 's' ) ( 'U' | 'u' ) ( 'M' | 'm' ) ) 
            // Tokens.g:216:3: ( 'S' | 's' ) ( 'U' | 'u' ) ( 'M' | 'm' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SUM"

    // $ANTLR start "MIN"
    function mMIN(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$MIN;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:220:2: ( ( 'M' | 'm' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ) 
            // Tokens.g:220:3: ( 'M' | 'm' ) ( 'I' | 'i' ) ( 'N' | 'n' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "MIN"

    // $ANTLR start "MAX"
    function mMAX(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$MAX;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:224:2: ( ( 'M' | 'm' ) ( 'A' | 'a' ) ( 'X' | 'x' ) ) 
            // Tokens.g:224:4: ( 'M' | 'm' ) ( 'A' | 'a' ) ( 'X' | 'x' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('88')||$this->input->LA(1)==$this->getToken('120') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "MAX"

    // $ANTLR start "AVG"
    function mAVG(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$AVG;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:228:2: ( ( 'A' | 'a' ) ( 'V' | 'v' ) ( 'G' | 'g' ) ) 
            // Tokens.g:228:4: ( 'A' | 'a' ) ( 'V' | 'v' ) ( 'G' | 'g' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('86')||$this->input->LA(1)==$this->getToken('118') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "AVG"

    // $ANTLR start "TRUE"
    function mTRUE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$TRUE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:232:5: ( ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'E' | 'e' ) ) 
            // Tokens.g:232:7: ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "TRUE"

    // $ANTLR start "FALSE"
    function mFALSE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$FALSE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:236:5: ( ( 'F' | 'f' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' ) ) 
            // Tokens.g:236:7: ( 'F' | 'f' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "FALSE"

    // $ANTLR start "IF"
    function mIF(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$IF;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:240:2: ( ( 'I' | 'i' ) ( 'F' | 'f' ) ) 
            // Tokens.g:240:4: ( 'I' | 'i' ) ( 'F' | 'f' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "IF"

    // $ANTLR start "COALESCE"
    function mCOALESCE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$COALESCE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:244:2: ( ( 'C' | 'c' ) ( 'O' | 'o' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'C' | 'c' ) ( 'E' | 'e' ) ) 
            // Tokens.g:244:4: ( 'C' | 'c' ) ( 'O' | 'o' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'C' | 'c' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "COALESCE"

    // $ANTLR start "IRI_REF"
    function mIRI_REF(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$IRI_REF;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:248:5: ( LESS ( options {greedy=false; } : ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* GREATER ) 
            // Tokens.g:248:7: LESS ( options {greedy=false; } : ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* GREATER 
            {
            $this->mLESS(); 
            // Tokens.g:248:12: ( options {greedy=false; } : ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* 
            //loop1:
            do {
                $alt1=2;
                $LA1_0 = $this->input->LA(1);

                if ( ($LA1_0==$this->getToken('33')||($LA1_0>=$this->getToken('35') && $LA1_0<=$this->getToken('59'))||$LA1_0==$this->getToken('61')||($LA1_0>=$this->getToken('63') && $LA1_0<=$this->getToken('91'))||$LA1_0==$this->getToken('93')||$LA1_0==$this->getToken('95')||($LA1_0>=$this->getToken('97') && $LA1_0<=$this->getToken('122'))||($LA1_0>=$this->getToken('126') && $LA1_0<=$this->getToken('65535'))) ) {
                    $alt1=1;
                }
                else if ( ($LA1_0==$this->getToken('62')) ) {
                    $alt1=2;
                }


                switch ($alt1) {
            	case 1 :
            	    // Tokens.g:248:40: ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) 
            	    {
            	    if ( $this->input->LA(1)==$this->getToken('33')||($this->input->LA(1)>=$this->getToken('35') && $this->input->LA(1)<=$this->getToken('59'))||$this->input->LA(1)==$this->getToken('61')||($this->input->LA(1)>=$this->getToken('63') && $this->input->LA(1)<=$this->getToken('91'))||$this->input->LA(1)==$this->getToken('93')||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('126') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;

            	default :
            	    break 2;//loop1;
                }
            } while (true);

            $this->mGREATER(); 
              $this->setText(substr($this->getText(), 1, strlen($this->getText()) - 2)); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "IRI_REF"

    // $ANTLR start "PNAME_NS"
    function mPNAME_NS(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$PNAME_NS;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            $p=null;

            // Tokens.g:253:5: ( (p= PN_PREFIX )? ':' ) 
            // Tokens.g:253:7: (p= PN_PREFIX )? ':' 
            {
            // Tokens.g:253:8: (p= PN_PREFIX )? 
            $alt2=2;
            $LA2_0 = $this->input->LA(1);

            if ( (($LA2_0>=$this->getToken('65') && $LA2_0<=$this->getToken('90'))||($LA2_0>=$this->getToken('97') && $LA2_0<=$this->getToken('122'))||($LA2_0>=$this->getToken('192') && $LA2_0<=$this->getToken('214'))||($LA2_0>=$this->getToken('216') && $LA2_0<=$this->getToken('246'))||($LA2_0>=$this->getToken('248') && $LA2_0<=$this->getToken('767'))||($LA2_0>=$this->getToken('880') && $LA2_0<=$this->getToken('893'))||($LA2_0>=$this->getToken('895') && $LA2_0<=$this->getToken('8191'))||($LA2_0>=$this->getToken('8204') && $LA2_0<=$this->getToken('8205'))||($LA2_0>=$this->getToken('8304') && $LA2_0<=$this->getToken('8591'))||($LA2_0>=$this->getToken('11264') && $LA2_0<=$this->getToken('12271'))||($LA2_0>=$this->getToken('12289') && $LA2_0<=$this->getToken('55295'))||($LA2_0>=$this->getToken('63744') && $LA2_0<=$this->getToken('64975'))||($LA2_0>=$this->getToken('65008') && $LA2_0<=$this->getToken('65533'))) ) {
                $alt2=1;
            }
            switch ($alt2) {
                case 1 :
                    // Tokens.g:253:8: p= PN_PREFIX 
                    {
                    $pStart2417 = $this->getCharIndex();
                    $this->mPN_PREFIX(); 
                    $p = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $pStart2417, $this->getCharIndex()-1);

                    }
                    break;

            }

            $this->matchChar(58); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PNAME_NS"

    // $ANTLR start "PNAME_LN"
    function mPNAME_LN(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$PNAME_LN;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:257:5: ( PNAME_NS PN_LOCAL ) 
            // Tokens.g:257:7: PNAME_NS PN_LOCAL 
            {
            $this->mPNAME_NS(); 
            $this->mPN_LOCAL(); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PNAME_LN"

    // $ANTLR start "VAR1"
    function mVAR1(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$VAR1;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            $v=null;

            // Tokens.g:261:5: ( '?' v= VARNAME ) 
            // Tokens.g:261:7: '?' v= VARNAME 
            {
            $this->matchChar(63); 
            $vStart2460 = $this->getCharIndex();
            $this->mVARNAME(); 
            $v = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $vStart2460, $this->getCharIndex()-1);
              $this->setText(($v!=null?$v->getText():null));

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "VAR1"

    // $ANTLR start "VAR2"
    function mVAR2(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$VAR2;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            $v=null;

            // Tokens.g:265:5: ( '$' v= VARNAME ) 
            // Tokens.g:265:7: '$' v= VARNAME 
            {
            $this->matchChar(36); 
            $vStart2483 = $this->getCharIndex();
            $this->mVARNAME(); 
            $v = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $vStart2483, $this->getCharIndex()-1);
              $this->setText(($v!=null?$v->getText():null));

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "VAR2"

    // $ANTLR start "LANGTAG"
    function mLANGTAG(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$LANGTAG;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:269:5: ( '@' ( ( 'a' .. 'z' ) ( 'A' .. 'Z' ) )+ ( MINUS ( ( 'a' .. 'z' ) ( 'A' .. 'Z' ) ( '0' .. '9' ) )+ )* ) 
            // Tokens.g:269:7: '@' ( ( 'a' .. 'z' ) ( 'A' .. 'Z' ) )+ ( MINUS ( ( 'a' .. 'z' ) ( 'A' .. 'Z' ) ( '0' .. '9' ) )+ )* 
            {
            $this->matchChar(64); 
            // Tokens.g:269:11: ( ( 'a' .. 'z' ) ( 'A' .. 'Z' ) )+ 
            $cnt3=0;
            //loop3:
            do {
                $alt3=2;
                $LA3_0 = $this->input->LA(1);

                if ( (($LA3_0>=$this->getToken('97') && $LA3_0<=$this->getToken('122'))) ) {
                    $alt3=1;
                }


                switch ($alt3) {
            	case 1 :
            	    // Tokens.g:269:12: ( 'a' .. 'z' ) ( 'A' .. 'Z' ) 
            	    {
            	    // Tokens.g:269:12: ( 'a' .. 'z' ) 
            	    // Tokens.g:269:13: 'a' .. 'z' 
            	    {
            	    $this->matchRange(97,122); 

            	    }

            	    // Tokens.g:269:22: ( 'A' .. 'Z' ) 
            	    // Tokens.g:269:23: 'A' .. 'Z' 
            	    {
            	    $this->matchRange(65,90); 

            	    }


            	    }
            	    break;

            	default :
            	    if ( $cnt3 >= 1 ) break 2;//loop3;
                        $eee =
                            new EarlyExitException(3, $this->input);
                        throw $eee;
                }
                $cnt3++;
            } while (true);

            // Tokens.g:269:35: ( MINUS ( ( 'a' .. 'z' ) ( 'A' .. 'Z' ) ( '0' .. '9' ) )+ )* 
            //loop5:
            do {
                $alt5=2;
                $LA5_0 = $this->input->LA(1);

                if ( ($LA5_0==$this->getToken('45')) ) {
                    $alt5=1;
                }


                switch ($alt5) {
            	case 1 :
            	    // Tokens.g:269:36: MINUS ( ( 'a' .. 'z' ) ( 'A' .. 'Z' ) ( '0' .. '9' ) )+ 
            	    {
            	    $this->mMINUS(); 
            	    // Tokens.g:269:42: ( ( 'a' .. 'z' ) ( 'A' .. 'Z' ) ( '0' .. '9' ) )+ 
            	    $cnt4=0;
            	    //loop4:
            	    do {
            	        $alt4=2;
            	        $LA4_0 = $this->input->LA(1);

            	        if ( (($LA4_0>=$this->getToken('97') && $LA4_0<=$this->getToken('122'))) ) {
            	            $alt4=1;
            	        }


            	        switch ($alt4) {
            	    	case 1 :
            	    	    // Tokens.g:269:43: ( 'a' .. 'z' ) ( 'A' .. 'Z' ) ( '0' .. '9' ) 
            	    	    {
            	    	    // Tokens.g:269:43: ( 'a' .. 'z' ) 
            	    	    // Tokens.g:269:44: 'a' .. 'z' 
            	    	    {
            	    	    $this->matchRange(97,122); 

            	    	    }

            	    	    // Tokens.g:269:53: ( 'A' .. 'Z' ) 
            	    	    // Tokens.g:269:54: 'A' .. 'Z' 
            	    	    {
            	    	    $this->matchRange(65,90); 

            	    	    }

            	    	    // Tokens.g:269:63: ( '0' .. '9' ) 
            	    	    // Tokens.g:269:64: '0' .. '9' 
            	    	    {
            	    	    $this->matchRange(48,57); 

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( $cnt4 >= 1 ) break 2;//loop4;
            	                $eee =
            	                    new EarlyExitException(4, $this->input);
            	                throw $eee;
            	        }
            	        $cnt4++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break 2;//loop5;
                }
            } while (true);

              $this->setText(substr($this->getText(), 1, strlen($this->getText()) - 1)); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LANGTAG"

    // $ANTLR start "INTEGER"
    function mINTEGER(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$INTEGER;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:274:5: ( ( '0' .. '9' )+ ) 
            // Tokens.g:274:7: ( '0' .. '9' )+ 
            {
            // Tokens.g:274:7: ( '0' .. '9' )+ 
            $cnt6=0;
            //loop6:
            do {
                $alt6=2;
                $LA6_0 = $this->input->LA(1);

                if ( (($LA6_0>=$this->getToken('48') && $LA6_0<=$this->getToken('57'))) ) {
                    $alt6=1;
                }


                switch ($alt6) {
            	case 1 :
            	    // Tokens.g:274:8: '0' .. '9' 
            	    {
            	    $this->matchRange(48,57); 

            	    }
            	    break;

            	default :
            	    if ( $cnt6 >= 1 ) break 2;//loop6;
                        $eee =
                            new EarlyExitException(6, $this->input);
                        throw $eee;
                }
                $cnt6++;
            } while (true);


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INTEGER"

    // $ANTLR start "DECIMAL"
    function mDECIMAL(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DECIMAL;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:278:5: ( ( '0' .. '9' )+ DOT ( '0' .. '9' )* | DOT ( '0' .. '9' )+ ) 
            $alt10=2;
            $LA10_0 = $this->input->LA(1);

            if ( (($LA10_0>=$this->getToken('48') && $LA10_0<=$this->getToken('57'))) ) {
                $alt10=1;
            }
            else if ( ($LA10_0==$this->getToken('46')) ) {
                $alt10=2;
            }
            else {
                $nvae = new NoViableAltException("", 10, 0, $this->input);

                throw $nvae;
            }
            switch ($alt10) {
                case 1 :
                    // Tokens.g:278:7: ( '0' .. '9' )+ DOT ( '0' .. '9' )* 
                    {
                    // Tokens.g:278:7: ( '0' .. '9' )+ 
                    $cnt7=0;
                    //loop7:
                    do {
                        $alt7=2;
                        $LA7_0 = $this->input->LA(1);

                        if ( (($LA7_0>=$this->getToken('48') && $LA7_0<=$this->getToken('57'))) ) {
                            $alt7=1;
                        }


                        switch ($alt7) {
                    	case 1 :
                    	    // Tokens.g:278:8: '0' .. '9' 
                    	    {
                    	    $this->matchRange(48,57); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt7 >= 1 ) break 2;//loop7;
                                $eee =
                                    new EarlyExitException(7, $this->input);
                                throw $eee;
                        }
                        $cnt7++;
                    } while (true);

                    $this->mDOT(); 
                    // Tokens.g:278:23: ( '0' .. '9' )* 
                    //loop8:
                    do {
                        $alt8=2;
                        $LA8_0 = $this->input->LA(1);

                        if ( (($LA8_0>=$this->getToken('48') && $LA8_0<=$this->getToken('57'))) ) {
                            $alt8=1;
                        }


                        switch ($alt8) {
                    	case 1 :
                    	    // Tokens.g:278:24: '0' .. '9' 
                    	    {
                    	    $this->matchRange(48,57); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop8;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // Tokens.g:279:7: DOT ( '0' .. '9' )+ 
                    {
                    $this->mDOT(); 
                    // Tokens.g:279:11: ( '0' .. '9' )+ 
                    $cnt9=0;
                    //loop9:
                    do {
                        $alt9=2;
                        $LA9_0 = $this->input->LA(1);

                        if ( (($LA9_0>=$this->getToken('48') && $LA9_0<=$this->getToken('57'))) ) {
                            $alt9=1;
                        }


                        switch ($alt9) {
                    	case 1 :
                    	    // Tokens.g:279:12: '0' .. '9' 
                    	    {
                    	    $this->matchRange(48,57); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt9 >= 1 ) break 2;//loop9;
                                $eee =
                                    new EarlyExitException(9, $this->input);
                                throw $eee;
                        }
                        $cnt9++;
                    } while (true);


                    }
                    break;

            }
            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DECIMAL"

    // $ANTLR start "DOUBLE"
    function mDOUBLE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DOUBLE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:283:5: ( ( DIGIT )+ DOT ( DIGIT )* EXPONENT | DOT ( DIGIT )+ EXPONENT | ( DIGIT )+ EXPONENT ) 
            $alt15=3;
            $alt15 = $this->dfa15->predict($this->input);
            switch ($alt15) {
                case 1 :
                    // Tokens.g:283:7: ( DIGIT )+ DOT ( DIGIT )* EXPONENT 
                    {
                    // Tokens.g:283:7: ( DIGIT )+ 
                    $cnt11=0;
                    //loop11:
                    do {
                        $alt11=2;
                        $LA11_0 = $this->input->LA(1);

                        if ( (($LA11_0>=$this->getToken('48') && $LA11_0<=$this->getToken('57'))) ) {
                            $alt11=1;
                        }


                        switch ($alt11) {
                    	case 1 :
                    	    // Tokens.g:283:7: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt11 >= 1 ) break 2;//loop11;
                                $eee =
                                    new EarlyExitException(11, $this->input);
                                throw $eee;
                        }
                        $cnt11++;
                    } while (true);

                    $this->mDOT(); 
                    // Tokens.g:283:18: ( DIGIT )* 
                    //loop12:
                    do {
                        $alt12=2;
                        $LA12_0 = $this->input->LA(1);

                        if ( (($LA12_0>=$this->getToken('48') && $LA12_0<=$this->getToken('57'))) ) {
                            $alt12=1;
                        }


                        switch ($alt12) {
                    	case 1 :
                    	    // Tokens.g:283:18: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop12;
                        }
                    } while (true);

                    $this->mEXPONENT(); 

                    }
                    break;
                case 2 :
                    // Tokens.g:284:7: DOT ( DIGIT )+ EXPONENT 
                    {
                    $this->mDOT(); 
                    // Tokens.g:284:11: ( DIGIT )+ 
                    $cnt13=0;
                    //loop13:
                    do {
                        $alt13=2;
                        $LA13_0 = $this->input->LA(1);

                        if ( (($LA13_0>=$this->getToken('48') && $LA13_0<=$this->getToken('57'))) ) {
                            $alt13=1;
                        }


                        switch ($alt13) {
                    	case 1 :
                    	    // Tokens.g:284:11: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt13 >= 1 ) break 2;//loop13;
                                $eee =
                                    new EarlyExitException(13, $this->input);
                                throw $eee;
                        }
                        $cnt13++;
                    } while (true);

                    $this->mEXPONENT(); 

                    }
                    break;
                case 3 :
                    // Tokens.g:285:7: ( DIGIT )+ EXPONENT 
                    {
                    // Tokens.g:285:7: ( DIGIT )+ 
                    $cnt14=0;
                    //loop14:
                    do {
                        $alt14=2;
                        $LA14_0 = $this->input->LA(1);

                        if ( (($LA14_0>=$this->getToken('48') && $LA14_0<=$this->getToken('57'))) ) {
                            $alt14=1;
                        }


                        switch ($alt14) {
                    	case 1 :
                    	    // Tokens.g:285:7: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt14 >= 1 ) break 2;//loop14;
                                $eee =
                                    new EarlyExitException(14, $this->input);
                                throw $eee;
                        }
                        $cnt14++;
                    } while (true);

                    $this->mEXPONENT(); 

                    }
                    break;

            }
            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOUBLE"

    // $ANTLR start "DIGIT"
    function mDIGIT(){
        try {
            // Tokens.g:290:5: ( '0' .. '9' ) 
            // Tokens.g:290:7: '0' .. '9' 
            {
            $this->matchRange(48,57); 

            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DIGIT"

    // $ANTLR start "INTEGER_POSITIVE"
    function mINTEGER_POSITIVE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$INTEGER_POSITIVE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokens.g:294:5: ( PLUS n= INTEGER ) 
            // Tokens.g:294:7: PLUS n= INTEGER 
            {
            $this->mPLUS(); 
            $nStart2705 = $this->getCharIndex();
            $this->mINTEGER(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart2705, $this->getCharIndex()-1);
              $this->setText(($n!=null?$n->getText():null));

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INTEGER_POSITIVE"

    // $ANTLR start "DECIMAL_POSITIVE"
    function mDECIMAL_POSITIVE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DECIMAL_POSITIVE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokens.g:298:5: ( PLUS n= DECIMAL ) 
            // Tokens.g:298:7: PLUS n= DECIMAL 
            {
            $this->mPLUS(); 
            $nStart2728 = $this->getCharIndex();
            $this->mDECIMAL(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart2728, $this->getCharIndex()-1);
              $this->setText(($n!=null?$n->getText():null));

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DECIMAL_POSITIVE"

    // $ANTLR start "DOUBLE_POSITIVE"
    function mDOUBLE_POSITIVE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DOUBLE_POSITIVE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokens.g:302:5: ( PLUS n= DOUBLE ) 
            // Tokens.g:302:7: PLUS n= DOUBLE 
            {
            $this->mPLUS(); 
            $nStart2751 = $this->getCharIndex();
            $this->mDOUBLE(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart2751, $this->getCharIndex()-1);
              $this->setText(($n!=null?$n->getText():null));

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOUBLE_POSITIVE"

    // $ANTLR start "INTEGER_NEGATIVE"
    function mINTEGER_NEGATIVE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$INTEGER_NEGATIVE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokens.g:306:5: ( MINUS n= INTEGER ) 
            // Tokens.g:306:7: MINUS n= INTEGER 
            {
            $this->mMINUS(); 
            $nStart2774 = $this->getCharIndex();
            $this->mINTEGER(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart2774, $this->getCharIndex()-1);
              $this->setText(($n!=null?$n->getText():null));

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INTEGER_NEGATIVE"

    // $ANTLR start "DECIMAL_NEGATIVE"
    function mDECIMAL_NEGATIVE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DECIMAL_NEGATIVE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokens.g:310:5: ( MINUS n= DECIMAL ) 
            // Tokens.g:310:7: MINUS n= DECIMAL 
            {
            $this->mMINUS(); 
            $nStart2797 = $this->getCharIndex();
            $this->mDECIMAL(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart2797, $this->getCharIndex()-1);
              $this->setText(($n!=null?$n->getText():null));

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DECIMAL_NEGATIVE"

    // $ANTLR start "DOUBLE_NEGATIVE"
    function mDOUBLE_NEGATIVE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DOUBLE_NEGATIVE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokens.g:314:5: ( MINUS n= DOUBLE ) 
            // Tokens.g:314:7: MINUS n= DOUBLE 
            {
            $this->mMINUS(); 
            $nStart2820 = $this->getCharIndex();
            $this->mDOUBLE(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart2820, $this->getCharIndex()-1);
              $this->setText(($n!=null?$n->getText():null));

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOUBLE_NEGATIVE"

    // $ANTLR start "EXPONENT"
    function mEXPONENT(){
        try {
            // Tokens.g:318:10: ( ( 'e' | 'E' ) ( PLUS | MINUS )? ( '0' .. '9' )+ ) 
            // Tokens.g:318:12: ( 'e' | 'E' ) ( PLUS | MINUS )? ( '0' .. '9' )+ 
            {
            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            // Tokens.g:318:22: ( PLUS | MINUS )? 
            $alt16=2;
            $LA16_0 = $this->input->LA(1);

            if ( ($LA16_0==$this->getToken('43')||$LA16_0==$this->getToken('45')) ) {
                $alt16=1;
            }
            switch ($alt16) {
                case 1 :
                    // Tokens.g: 
                    {
                    if ( $this->input->LA(1)==$this->getToken('43')||$this->input->LA(1)==$this->getToken('45') ) {
                        $this->input->consume();

                    }
                    else {
                        $mse = new MismatchedSetException(null,$this->input);
                        $this->recover($mse);
                        throw $mse;}


                    }
                    break;

            }

            // Tokens.g:318:36: ( '0' .. '9' )+ 
            $cnt17=0;
            //loop17:
            do {
                $alt17=2;
                $LA17_0 = $this->input->LA(1);

                if ( (($LA17_0>=$this->getToken('48') && $LA17_0<=$this->getToken('57'))) ) {
                    $alt17=1;
                }


                switch ($alt17) {
            	case 1 :
            	    // Tokens.g:318:37: '0' .. '9' 
            	    {
            	    $this->matchRange(48,57); 

            	    }
            	    break;

            	default :
            	    if ( $cnt17 >= 1 ) break 2;//loop17;
                        $eee =
                            new EarlyExitException(17, $this->input);
                        throw $eee;
                }
                $cnt17++;
            } while (true);


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "EXPONENT"

    // $ANTLR start "STRING_LITERAL1"
    function mSTRING_LITERAL1(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$STRING_LITERAL1;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:321:5: ( '\\'' ( options {greedy=false; } : ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\\'' ) 
            // Tokens.g:321:7: '\\'' ( options {greedy=false; } : ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\\'' 
            {
            $this->matchChar(39); 
            // Tokens.g:321:12: ( options {greedy=false; } : ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* 
            //loop18:
            do {
                $alt18=3;
                $LA18_0 = $this->input->LA(1);

                if ( (($LA18_0>=$this->getToken('0') && $LA18_0<=$this->getToken('9'))||($LA18_0>=$this->getToken('11') && $LA18_0<=$this->getToken('12'))||($LA18_0>=$this->getToken('14') && $LA18_0<=$this->getToken('38'))||($LA18_0>=$this->getToken('40') && $LA18_0<=$this->getToken('91'))||($LA18_0>=$this->getToken('93') && $LA18_0<=$this->getToken('65535'))) ) {
                    $alt18=1;
                }
                else if ( ($LA18_0==$this->getToken('92')) ) {
                    $alt18=2;
                }
                else if ( ($LA18_0==$this->getToken('39')) ) {
                    $alt18=3;
                }


                switch ($alt18) {
            	case 1 :
            	    // Tokens.g:321:40: ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) 
            	    {
            	    if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('9'))||($this->input->LA(1)>=$this->getToken('11') && $this->input->LA(1)<=$this->getToken('12'))||($this->input->LA(1)>=$this->getToken('14') && $this->input->LA(1)<=$this->getToken('38'))||($this->input->LA(1)>=$this->getToken('40') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;
            	case 2 :
            	    // Tokens.g:321:87: ECHAR 
            	    {
            	    $this->mECHAR(); 

            	    }
            	    break;

            	default :
            	    break 2;//loop18;
                }
            } while (true);

            $this->matchChar(39); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL1"

    // $ANTLR start "STRING_LITERAL2"
    function mSTRING_LITERAL2(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$STRING_LITERAL2;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:325:5: ( '\"' ( options {greedy=false; } : ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\"' ) 
            // Tokens.g:325:7: '\"' ( options {greedy=false; } : ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\"' 
            {
            $this->matchChar(34); 
            // Tokens.g:325:12: ( options {greedy=false; } : ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* 
            //loop19:
            do {
                $alt19=3;
                $LA19_0 = $this->input->LA(1);

                if ( (($LA19_0>=$this->getToken('0') && $LA19_0<=$this->getToken('9'))||($LA19_0>=$this->getToken('11') && $LA19_0<=$this->getToken('12'))||($LA19_0>=$this->getToken('14') && $LA19_0<=$this->getToken('33'))||($LA19_0>=$this->getToken('35') && $LA19_0<=$this->getToken('91'))||($LA19_0>=$this->getToken('93') && $LA19_0<=$this->getToken('65535'))) ) {
                    $alt19=1;
                }
                else if ( ($LA19_0==$this->getToken('92')) ) {
                    $alt19=2;
                }
                else if ( ($LA19_0==$this->getToken('34')) ) {
                    $alt19=3;
                }


                switch ($alt19) {
            	case 1 :
            	    // Tokens.g:325:40: ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) 
            	    {
            	    if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('9'))||($this->input->LA(1)>=$this->getToken('11') && $this->input->LA(1)<=$this->getToken('12'))||($this->input->LA(1)>=$this->getToken('14') && $this->input->LA(1)<=$this->getToken('33'))||($this->input->LA(1)>=$this->getToken('35') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;
            	case 2 :
            	    // Tokens.g:325:87: ECHAR 
            	    {
            	    $this->mECHAR(); 

            	    }
            	    break;

            	default :
            	    break 2;//loop19;
                }
            } while (true);

            $this->matchChar(34); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL2"

    // $ANTLR start "STRING_LITERAL_LONG1"
    function mSTRING_LITERAL_LONG1(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$STRING_LITERAL_LONG1;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:329:5: ( '\\'\\'\\'' ( options {greedy=false; } : ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) )* '\\'\\'\\'' ) 
            // Tokens.g:329:9: '\\'\\'\\'' ( options {greedy=false; } : ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) )* '\\'\\'\\'' 
            {
            $this->matchString("'''"); 

            // Tokens.g:329:18: ( options {greedy=false; } : ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) )* 
            //loop22:
            do {
                $alt22=2;
                $LA22_0 = $this->input->LA(1);

                if ( ($LA22_0==$this->getToken('39')) ) {
                    $LA22_1 = $this->input->LA(2);

                    if ( ($LA22_1==$this->getToken('39')) ) {
                        $LA22_3 = $this->input->LA(3);

                        if ( ($LA22_3==$this->getToken('39')) ) {
                            $alt22=2;
                        }
                        else if ( (($LA22_3>=$this->getToken('0') && $LA22_3<=$this->getToken('38'))||($LA22_3>=$this->getToken('40') && $LA22_3<=$this->getToken('65535'))) ) {
                            $alt22=1;
                        }


                    }
                    else if ( (($LA22_1>=$this->getToken('0') && $LA22_1<=$this->getToken('38'))||($LA22_1>=$this->getToken('40') && $LA22_1<=$this->getToken('65535'))) ) {
                        $alt22=1;
                    }


                }
                else if ( (($LA22_0>=$this->getToken('0') && $LA22_0<=$this->getToken('38'))||($LA22_0>=$this->getToken('40') && $LA22_0<=$this->getToken('65535'))) ) {
                    $alt22=1;
                }


                switch ($alt22) {
            	case 1 :
            	    // Tokens.g:329:46: ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) 
            	    {
            	    // Tokens.g:329:46: ( '\\'' | '\\'\\'' )? 
            	    $alt20=3;
            	    $LA20_0 = $this->input->LA(1);

            	    if ( ($LA20_0==$this->getToken('39')) ) {
            	        $LA20_1 = $this->input->LA(2);

            	        if ( ($LA20_1==$this->getToken('39')) ) {
            	            $alt20=2;
            	        }
            	        else if ( (($LA20_1>=$this->getToken('0') && $LA20_1<=$this->getToken('38'))||($LA20_1>=$this->getToken('40') && $LA20_1<=$this->getToken('65535'))) ) {
            	            $alt20=1;
            	        }
            	    }
            	    switch ($alt20) {
            	        case 1 :
            	            // Tokens.g:329:48: '\\'' 
            	            {
            	            $this->matchChar(39); 

            	            }
            	            break;
            	        case 2 :
            	            // Tokens.g:329:55: '\\'\\'' 
            	            {
            	            $this->matchString("''"); 


            	            }
            	            break;

            	    }

            	    // Tokens.g:329:65: (~ ( '\\'' | '\\\\' ) | ECHAR ) 
            	    $alt21=2;
            	    $LA21_0 = $this->input->LA(1);

            	    if ( (($LA21_0>=$this->getToken('0') && $LA21_0<=$this->getToken('38'))||($LA21_0>=$this->getToken('40') && $LA21_0<=$this->getToken('91'))||($LA21_0>=$this->getToken('93') && $LA21_0<=$this->getToken('65535'))) ) {
            	        $alt21=1;
            	    }
            	    else if ( ($LA21_0==$this->getToken('92')) ) {
            	        $alt21=2;
            	    }
            	    else {
            	        $nvae = new NoViableAltException("", 21, 0, $this->input);

            	        throw $nvae;
            	    }
            	    switch ($alt21) {
            	        case 1 :
            	            // Tokens.g:329:67: ~ ( '\\'' | '\\\\' ) 
            	            {
            	            if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('38'))||($this->input->LA(1)>=$this->getToken('40') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	                $this->input->consume();

            	            }
            	            else {
            	                $mse = new MismatchedSetException(null,$this->input);
            	                $this->recover($mse);
            	                throw $mse;}


            	            }
            	            break;
            	        case 2 :
            	            // Tokens.g:329:86: ECHAR 
            	            {
            	            $this->mECHAR(); 

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break 2;//loop22;
                }
            } while (true);

            $this->matchString("'''"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL_LONG1"

    // $ANTLR start "STRING_LITERAL_LONG2"
    function mSTRING_LITERAL_LONG2(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$STRING_LITERAL_LONG2;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:333:5: ( '\"\"\"' ( options {greedy=false; } : ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) )* '\"\"\"' ) 
            // Tokens.g:333:7: '\"\"\"' ( options {greedy=false; } : ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) )* '\"\"\"' 
            {
            $this->matchString("\"\"\""); 

            // Tokens.g:333:13: ( options {greedy=false; } : ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) )* 
            //loop25:
            do {
                $alt25=2;
                $LA25_0 = $this->input->LA(1);

                if ( ($LA25_0==$this->getToken('34')) ) {
                    $LA25_1 = $this->input->LA(2);

                    if ( ($LA25_1==$this->getToken('34')) ) {
                        $LA25_3 = $this->input->LA(3);

                        if ( ($LA25_3==$this->getToken('34')) ) {
                            $alt25=2;
                        }
                        else if ( (($LA25_3>=$this->getToken('0') && $LA25_3<=$this->getToken('33'))||($LA25_3>=$this->getToken('35') && $LA25_3<=$this->getToken('65535'))) ) {
                            $alt25=1;
                        }


                    }
                    else if ( (($LA25_1>=$this->getToken('0') && $LA25_1<=$this->getToken('33'))||($LA25_1>=$this->getToken('35') && $LA25_1<=$this->getToken('65535'))) ) {
                        $alt25=1;
                    }


                }
                else if ( (($LA25_0>=$this->getToken('0') && $LA25_0<=$this->getToken('33'))||($LA25_0>=$this->getToken('35') && $LA25_0<=$this->getToken('65535'))) ) {
                    $alt25=1;
                }


                switch ($alt25) {
            	case 1 :
            	    // Tokens.g:333:41: ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) 
            	    {
            	    // Tokens.g:333:41: ( '\"' | '\"\"' )? 
            	    $alt23=3;
            	    $LA23_0 = $this->input->LA(1);

            	    if ( ($LA23_0==$this->getToken('34')) ) {
            	        $LA23_1 = $this->input->LA(2);

            	        if ( ($LA23_1==$this->getToken('34')) ) {
            	            $alt23=2;
            	        }
            	        else if ( (($LA23_1>=$this->getToken('0') && $LA23_1<=$this->getToken('33'))||($LA23_1>=$this->getToken('35') && $LA23_1<=$this->getToken('65535'))) ) {
            	            $alt23=1;
            	        }
            	    }
            	    switch ($alt23) {
            	        case 1 :
            	            // Tokens.g:333:43: '\"' 
            	            {
            	            $this->matchChar(34); 

            	            }
            	            break;
            	        case 2 :
            	            // Tokens.g:333:49: '\"\"' 
            	            {
            	            $this->matchString("\"\""); 


            	            }
            	            break;

            	    }

            	    // Tokens.g:333:57: (~ ( '\"' | '\\\\' ) | ECHAR ) 
            	    $alt24=2;
            	    $LA24_0 = $this->input->LA(1);

            	    if ( (($LA24_0>=$this->getToken('0') && $LA24_0<=$this->getToken('33'))||($LA24_0>=$this->getToken('35') && $LA24_0<=$this->getToken('91'))||($LA24_0>=$this->getToken('93') && $LA24_0<=$this->getToken('65535'))) ) {
            	        $alt24=1;
            	    }
            	    else if ( ($LA24_0==$this->getToken('92')) ) {
            	        $alt24=2;
            	    }
            	    else {
            	        $nvae = new NoViableAltException("", 24, 0, $this->input);

            	        throw $nvae;
            	    }
            	    switch ($alt24) {
            	        case 1 :
            	            // Tokens.g:333:59: ~ ( '\"' | '\\\\' ) 
            	            {
            	            if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('33'))||($this->input->LA(1)>=$this->getToken('35') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	                $this->input->consume();

            	            }
            	            else {
            	                $mse = new MismatchedSetException(null,$this->input);
            	                $this->recover($mse);
            	                throw $mse;}


            	            }
            	            break;
            	        case 2 :
            	            // Tokens.g:333:77: ECHAR 
            	            {
            	            $this->mECHAR(); 

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break 2;//loop25;
                }
            } while (true);

            $this->matchString("\"\"\""); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL_LONG2"

    // $ANTLR start "ECHAR"
    function mECHAR(){
        try {
            // Tokens.g:338:5: ( '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' ) ) 
            // Tokens.g:338:7: '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' ) 
            {
            $this->matchChar(92); 
            if ( $this->input->LA(1)==$this->getToken('34')||$this->input->LA(1)==$this->getToken('39')||$this->input->LA(1)==$this->getToken('92')||$this->input->LA(1)==$this->getToken('98')||$this->input->LA(1)==$this->getToken('102')||$this->input->LA(1)==$this->getToken('110')||$this->input->LA(1)==$this->getToken('114')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ECHAR"

    // $ANTLR start "WS"
    function mWS(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$WS;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:347:5: ( ( ' ' | '\\t' | EOL ) ) 
            // Tokens.g:347:7: ( ' ' | '\\t' | EOL ) 
            {
            if ( ($this->input->LA(1)>=$this->getToken('9') && $this->input->LA(1)<=$this->getToken('10'))||$this->input->LA(1)==$this->getToken('13')||$this->input->LA(1)==$this->getToken('32') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

              $_channel=HIDDEN; 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "WS"

    // $ANTLR start "PN_CHARS_BASE"
    function mPN_CHARS_BASE(){
        try {
            // Tokens.g:356:5: ( 'A' .. 'Z' | 'a' .. 'z' | '\\u00C0' .. '\\u00D6' | '\\u00D8' .. '\\u00F6' | '\\u00F8' .. '\\u02FF' | '\\u0370' .. '\\u037D' | '\\u037F' .. '\\u1FFF' | '\\u200C' .. '\\u200D' | '\\u2070' .. '\\u218F' | '\\u2C00' .. '\\u2FEF' | '\\u3001' .. '\\uD7FF' | '\\uF900' .. '\\uFDCF' | '\\uFDF0' .. '\\uFFFD' ) 
            // Tokens.g: 
            {
            if ( ($this->input->LA(1)>=$this->getToken('65') && $this->input->LA(1)<=$this->getToken('90'))||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('767'))||($this->input->LA(1)>=$this->getToken('880') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_CHARS_BASE"

    // $ANTLR start "PN_CHARS_U"
    function mPN_CHARS_U(){
        try {
            // Tokens.g:373:5: ( PN_CHARS_BASE | '_' ) 
            // Tokens.g: 
            {
            if ( ($this->input->LA(1)>=$this->getToken('65') && $this->input->LA(1)<=$this->getToken('90'))||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('767'))||($this->input->LA(1)>=$this->getToken('880') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_CHARS_U"

    // $ANTLR start "VARNAME"
    function mVARNAME(){
        try {
            // Tokens.g:378:5: ( ( PN_CHARS_U | ( '0' .. '9' ) ) ( PN_CHARS_U | ( '0' .. '9' ) | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )* ) 
            // Tokens.g:378:7: ( PN_CHARS_U | ( '0' .. '9' ) ) ( PN_CHARS_U | ( '0' .. '9' ) | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )* 
            {
            // Tokens.g:378:7: ( PN_CHARS_U | ( '0' .. '9' ) ) 
            $alt26=2;
            $LA26_0 = $this->input->LA(1);

            if ( (($LA26_0>=$this->getToken('65') && $LA26_0<=$this->getToken('90'))||$LA26_0==$this->getToken('95')||($LA26_0>=$this->getToken('97') && $LA26_0<=$this->getToken('122'))||($LA26_0>=$this->getToken('192') && $LA26_0<=$this->getToken('214'))||($LA26_0>=$this->getToken('216') && $LA26_0<=$this->getToken('246'))||($LA26_0>=$this->getToken('248') && $LA26_0<=$this->getToken('767'))||($LA26_0>=$this->getToken('880') && $LA26_0<=$this->getToken('893'))||($LA26_0>=$this->getToken('895') && $LA26_0<=$this->getToken('8191'))||($LA26_0>=$this->getToken('8204') && $LA26_0<=$this->getToken('8205'))||($LA26_0>=$this->getToken('8304') && $LA26_0<=$this->getToken('8591'))||($LA26_0>=$this->getToken('11264') && $LA26_0<=$this->getToken('12271'))||($LA26_0>=$this->getToken('12289') && $LA26_0<=$this->getToken('55295'))||($LA26_0>=$this->getToken('63744') && $LA26_0<=$this->getToken('64975'))||($LA26_0>=$this->getToken('65008') && $LA26_0<=$this->getToken('65533'))) ) {
                $alt26=1;
            }
            else if ( (($LA26_0>=$this->getToken('48') && $LA26_0<=$this->getToken('57'))) ) {
                $alt26=2;
            }
            else {
                $nvae = new NoViableAltException("", 26, 0, $this->input);

                throw $nvae;
            }
            switch ($alt26) {
                case 1 :
                    // Tokens.g:378:9: PN_CHARS_U 
                    {
                    $this->mPN_CHARS_U(); 

                    }
                    break;
                case 2 :
                    // Tokens.g:378:22: ( '0' .. '9' ) 
                    {
                    // Tokens.g:378:22: ( '0' .. '9' ) 
                    // Tokens.g:378:23: '0' .. '9' 
                    {
                    $this->matchRange(48,57); 

                    }


                    }
                    break;

            }

            // Tokens.g:378:35: ( PN_CHARS_U | ( '0' .. '9' ) | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )* 
            //loop27:
            do {
                $alt27=6;
                $LA27_0 = $this->input->LA(1);

                if ( (($LA27_0>=$this->getToken('65') && $LA27_0<=$this->getToken('90'))||$LA27_0==$this->getToken('95')||($LA27_0>=$this->getToken('97') && $LA27_0<=$this->getToken('122'))||($LA27_0>=$this->getToken('192') && $LA27_0<=$this->getToken('214'))||($LA27_0>=$this->getToken('216') && $LA27_0<=$this->getToken('246'))||($LA27_0>=$this->getToken('248') && $LA27_0<=$this->getToken('767'))||($LA27_0>=$this->getToken('880') && $LA27_0<=$this->getToken('893'))||($LA27_0>=$this->getToken('895') && $LA27_0<=$this->getToken('8191'))||($LA27_0>=$this->getToken('8204') && $LA27_0<=$this->getToken('8205'))||($LA27_0>=$this->getToken('8304') && $LA27_0<=$this->getToken('8591'))||($LA27_0>=$this->getToken('11264') && $LA27_0<=$this->getToken('12271'))||($LA27_0>=$this->getToken('12289') && $LA27_0<=$this->getToken('55295'))||($LA27_0>=$this->getToken('63744') && $LA27_0<=$this->getToken('64975'))||($LA27_0>=$this->getToken('65008') && $LA27_0<=$this->getToken('65533'))) ) {
                    $alt27=1;
                }
                else if ( (($LA27_0>=$this->getToken('48') && $LA27_0<=$this->getToken('57'))) ) {
                    $alt27=2;
                }
                else if ( ($LA27_0==$this->getToken('183')) ) {
                    $alt27=3;
                }
                else if ( (($LA27_0>=$this->getToken('768') && $LA27_0<=$this->getToken('879'))) ) {
                    $alt27=4;
                }
                else if ( (($LA27_0>=$this->getToken('8255') && $LA27_0<=$this->getToken('8256'))) ) {
                    $alt27=5;
                }


                switch ($alt27) {
            	case 1 :
            	    // Tokens.g:378:37: PN_CHARS_U 
            	    {
            	    $this->mPN_CHARS_U(); 

            	    }
            	    break;
            	case 2 :
            	    // Tokens.g:378:50: ( '0' .. '9' ) 
            	    {
            	    // Tokens.g:378:50: ( '0' .. '9' ) 
            	    // Tokens.g:378:51: '0' .. '9' 
            	    {
            	    $this->matchRange(48,57); 

            	    }


            	    }
            	    break;
            	case 3 :
            	    // Tokens.g:378:63: '\\u00B7' 
            	    {
            	    $this->matchChar(183); 

            	    }
            	    break;
            	case 4 :
            	    // Tokens.g:378:74: '\\u0300' .. '\\u036F' 
            	    {
            	    $this->matchRange(768,879); 

            	    }
            	    break;
            	case 5 :
            	    // Tokens.g:378:95: '\\u203F' .. '\\u2040' 
            	    {
            	    $this->matchRange(8255,8256); 

            	    }
            	    break;

            	default :
            	    break 2;//loop27;
                }
            } while (true);


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "VARNAME"

    // $ANTLR start "PN_CHARS"
    function mPN_CHARS(){
        try {
            // Tokens.g:383:5: ( PN_CHARS_U | MINUS | ( '0' .. '9' ) | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' ) 
            $alt28=6;
            $LA28_0 = $this->input->LA(1);

            if ( (($LA28_0>=$this->getToken('65') && $LA28_0<=$this->getToken('90'))||$LA28_0==$this->getToken('95')||($LA28_0>=$this->getToken('97') && $LA28_0<=$this->getToken('122'))||($LA28_0>=$this->getToken('192') && $LA28_0<=$this->getToken('214'))||($LA28_0>=$this->getToken('216') && $LA28_0<=$this->getToken('246'))||($LA28_0>=$this->getToken('248') && $LA28_0<=$this->getToken('767'))||($LA28_0>=$this->getToken('880') && $LA28_0<=$this->getToken('893'))||($LA28_0>=$this->getToken('895') && $LA28_0<=$this->getToken('8191'))||($LA28_0>=$this->getToken('8204') && $LA28_0<=$this->getToken('8205'))||($LA28_0>=$this->getToken('8304') && $LA28_0<=$this->getToken('8591'))||($LA28_0>=$this->getToken('11264') && $LA28_0<=$this->getToken('12271'))||($LA28_0>=$this->getToken('12289') && $LA28_0<=$this->getToken('55295'))||($LA28_0>=$this->getToken('63744') && $LA28_0<=$this->getToken('64975'))||($LA28_0>=$this->getToken('65008') && $LA28_0<=$this->getToken('65533'))) ) {
                $alt28=1;
            }
            else if ( ($LA28_0==$this->getToken('45')) ) {
                $alt28=2;
            }
            else if ( (($LA28_0>=$this->getToken('48') && $LA28_0<=$this->getToken('57'))) ) {
                $alt28=3;
            }
            else if ( ($LA28_0==$this->getToken('183')) ) {
                $alt28=4;
            }
            else if ( (($LA28_0>=$this->getToken('768') && $LA28_0<=$this->getToken('879'))) ) {
                $alt28=5;
            }
            else if ( (($LA28_0>=$this->getToken('8255') && $LA28_0<=$this->getToken('8256'))) ) {
                $alt28=6;
            }
            else {
                $nvae = new NoViableAltException("", 28, 0, $this->input);

                throw $nvae;
            }
            switch ($alt28) {
                case 1 :
                    // Tokens.g:383:7: PN_CHARS_U 
                    {
                    $this->mPN_CHARS_U(); 

                    }
                    break;
                case 2 :
                    // Tokens.g:384:7: MINUS 
                    {
                    $this->mMINUS(); 

                    }
                    break;
                case 3 :
                    // Tokens.g:385:7: ( '0' .. '9' ) 
                    {
                    // Tokens.g:385:7: ( '0' .. '9' ) 
                    // Tokens.g:385:8: '0' .. '9' 
                    {
                    $this->matchRange(48,57); 

                    }


                    }
                    break;
                case 4 :
                    // Tokens.g:386:7: '\\u00B7' 
                    {
                    $this->matchChar(183); 

                    }
                    break;
                case 5 :
                    // Tokens.g:387:7: '\\u0300' .. '\\u036F' 
                    {
                    $this->matchRange(768,879); 

                    }
                    break;
                case 6 :
                    // Tokens.g:388:7: '\\u203F' .. '\\u2040' 
                    {
                    $this->matchRange(8255,8256); 

                    }
                    break;

            }
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_CHARS"

    // $ANTLR start "PN_PREFIX"
    function mPN_PREFIX(){
        try {
            // Tokens.g:393:5: ( PN_CHARS_BASE ( ( PN_CHARS | DOT )* PN_CHARS )? ) 
            // Tokens.g:393:7: PN_CHARS_BASE ( ( PN_CHARS | DOT )* PN_CHARS )? 
            {
            $this->mPN_CHARS_BASE(); 
            // Tokens.g:393:21: ( ( PN_CHARS | DOT )* PN_CHARS )? 
            $alt30=2;
            $LA30_0 = $this->input->LA(1);

            if ( (($LA30_0>=$this->getToken('45') && $LA30_0<=$this->getToken('46'))||($LA30_0>=$this->getToken('48') && $LA30_0<=$this->getToken('57'))||($LA30_0>=$this->getToken('65') && $LA30_0<=$this->getToken('90'))||$LA30_0==$this->getToken('95')||($LA30_0>=$this->getToken('97') && $LA30_0<=$this->getToken('122'))||$LA30_0==$this->getToken('183')||($LA30_0>=$this->getToken('192') && $LA30_0<=$this->getToken('214'))||($LA30_0>=$this->getToken('216') && $LA30_0<=$this->getToken('246'))||($LA30_0>=$this->getToken('248') && $LA30_0<=$this->getToken('893'))||($LA30_0>=$this->getToken('895') && $LA30_0<=$this->getToken('8191'))||($LA30_0>=$this->getToken('8204') && $LA30_0<=$this->getToken('8205'))||($LA30_0>=$this->getToken('8255') && $LA30_0<=$this->getToken('8256'))||($LA30_0>=$this->getToken('8304') && $LA30_0<=$this->getToken('8591'))||($LA30_0>=$this->getToken('11264') && $LA30_0<=$this->getToken('12271'))||($LA30_0>=$this->getToken('12289') && $LA30_0<=$this->getToken('55295'))||($LA30_0>=$this->getToken('63744') && $LA30_0<=$this->getToken('64975'))||($LA30_0>=$this->getToken('65008') && $LA30_0<=$this->getToken('65533'))) ) {
                $alt30=1;
            }
            switch ($alt30) {
                case 1 :
                    // Tokens.g:393:22: ( PN_CHARS | DOT )* PN_CHARS 
                    {
                    // Tokens.g:393:22: ( PN_CHARS | DOT )* 
                    //loop29:
                    do {
                        $alt29=3;
                        $alt29 = $this->dfa29->predict($this->input);
                        switch ($alt29) {
                    	case 1 :
                    	    // Tokens.g:393:23: PN_CHARS 
                    	    {
                    	    $this->mPN_CHARS(); 

                    	    }
                    	    break;
                    	case 2 :
                    	    // Tokens.g:393:32: DOT 
                    	    {
                    	    $this->mDOT(); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop29;
                        }
                    } while (true);

                    $this->mPN_CHARS(); 

                    }
                    break;

            }


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_PREFIX"

    // $ANTLR start "PN_LOCAL"
    function mPN_LOCAL(){
        try {
            // Tokens.g:399:5: ( ( PN_CHARS_U | ( '0' .. '9' ) ) ( ( PN_CHARS | DOT )* PN_CHARS )? ) 
            // Tokens.g:399:7: ( PN_CHARS_U | ( '0' .. '9' ) ) ( ( PN_CHARS | DOT )* PN_CHARS )? 
            {
            // Tokens.g:399:7: ( PN_CHARS_U | ( '0' .. '9' ) ) 
            $alt31=2;
            $LA31_0 = $this->input->LA(1);

            if ( (($LA31_0>=$this->getToken('65') && $LA31_0<=$this->getToken('90'))||$LA31_0==$this->getToken('95')||($LA31_0>=$this->getToken('97') && $LA31_0<=$this->getToken('122'))||($LA31_0>=$this->getToken('192') && $LA31_0<=$this->getToken('214'))||($LA31_0>=$this->getToken('216') && $LA31_0<=$this->getToken('246'))||($LA31_0>=$this->getToken('248') && $LA31_0<=$this->getToken('767'))||($LA31_0>=$this->getToken('880') && $LA31_0<=$this->getToken('893'))||($LA31_0>=$this->getToken('895') && $LA31_0<=$this->getToken('8191'))||($LA31_0>=$this->getToken('8204') && $LA31_0<=$this->getToken('8205'))||($LA31_0>=$this->getToken('8304') && $LA31_0<=$this->getToken('8591'))||($LA31_0>=$this->getToken('11264') && $LA31_0<=$this->getToken('12271'))||($LA31_0>=$this->getToken('12289') && $LA31_0<=$this->getToken('55295'))||($LA31_0>=$this->getToken('63744') && $LA31_0<=$this->getToken('64975'))||($LA31_0>=$this->getToken('65008') && $LA31_0<=$this->getToken('65533'))) ) {
                $alt31=1;
            }
            else if ( (($LA31_0>=$this->getToken('48') && $LA31_0<=$this->getToken('57'))) ) {
                $alt31=2;
            }
            else {
                $nvae = new NoViableAltException("", 31, 0, $this->input);

                throw $nvae;
            }
            switch ($alt31) {
                case 1 :
                    // Tokens.g:399:9: PN_CHARS_U 
                    {
                    $this->mPN_CHARS_U(); 

                    }
                    break;
                case 2 :
                    // Tokens.g:399:22: ( '0' .. '9' ) 
                    {
                    // Tokens.g:399:22: ( '0' .. '9' ) 
                    // Tokens.g:399:23: '0' .. '9' 
                    {
                    $this->matchRange(48,57); 

                    }


                    }
                    break;

            }

            // Tokens.g:399:35: ( ( PN_CHARS | DOT )* PN_CHARS )? 
            $alt33=2;
            $LA33_0 = $this->input->LA(1);

            if ( (($LA33_0>=$this->getToken('45') && $LA33_0<=$this->getToken('46'))||($LA33_0>=$this->getToken('48') && $LA33_0<=$this->getToken('57'))||($LA33_0>=$this->getToken('65') && $LA33_0<=$this->getToken('90'))||$LA33_0==$this->getToken('95')||($LA33_0>=$this->getToken('97') && $LA33_0<=$this->getToken('122'))||$LA33_0==$this->getToken('183')||($LA33_0>=$this->getToken('192') && $LA33_0<=$this->getToken('214'))||($LA33_0>=$this->getToken('216') && $LA33_0<=$this->getToken('246'))||($LA33_0>=$this->getToken('248') && $LA33_0<=$this->getToken('893'))||($LA33_0>=$this->getToken('895') && $LA33_0<=$this->getToken('8191'))||($LA33_0>=$this->getToken('8204') && $LA33_0<=$this->getToken('8205'))||($LA33_0>=$this->getToken('8255') && $LA33_0<=$this->getToken('8256'))||($LA33_0>=$this->getToken('8304') && $LA33_0<=$this->getToken('8591'))||($LA33_0>=$this->getToken('11264') && $LA33_0<=$this->getToken('12271'))||($LA33_0>=$this->getToken('12289') && $LA33_0<=$this->getToken('55295'))||($LA33_0>=$this->getToken('63744') && $LA33_0<=$this->getToken('64975'))||($LA33_0>=$this->getToken('65008') && $LA33_0<=$this->getToken('65533'))) ) {
                $alt33=1;
            }
            switch ($alt33) {
                case 1 :
                    // Tokens.g:399:36: ( PN_CHARS | DOT )* PN_CHARS 
                    {
                    // Tokens.g:399:36: ( PN_CHARS | DOT )* 
                    //loop32:
                    do {
                        $alt32=3;
                        $alt32 = $this->dfa32->predict($this->input);
                        switch ($alt32) {
                    	case 1 :
                    	    // Tokens.g:399:37: PN_CHARS 
                    	    {
                    	    $this->mPN_CHARS(); 

                    	    }
                    	    break;
                    	case 2 :
                    	    // Tokens.g:399:46: DOT 
                    	    {
                    	    $this->mDOT(); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop32;
                        }
                    } while (true);

                    $this->mPN_CHARS(); 

                    }
                    break;

            }


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_LOCAL"

    // $ANTLR start "BLANK_NODE_LABEL"
    function mBLANK_NODE_LABEL(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$BLANK_NODE_LABEL;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            $t=null;

            // Tokens.g:403:5: ( '_:' t= PN_LOCAL ) 
            // Tokens.g:403:7: '_:' t= PN_LOCAL 
            {
            $this->matchString("_:"); 

            $tStart3565 = $this->getCharIndex();
            $this->mPN_LOCAL(); 
            $t = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $tStart3565, $this->getCharIndex()-1);
              $this->setText(($t!=null?$t->getText():null)); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BLANK_NODE_LABEL"

    // $ANTLR start "REFERENCE"
    function mREFERENCE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$REFERENCE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:407:2: ( '^^' ) 
            // Tokens.g:407:4: '^^' 
            {
            $this->matchString("^^"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "REFERENCE"

    // $ANTLR start "AND"
    function mAND(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$AND;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:412:5: ( '&&' ) 
            // Tokens.g:412:7: '&&' 
            {
            $this->matchString("&&"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "AND"

    // $ANTLR start "OR"
    function mOR(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$OR;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:416:5: ( '||' ) 
            // Tokens.g:416:7: '||' 
            {
            $this->matchString("||"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OR"

    // $ANTLR start "COMMENT"
    function mCOMMENT(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$COMMENT;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:420:5: ( '#' ( . )* EOL ) 
            // Tokens.g:420:7: '#' ( . )* EOL 
            {
            $this->matchChar(35); 
            // Tokens.g:420:11: ( . )* 
            //loop34:
            do {
                $alt34=2;
                $LA34_0 = $this->input->LA(1);

                if ( ($LA34_0==$this->getToken('10')||$LA34_0==$this->getToken('13')) ) {
                    $alt34=2;
                }
                else if ( (($LA34_0>=$this->getToken('0') && $LA34_0<=$this->getToken('9'))||($LA34_0>=$this->getToken('11') && $LA34_0<=$this->getToken('12'))||($LA34_0>=$this->getToken('14') && $LA34_0<=$this->getToken('65535'))) ) {
                    $alt34=1;
                }


                switch ($alt34) {
            	case 1 :
            	    // Tokens.g:420:11: . 
            	    {
            	    $this->matchAny(); 

            	    }
            	    break;

            	default :
            	    break 2;//loop34;
                }
            } while (true);

            $this->mEOL(); 
               $_channel=HIDDEN; 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "COMMENT"

    // $ANTLR start "EOL"
    function mEOL(){
        try {
            // Tokens.g:425:5: ( '\\n' | '\\r' ) 
            // Tokens.g: 
            {
            if ( $this->input->LA(1)==$this->getToken('10')||$this->input->LA(1)==$this->getToken('13') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "EOL"

    // $ANTLR start "OPEN_CURLY_BRACE"
    function mOPEN_CURLY_BRACE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$OPEN_CURLY_BRACE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:429:2: ( '{' ) 
            // Tokens.g:429:4: '{' 
            {
            $this->matchChar(123); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPEN_CURLY_BRACE"

    // $ANTLR start "CLOSE_CURLY_BRACE"
    function mCLOSE_CURLY_BRACE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$CLOSE_CURLY_BRACE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:433:2: ( '}' ) 
            // Tokens.g:433:4: '}' 
            {
            $this->matchChar(125); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CLOSE_CURLY_BRACE"

    // $ANTLR start "SEMICOLON"
    function mSEMICOLON(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$SEMICOLON;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:437:5: ( ';' ) 
            // Tokens.g:437:7: ';' 
            {
            $this->matchChar(59); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SEMICOLON"

    // $ANTLR start "DOT"
    function mDOT(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DOT;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:441:5: ( '.' ) 
            // Tokens.g:441:7: '.' 
            {
            $this->matchChar(46); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOT"

    // $ANTLR start "PLUS"
    function mPLUS(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$PLUS;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:445:5: ( '+' ) 
            // Tokens.g:445:7: '+' 
            {
            $this->matchChar(43); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PLUS"

    // $ANTLR start "MINUS"
    function mMINUS(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$MINUS;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:449:5: ( '-' ) 
            // Tokens.g:449:7: '-' 
            {
            $this->matchChar(45); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "MINUS"

    // $ANTLR start "ASTERISK"
    function mASTERISK(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$ASTERISK;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:453:5: ( '*' ) 
            // Tokens.g:453:7: '*' 
            {
            $this->matchChar(42); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ASTERISK"

    // $ANTLR start "COMMA"
    function mCOMMA(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$COMMA;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:457:5: ( ',' ) 
            // Tokens.g:457:7: ',' 
            {
            $this->matchChar(44); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "COMMA"

    // $ANTLR start "NOT_SIGN"
    function mNOT_SIGN(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$NOT_SIGN;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:461:5: ( '!' ) 
            // Tokens.g:461:7: '!' 
            {
            $this->matchChar(33); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NOT_SIGN"

    // $ANTLR start "DIVIDE"
    function mDIVIDE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$DIVIDE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:464:5: ( '/' ) 
            // Tokens.g:464:7: '/' 
            {
            $this->matchChar(47); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DIVIDE"

    // $ANTLR start "EQUAL"
    function mEQUAL(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$EQUAL;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:468:5: ( '=' ) 
            // Tokens.g:468:7: '=' 
            {
            $this->matchChar(61); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "EQUAL"

    // $ANTLR start "LESS"
    function mLESS(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$LESS;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:472:2: ( '<' ) 
            // Tokens.g:472:4: '<' 
            {
            $this->matchChar(60); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LESS"

    // $ANTLR start "GREATER"
    function mGREATER(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$GREATER;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:476:2: ( '>' ) 
            // Tokens.g:476:4: '>' 
            {
            $this->matchChar(62); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GREATER"

    // $ANTLR start "OPEN_BRACE"
    function mOPEN_BRACE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$OPEN_BRACE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:480:5: ( '(' ) 
            // Tokens.g:480:7: '(' 
            {
            $this->matchChar(40); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPEN_BRACE"

    // $ANTLR start "CLOSE_BRACE"
    function mCLOSE_BRACE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$CLOSE_BRACE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:484:5: ( ')' ) 
            // Tokens.g:484:7: ')' 
            {
            $this->matchChar(41); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CLOSE_BRACE"

    // $ANTLR start "LESS_EQUAL"
    function mLESS_EQUAL(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$LESS_EQUAL;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:488:5: ( '<=' ) 
            // Tokens.g:488:7: '<=' 
            {
            $this->matchString("<="); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LESS_EQUAL"

    // $ANTLR start "GREATER_EQUAL"
    function mGREATER_EQUAL(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$GREATER_EQUAL;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:492:5: ( '>=' ) 
            // Tokens.g:492:7: '>=' 
            {
            $this->matchString(">="); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GREATER_EQUAL"

    // $ANTLR start "NOT_EQUAL"
    function mNOT_EQUAL(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$NOT_EQUAL;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:496:5: ( '!=' ) 
            // Tokens.g:496:7: '!=' 
            {
            $this->matchString("!="); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NOT_EQUAL"

    // $ANTLR start "OPEN_SQUARE_BRACE"
    function mOPEN_SQUARE_BRACE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$OPEN_SQUARE_BRACE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:500:5: ( '[' ) 
            // Tokens.g:500:7: '[' 
            {
            $this->matchChar(91); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPEN_SQUARE_BRACE"

    // $ANTLR start "CLOSE_SQUARE_BRACE"
    function mCLOSE_SQUARE_BRACE(){
        try {
            $_type = Erfurt_Sparql_Sparql10_Tokens::$CLOSE_SQUARE_BRACE;
            $_channel = Erfurt_Sparql_Sparql10_Tokens::$DEFAULT_TOKEN_CHANNEL;
            // Tokens.g:504:5: ( ']' ) 
            // Tokens.g:504:7: ']' 
            {
            $this->matchChar(93); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CLOSE_SQUARE_BRACE"

    function mTokens(){
        // Tokens.g:1:8: ( BASE | PREFIX | MODIFY | DELETE | INSERT | DATA | INTO | LOAD | CLEAR | CREATE | SILENT | DROP | EXISTS | UNSAID | NOT | SELECT | DISTINCT | REDUCED | CONSTRUCT | DESCRIBE | ASK | FROM | NAMED | WHERE | ORDER | GROUP | HAVING | BY | ASC | DESC | LIMIT | OFFSET | OPTIONAL | GRAPH | UNION | FILTER | A | AS | STR | LANG | LANGMATCHES | DATATYPE | BOUND | SAMETERM | ISIRI | ISURI | ISBLANK | ISLITERAL | REGEX | COUNT | SUM | MIN | MAX | AVG | TRUE | FALSE | IF | COALESCE | IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | LANGTAG | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | BLANK_NODE_LABEL | REFERENCE | AND | OR | COMMENT | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | SEMICOLON | DOT | PLUS | MINUS | ASTERISK | COMMA | NOT_SIGN | DIVIDE | EQUAL | LESS | GREATER | OPEN_BRACE | CLOSE_BRACE | LESS_EQUAL | GREATER_EQUAL | NOT_EQUAL | OPEN_SQUARE_BRACE | CLOSE_SQUARE_BRACE ) 
        $alt35=103;
        $alt35 = $this->dfa35->predict($this->input);
        switch ($alt35) {
            case 1 :
                // Tokens.g:1:10: BASE 
                {
                $this->mBASE(); 

                }
                break;
            case 2 :
                // Tokens.g:1:15: PREFIX 
                {
                $this->mPREFIX(); 

                }
                break;
            case 3 :
                // Tokens.g:1:22: MODIFY 
                {
                $this->mMODIFY(); 

                }
                break;
            case 4 :
                // Tokens.g:1:29: DELETE 
                {
                $this->mDELETE(); 

                }
                break;
            case 5 :
                // Tokens.g:1:36: INSERT 
                {
                $this->mINSERT(); 

                }
                break;
            case 6 :
                // Tokens.g:1:43: DATA 
                {
                $this->mDATA(); 

                }
                break;
            case 7 :
                // Tokens.g:1:48: INTO 
                {
                $this->mINTO(); 

                }
                break;
            case 8 :
                // Tokens.g:1:53: LOAD 
                {
                $this->mLOAD(); 

                }
                break;
            case 9 :
                // Tokens.g:1:58: CLEAR 
                {
                $this->mCLEAR(); 

                }
                break;
            case 10 :
                // Tokens.g:1:64: CREATE 
                {
                $this->mCREATE(); 

                }
                break;
            case 11 :
                // Tokens.g:1:71: SILENT 
                {
                $this->mSILENT(); 

                }
                break;
            case 12 :
                // Tokens.g:1:78: DROP 
                {
                $this->mDROP(); 

                }
                break;
            case 13 :
                // Tokens.g:1:83: EXISTS 
                {
                $this->mEXISTS(); 

                }
                break;
            case 14 :
                // Tokens.g:1:90: UNSAID 
                {
                $this->mUNSAID(); 

                }
                break;
            case 15 :
                // Tokens.g:1:97: NOT 
                {
                $this->mNOT(); 

                }
                break;
            case 16 :
                // Tokens.g:1:101: SELECT 
                {
                $this->mSELECT(); 

                }
                break;
            case 17 :
                // Tokens.g:1:108: DISTINCT 
                {
                $this->mDISTINCT(); 

                }
                break;
            case 18 :
                // Tokens.g:1:117: REDUCED 
                {
                $this->mREDUCED(); 

                }
                break;
            case 19 :
                // Tokens.g:1:125: CONSTRUCT 
                {
                $this->mCONSTRUCT(); 

                }
                break;
            case 20 :
                // Tokens.g:1:135: DESCRIBE 
                {
                $this->mDESCRIBE(); 

                }
                break;
            case 21 :
                // Tokens.g:1:144: ASK 
                {
                $this->mASK(); 

                }
                break;
            case 22 :
                // Tokens.g:1:148: FROM 
                {
                $this->mFROM(); 

                }
                break;
            case 23 :
                // Tokens.g:1:153: NAMED 
                {
                $this->mNAMED(); 

                }
                break;
            case 24 :
                // Tokens.g:1:159: WHERE 
                {
                $this->mWHERE(); 

                }
                break;
            case 25 :
                // Tokens.g:1:165: ORDER 
                {
                $this->mORDER(); 

                }
                break;
            case 26 :
                // Tokens.g:1:171: GROUP 
                {
                $this->mGROUP(); 

                }
                break;
            case 27 :
                // Tokens.g:1:177: HAVING 
                {
                $this->mHAVING(); 

                }
                break;
            case 28 :
                // Tokens.g:1:184: BY 
                {
                $this->mBY(); 

                }
                break;
            case 29 :
                // Tokens.g:1:187: ASC 
                {
                $this->mASC(); 

                }
                break;
            case 30 :
                // Tokens.g:1:191: DESC 
                {
                $this->mDESC(); 

                }
                break;
            case 31 :
                // Tokens.g:1:196: LIMIT 
                {
                $this->mLIMIT(); 

                }
                break;
            case 32 :
                // Tokens.g:1:202: OFFSET 
                {
                $this->mOFFSET(); 

                }
                break;
            case 33 :
                // Tokens.g:1:209: OPTIONAL 
                {
                $this->mOPTIONAL(); 

                }
                break;
            case 34 :
                // Tokens.g:1:218: GRAPH 
                {
                $this->mGRAPH(); 

                }
                break;
            case 35 :
                // Tokens.g:1:224: UNION 
                {
                $this->mUNION(); 

                }
                break;
            case 36 :
                // Tokens.g:1:230: FILTER 
                {
                $this->mFILTER(); 

                }
                break;
            case 37 :
                // Tokens.g:1:237: A 
                {
                $this->mA(); 

                }
                break;
            case 38 :
                // Tokens.g:1:239: AS 
                {
                $this->mAS(); 

                }
                break;
            case 39 :
                // Tokens.g:1:242: STR 
                {
                $this->mSTR(); 

                }
                break;
            case 40 :
                // Tokens.g:1:246: LANG 
                {
                $this->mLANG(); 

                }
                break;
            case 41 :
                // Tokens.g:1:251: LANGMATCHES 
                {
                $this->mLANGMATCHES(); 

                }
                break;
            case 42 :
                // Tokens.g:1:263: DATATYPE 
                {
                $this->mDATATYPE(); 

                }
                break;
            case 43 :
                // Tokens.g:1:272: BOUND 
                {
                $this->mBOUND(); 

                }
                break;
            case 44 :
                // Tokens.g:1:278: SAMETERM 
                {
                $this->mSAMETERM(); 

                }
                break;
            case 45 :
                // Tokens.g:1:287: ISIRI 
                {
                $this->mISIRI(); 

                }
                break;
            case 46 :
                // Tokens.g:1:293: ISURI 
                {
                $this->mISURI(); 

                }
                break;
            case 47 :
                // Tokens.g:1:299: ISBLANK 
                {
                $this->mISBLANK(); 

                }
                break;
            case 48 :
                // Tokens.g:1:307: ISLITERAL 
                {
                $this->mISLITERAL(); 

                }
                break;
            case 49 :
                // Tokens.g:1:317: REGEX 
                {
                $this->mREGEX(); 

                }
                break;
            case 50 :
                // Tokens.g:1:323: COUNT 
                {
                $this->mCOUNT(); 

                }
                break;
            case 51 :
                // Tokens.g:1:329: SUM 
                {
                $this->mSUM(); 

                }
                break;
            case 52 :
                // Tokens.g:1:333: MIN 
                {
                $this->mMIN(); 

                }
                break;
            case 53 :
                // Tokens.g:1:337: MAX 
                {
                $this->mMAX(); 

                }
                break;
            case 54 :
                // Tokens.g:1:341: AVG 
                {
                $this->mAVG(); 

                }
                break;
            case 55 :
                // Tokens.g:1:345: TRUE 
                {
                $this->mTRUE(); 

                }
                break;
            case 56 :
                // Tokens.g:1:350: FALSE 
                {
                $this->mFALSE(); 

                }
                break;
            case 57 :
                // Tokens.g:1:356: IF 
                {
                $this->mIF(); 

                }
                break;
            case 58 :
                // Tokens.g:1:359: COALESCE 
                {
                $this->mCOALESCE(); 

                }
                break;
            case 59 :
                // Tokens.g:1:368: IRI_REF 
                {
                $this->mIRI_REF(); 

                }
                break;
            case 60 :
                // Tokens.g:1:376: PNAME_NS 
                {
                $this->mPNAME_NS(); 

                }
                break;
            case 61 :
                // Tokens.g:1:385: PNAME_LN 
                {
                $this->mPNAME_LN(); 

                }
                break;
            case 62 :
                // Tokens.g:1:394: VAR1 
                {
                $this->mVAR1(); 

                }
                break;
            case 63 :
                // Tokens.g:1:399: VAR2 
                {
                $this->mVAR2(); 

                }
                break;
            case 64 :
                // Tokens.g:1:404: LANGTAG 
                {
                $this->mLANGTAG(); 

                }
                break;
            case 65 :
                // Tokens.g:1:412: INTEGER 
                {
                $this->mINTEGER(); 

                }
                break;
            case 66 :
                // Tokens.g:1:420: DECIMAL 
                {
                $this->mDECIMAL(); 

                }
                break;
            case 67 :
                // Tokens.g:1:428: DOUBLE 
                {
                $this->mDOUBLE(); 

                }
                break;
            case 68 :
                // Tokens.g:1:435: INTEGER_POSITIVE 
                {
                $this->mINTEGER_POSITIVE(); 

                }
                break;
            case 69 :
                // Tokens.g:1:452: DECIMAL_POSITIVE 
                {
                $this->mDECIMAL_POSITIVE(); 

                }
                break;
            case 70 :
                // Tokens.g:1:469: DOUBLE_POSITIVE 
                {
                $this->mDOUBLE_POSITIVE(); 

                }
                break;
            case 71 :
                // Tokens.g:1:485: INTEGER_NEGATIVE 
                {
                $this->mINTEGER_NEGATIVE(); 

                }
                break;
            case 72 :
                // Tokens.g:1:502: DECIMAL_NEGATIVE 
                {
                $this->mDECIMAL_NEGATIVE(); 

                }
                break;
            case 73 :
                // Tokens.g:1:519: DOUBLE_NEGATIVE 
                {
                $this->mDOUBLE_NEGATIVE(); 

                }
                break;
            case 74 :
                // Tokens.g:1:535: STRING_LITERAL1 
                {
                $this->mSTRING_LITERAL1(); 

                }
                break;
            case 75 :
                // Tokens.g:1:551: STRING_LITERAL2 
                {
                $this->mSTRING_LITERAL2(); 

                }
                break;
            case 76 :
                // Tokens.g:1:567: STRING_LITERAL_LONG1 
                {
                $this->mSTRING_LITERAL_LONG1(); 

                }
                break;
            case 77 :
                // Tokens.g:1:588: STRING_LITERAL_LONG2 
                {
                $this->mSTRING_LITERAL_LONG2(); 

                }
                break;
            case 78 :
                // Tokens.g:1:609: WS 
                {
                $this->mWS(); 

                }
                break;
            case 79 :
                // Tokens.g:1:612: BLANK_NODE_LABEL 
                {
                $this->mBLANK_NODE_LABEL(); 

                }
                break;
            case 80 :
                // Tokens.g:1:629: REFERENCE 
                {
                $this->mREFERENCE(); 

                }
                break;
            case 81 :
                // Tokens.g:1:639: AND 
                {
                $this->mAND(); 

                }
                break;
            case 82 :
                // Tokens.g:1:643: OR 
                {
                $this->mOR(); 

                }
                break;
            case 83 :
                // Tokens.g:1:646: COMMENT 
                {
                $this->mCOMMENT(); 

                }
                break;
            case 84 :
                // Tokens.g:1:654: OPEN_CURLY_BRACE 
                {
                $this->mOPEN_CURLY_BRACE(); 

                }
                break;
            case 85 :
                // Tokens.g:1:671: CLOSE_CURLY_BRACE 
                {
                $this->mCLOSE_CURLY_BRACE(); 

                }
                break;
            case 86 :
                // Tokens.g:1:689: SEMICOLON 
                {
                $this->mSEMICOLON(); 

                }
                break;
            case 87 :
                // Tokens.g:1:699: DOT 
                {
                $this->mDOT(); 

                }
                break;
            case 88 :
                // Tokens.g:1:703: PLUS 
                {
                $this->mPLUS(); 

                }
                break;
            case 89 :
                // Tokens.g:1:708: MINUS 
                {
                $this->mMINUS(); 

                }
                break;
            case 90 :
                // Tokens.g:1:714: ASTERISK 
                {
                $this->mASTERISK(); 

                }
                break;
            case 91 :
                // Tokens.g:1:723: COMMA 
                {
                $this->mCOMMA(); 

                }
                break;
            case 92 :
                // Tokens.g:1:729: NOT_SIGN 
                {
                $this->mNOT_SIGN(); 

                }
                break;
            case 93 :
                // Tokens.g:1:738: DIVIDE 
                {
                $this->mDIVIDE(); 

                }
                break;
            case 94 :
                // Tokens.g:1:745: EQUAL 
                {
                $this->mEQUAL(); 

                }
                break;
            case 95 :
                // Tokens.g:1:751: LESS 
                {
                $this->mLESS(); 

                }
                break;
            case 96 :
                // Tokens.g:1:756: GREATER 
                {
                $this->mGREATER(); 

                }
                break;
            case 97 :
                // Tokens.g:1:764: OPEN_BRACE 
                {
                $this->mOPEN_BRACE(); 

                }
                break;
            case 98 :
                // Tokens.g:1:775: CLOSE_BRACE 
                {
                $this->mCLOSE_BRACE(); 

                }
                break;
            case 99 :
                // Tokens.g:1:787: LESS_EQUAL 
                {
                $this->mLESS_EQUAL(); 

                }
                break;
            case 100 :
                // Tokens.g:1:798: GREATER_EQUAL 
                {
                $this->mGREATER_EQUAL(); 

                }
                break;
            case 101 :
                // Tokens.g:1:812: NOT_EQUAL 
                {
                $this->mNOT_EQUAL(); 

                }
                break;
            case 102 :
                // Tokens.g:1:822: OPEN_SQUARE_BRACE 
                {
                $this->mOPEN_SQUARE_BRACE(); 

                }
                break;
            case 103 :
                // Tokens.g:1:840: CLOSE_SQUARE_BRACE 
                {
                $this->mCLOSE_SQUARE_BRACE(); 

                }
                break;

        }

    }



}
?>