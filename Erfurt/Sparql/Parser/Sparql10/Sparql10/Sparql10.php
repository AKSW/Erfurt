<?php
// $ANTLR 3.1.3 “ˆŽ 06, 2009 18:28:01 Sparql10.g 2010-03-26 00:02:36

/**
 * Do not edit this file
 *
 * This file is part of the {@link http://aksw.org/Projects/Erfurt Erfurt} project.
 *
 * @copyright Copyright (c) 2010, {@link http://aksw.org AKSW}
 * @license http://opensource.org/licenses/gpl-license.php GNU General Public License (GPL)
 */

/**
 * @category Erfurt
 * @package Sparql_Parser_Sparql10
 * @author Rolland Brunec <rollxx@gmail.com>
 * @copyright Copyright (c) 2010 {@link http://aksw.org aksw}
 * @license http://opensource.org/licenses/gpl-license.php GNU General Public License (GPL)
 */

require_once 'Erfurt/Sparql/Query2/structural-Interfaces.php';
require_once 'Erfurt/Sparql/Query2/ElementHelper.php';
require_once 'Erfurt/Sparql/Query2/ContainerHelper.php';
require_once 'Erfurt/Sparql/Query2/Constraint.php';
require_once 'Erfurt/Sparql/Query2/IriRef.php';
require_once 'Erfurt/Sparql/Query2/OrderClause.php';
require_once 'Erfurt/Sparql/Query2/GroupGraphPattern.php';
require_once 'Erfurt/Sparql/Query2/GraphClause.php';
require_once 'Erfurt/Sparql/Query2.php';



# for convenience in actions
if (!defined('HIDDEN')) define('HIDDEN', BaseRecognizer::$HIDDEN);

class Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10 extends AntlrParser {
    public $PREFIX=5;
    public $EXPONENT=60;
    public $CLOSE_SQUARE_BRACE=96;
    public $GRAPH=24;
    public $REGEX=39;
    public $PNAME_LN=50;
    public $CONSTRUCT=10;
    public $NOT=6;
    public $EOF=-1;
    public $VARNAME=51;
    public $ISLITERAL=38;
    public $GREATER=43;
    public $EOL=74;
    public $NOT_EQUAL=94;
    public $LESS=42;
    public $LANGMATCHES=31;
    public $DOUBLE=61;
    public $BASE=4;
    public $PN_CHARS_U=77;
    public $COMMENT=83;
    public $SELECT=7;
    public $OPEN_CURLY_BRACE=44;
    public $CLOSE_CURLY_BRACE=45;
    public $DOUBLE_POSITIVE=65;
    public $BOUND=33;
    public $DIVIDE=88;
    public $ISIRI=35;
    public $A=27;
    public $NOT_SIGN=87;
    public $ASC=19;
    public $ASK=12;
    public $BLANK_NODE_LABEL=79;
    public $SEMICOLON=84;
    public $QUESTION_MARK_LABEL=98;
    public $ISBLANK=37;
    public $GROUP=17;
    public $WS=75;
    public $NAMED=14;
    public $INTEGER_POSITIVE=63;
    public $STRING_LITERAL2=71;
    public $OR=82;
    public $FILTER=26;
    public $DESCRIBE=11;
    public $STRING_LITERAL1=70;
    public $PN_CHARS=78;
    public $DATATYPE=32;
    public $LESS_EQUAL=92;
    public $DOUBLE_NEGATIVE=68;
    public $FROM=13;
    public $FALSE=41;
    public $DISTINCT=8;
    public $LANG=30;
    public $WHERE=15;
    public $IRI_REF=46;
    public $ORDER=16;
    public $LIMIT=21;
    public $AND=81;
    public $ASTERISK=85;
    public $ISURI=36;
    public $STR=29;
    public $AS=28;
    public $SAMETERM=34;
    public $COMMA=86;
    public $OFFSET=22;
    public $DECIMAL_POSITIVE=64;
    public $EQUAL=89;
    public $PLUS=62;
    public $DIGIT=59;
    public $DOT=57;
    public $INTEGER=56;
    public $BY=18;
    public $REDUCED=9;
    public $INTEGER_NEGATIVE=66;
    public $PN_LOCAL=49;
    public $PNAME_NS=48;
    public $REFERENCE=80;
    public $CLOSE_BRACE=91;
    public $MINUS=54;
    public $TRUE=40;
    public $OPEN_SQUARE_BRACE=95;
    public $UNION=25;
    public $ECHAR=69;
    public $OPTIONAL=23;
    public $HAT_LABEL=97;
    public $STRING_LITERAL_LONG2=73;
    public $PN_CHARS_BASE=76;
    public $DECIMAL=58;
    public $VAR1=52;
    public $VAR2=53;
    public $STRING_LITERAL_LONG1=72;
    public $DECIMAL_NEGATIVE=67;
    public $PN_PREFIX=47;
    public $DESC=20;
    public $OPEN_BRACE=90;
    public $GREATER_EQUAL=93;
    public $LANGTAG=55;

    // delegates
    // delegators
    public $gErfurt_Sparql_Parser_Sparql10_Sparql10;
    public $gParent;

    
    static $FOLLOW_prologue_in_query1038;
    static $FOLLOW_selectQuery_in_query1051;
    static $FOLLOW_constructQuery_in_query1063;
    static $FOLLOW_describeQuery_in_query1076;
    static $FOLLOW_askQuery_in_query1089;
    static $FOLLOW_baseDecl_in_prologue121;
    static $FOLLOW_prefixDecl_in_prologue124;
    static $FOLLOW_BASE_in_baseDecl144;
    static $FOLLOW_iriRef_in_baseDecl146;
    static $FOLLOW_PREFIX_in_prefixDecl171;
    static $FOLLOW_PNAME_NS_in_prefixDecl173;
    static $FOLLOW_iriRef_in_prefixDecl175;
    static $FOLLOW_SELECT_in_selectQuery196;
    static $FOLLOW_DISTINCT_in_selectQuery200;
    static $FOLLOW_REDUCED_in_selectQuery214;
    static $FOLLOW_variable_in_selectQuery231;
    static $FOLLOW_ASTERISK_in_selectQuery236;
    static $FOLLOW_datasetClause_in_selectQuery240;
    static $FOLLOW_whereClause_in_selectQuery243;
    static $FOLLOW_solutionModifier_in_selectQuery245;
    static $FOLLOW_CONSTRUCT_in_constructQuery265;
    static $FOLLOW_constructTemplate_in_constructQuery267;
    static $FOLLOW_datasetClause_in_constructQuery269;
    static $FOLLOW_whereClause_in_constructQuery272;
    static $FOLLOW_solutionModifier_in_constructQuery274;
    static $FOLLOW_DESCRIBE_in_describeQuery293;
    static $FOLLOW_varOrIRIref_in_describeQuery297;
    static $FOLLOW_ASTERISK_in_describeQuery302;
    static $FOLLOW_datasetClause_in_describeQuery306;
    static $FOLLOW_whereClause_in_describeQuery309;
    static $FOLLOW_solutionModifier_in_describeQuery312;
    static $FOLLOW_ASK_in_askQuery331;
    static $FOLLOW_datasetClause_in_askQuery333;
    static $FOLLOW_whereClause_in_askQuery336;
    static $FOLLOW_FROM_in_datasetClause357;
    static $FOLLOW_defaultGraphClause_in_datasetClause361;
    static $FOLLOW_namedGraphClause_in_datasetClause375;
    static $FOLLOW_sourceSelector_in_defaultGraphClause410;
    static $FOLLOW_NAMED_in_namedGraphClause435;
    static $FOLLOW_sourceSelector_in_namedGraphClause437;
    static $FOLLOW_iriRef_in_sourceSelector462;
    static $FOLLOW_WHERE_in_whereClause483;
    static $FOLLOW_groupGraphPattern_in_whereClause486;
    static $FOLLOW_orderClause_in_solutionModifier507;
    static $FOLLOW_limitOffsetClauses_in_solutionModifier510;
    static $FOLLOW_limitClause_in_limitOffsetClauses529;
    static $FOLLOW_offsetClause_in_limitOffsetClauses531;
    static $FOLLOW_offsetClause_in_limitOffsetClauses541;
    static $FOLLOW_limitClause_in_limitOffsetClauses543;
    static $FOLLOW_ORDER_in_orderClause563;
    static $FOLLOW_BY_in_orderClause565;
    static $FOLLOW_orderCondition_in_orderClause567;
    static $FOLLOW_ASC_in_orderCondition593;
    static $FOLLOW_DESC_in_orderCondition599;
    static $FOLLOW_brackettedExpression_in_orderCondition603;
    static $FOLLOW_constraint_in_orderCondition619;
    static $FOLLOW_variable_in_orderCondition625;
    static $FOLLOW_LIMIT_in_limitClause647;
    static $FOLLOW_INTEGER_in_limitClause649;
    static $FOLLOW_OFFSET_in_offsetClause670;
    static $FOLLOW_INTEGER_in_offsetClause672;
    static $FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern699;
    static $FOLLOW_triplesBlock_in_groupGraphPattern704;
    static $FOLLOW_graphPatternNotTriples_in_groupGraphPattern718;
    static $FOLLOW_filter_in_groupGraphPattern724;
    static $FOLLOW_DOT_in_groupGraphPattern742;
    static $FOLLOW_triplesBlock_in_groupGraphPattern748;
    static $FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern757;
    static $FOLLOW_triplesSameSubject_in_triplesBlock784;
    static $FOLLOW_DOT_in_triplesBlock790;
    static $FOLLOW_triplesBlock_in_triplesBlock795;
    static $FOLLOW_optionalGraphPattern_in_graphPatternNotTriples832;
    static $FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples844;
    static $FOLLOW_graphGraphPattern_in_graphPatternNotTriples856;
    static $FOLLOW_OPTIONAL_in_optionalGraphPattern885;
    static $FOLLOW_groupGraphPattern_in_optionalGraphPattern887;
    static $FOLLOW_GRAPH_in_graphGraphPattern916;
    static $FOLLOW_varOrIRIref_in_graphGraphPattern918;
    static $FOLLOW_groupGraphPattern_in_graphGraphPattern920;
    static $FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern951;
    static $FOLLOW_UNION_in_groupOrUnionGraphPattern957;
    static $FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern961;
    static $FOLLOW_FILTER_in_filter993;
    static $FOLLOW_constraint_in_filter995;
    static $FOLLOW_brackettedExpression_in_constraint1026;
    static $FOLLOW_builtInCall_in_constraint1036;
    static $FOLLOW_functionCall_in_constraint1046;
    static $FOLLOW_iriRef_in_functionCall1068;
    static $FOLLOW_argList_in_functionCall1070;
    static $FOLLOW_OPEN_BRACE_in_argList1099;
    static $FOLLOW_WS_in_argList1101;
    static $FOLLOW_CLOSE_BRACE_in_argList1104;
    static $FOLLOW_OPEN_BRACE_in_argList1112;
    static $FOLLOW_expression_in_argList1116;
    static $FOLLOW_COMMA_in_argList1130;
    static $FOLLOW_expression_in_argList1134;
    static $FOLLOW_CLOSE_BRACE_in_argList1140;
    static $FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate1167;
    static $FOLLOW_constructTriples_in_constructTemplate1170;
    static $FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate1176;
    static $FOLLOW_triplesSameSubject_in_constructTriples1203;
    static $FOLLOW_DOT_in_constructTriples1209;
    static $FOLLOW_constructTriples_in_constructTriples1214;
    static $FOLLOW_varOrTerm_in_triplesSameSubject1248;
    static $FOLLOW_propertyListNotEmpty_in_triplesSameSubject1250;
    static $FOLLOW_triplesNode_in_triplesSameSubject1260;
    static $FOLLOW_propertyList_in_triplesSameSubject1262;
    static $FOLLOW_verb_in_propertyListNotEmpty1293;
    static $FOLLOW_objectList_in_propertyListNotEmpty1297;
    static $FOLLOW_SEMICOLON_in_propertyListNotEmpty1311;
    static $FOLLOW_verb_in_propertyListNotEmpty1317;
    static $FOLLOW_objectList_in_propertyListNotEmpty1321;
    static $FOLLOW_propertyListNotEmpty_in_propertyList1360;
    static $FOLLOW_object_in_objectList1393;
    static $FOLLOW_COMMA_in_objectList1407;
    static $FOLLOW_object_in_objectList1411;
    static $FOLLOW_graphNode_in_object1439;
    static $FOLLOW_varOrIRIref_in_verb1464;
    static $FOLLOW_A_in_verb1474;
    static $FOLLOW_collection_in_triplesNode1499;
    static $FOLLOW_blankNodePropertyList_in_triplesNode1509;
    static $FOLLOW_OPEN_SQUARE_BRACE_in_blankNodePropertyList1538;
    static $FOLLOW_propertyListNotEmpty_in_blankNodePropertyList1540;
    static $FOLLOW_CLOSE_SQUARE_BRACE_in_blankNodePropertyList1542;
    static $FOLLOW_OPEN_BRACE_in_collection1575;
    static $FOLLOW_graphNode_in_collection1578;
    static $FOLLOW_CLOSE_BRACE_in_collection1584;
    static $FOLLOW_varOrTerm_in_graphNode1607;
    static $FOLLOW_triplesNode_in_graphNode1617;
    static $FOLLOW_variable_in_varOrTerm1642;
    static $FOLLOW_graphTerm_in_varOrTerm1652;
    static $FOLLOW_variable_in_varOrIRIref1677;
    static $FOLLOW_iriRef_in_varOrIRIref1687;
    static $FOLLOW_VAR1_in_variable1722;
    static $FOLLOW_VAR2_in_variable1734;
    static $FOLLOW_iriRef_in_graphTerm1765;
    static $FOLLOW_rdfLiteral_in_graphTerm1777;
    static $FOLLOW_numericLiteral_in_graphTerm1789;
    static $FOLLOW_booleanLiteral_in_graphTerm1801;
    static $FOLLOW_blankNode_in_graphTerm1813;
    static $FOLLOW_OPEN_BRACE_in_graphTerm1823;
    static $FOLLOW_WS_in_graphTerm1825;
    static $FOLLOW_CLOSE_BRACE_in_graphTerm1828;
    static $FOLLOW_conditionalOrExpression_in_expression1853;
    static $FOLLOW_conditionalAndExpression_in_conditionalOrExpression1888;
    static $FOLLOW_OR_in_conditionalOrExpression1898;
    static $FOLLOW_conditionalAndExpression_in_conditionalOrExpression1902;
    static $FOLLOW_valueLogical_in_conditionalAndExpression1939;
    static $FOLLOW_AND_in_conditionalAndExpression1945;
    static $FOLLOW_valueLogical_in_conditionalAndExpression1949;
    static $FOLLOW_relationalExpression_in_valueLogical1977;
    static $FOLLOW_numericExpression_in_relationalExpression2004;
    static $FOLLOW_EQUAL_in_relationalExpression2018;
    static $FOLLOW_numericExpression_in_relationalExpression2022;
    static $FOLLOW_NOT_EQUAL_in_relationalExpression2036;
    static $FOLLOW_numericExpression_in_relationalExpression2040;
    static $FOLLOW_LESS_in_relationalExpression2054;
    static $FOLLOW_numericExpression_in_relationalExpression2058;
    static $FOLLOW_GREATER_in_relationalExpression2072;
    static $FOLLOW_numericExpression_in_relationalExpression2076;
    static $FOLLOW_LESS_EQUAL_in_relationalExpression2090;
    static $FOLLOW_numericExpression_in_relationalExpression2094;
    static $FOLLOW_GREATER_EQUAL_in_relationalExpression2108;
    static $FOLLOW_numericExpression_in_relationalExpression2112;
    static $FOLLOW_additiveExpression_in_numericExpression2147;
    static $FOLLOW_multiplicativeExpression_in_additiveExpression2178;
    static $FOLLOW_PLUS_in_additiveExpression2195;
    static $FOLLOW_multiplicativeExpression_in_additiveExpression2199;
    static $FOLLOW_MINUS_in_additiveExpression2215;
    static $FOLLOW_multiplicativeExpression_in_additiveExpression2219;
    static $FOLLOW_numericLiteralPositive_in_additiveExpression2235;
    static $FOLLOW_numericLiteralNegative_in_additiveExpression2251;
    static $FOLLOW_unaryExpression_in_multiplicativeExpression2299;
    static $FOLLOW_ASTERISK_in_multiplicativeExpression2316;
    static $FOLLOW_unaryExpression_in_multiplicativeExpression2320;
    static $FOLLOW_DIVIDE_in_multiplicativeExpression2326;
    static $FOLLOW_unaryExpression_in_multiplicativeExpression2330;
    static $FOLLOW_NOT_SIGN_in_unaryExpression2358;
    static $FOLLOW_primaryExpression_in_unaryExpression2362;
    static $FOLLOW_PLUS_in_unaryExpression2372;
    static $FOLLOW_primaryExpression_in_unaryExpression2376;
    static $FOLLOW_MINUS_in_unaryExpression2386;
    static $FOLLOW_primaryExpression_in_unaryExpression2390;
    static $FOLLOW_primaryExpression_in_unaryExpression2402;
    static $FOLLOW_brackettedExpression_in_primaryExpression2433;
    static $FOLLOW_builtInCall_in_primaryExpression2445;
    static $FOLLOW_iriRefOrFunction_in_primaryExpression2457;
    static $FOLLOW_rdfLiteral_in_primaryExpression2469;
    static $FOLLOW_numericLiteral_in_primaryExpression2481;
    static $FOLLOW_booleanLiteral_in_primaryExpression2493;
    static $FOLLOW_variable_in_primaryExpression2505;
    static $FOLLOW_OPEN_BRACE_in_brackettedExpression2530;
    static $FOLLOW_expression_in_brackettedExpression2534;
    static $FOLLOW_CLOSE_BRACE_in_brackettedExpression2536;
    static $FOLLOW_STR_in_builtInCall2561;
    static $FOLLOW_OPEN_BRACE_in_builtInCall2563;
    static $FOLLOW_expression_in_builtInCall2567;
    static $FOLLOW_CLOSE_BRACE_in_builtInCall2569;
    static $FOLLOW_LANG_in_builtInCall2579;
    static $FOLLOW_OPEN_BRACE_in_builtInCall2581;
    static $FOLLOW_expression_in_builtInCall2585;
    static $FOLLOW_CLOSE_BRACE_in_builtInCall2587;
    static $FOLLOW_LANGMATCHES_in_builtInCall2597;
    static $FOLLOW_OPEN_BRACE_in_builtInCall2599;
    static $FOLLOW_expression_in_builtInCall2603;
    static $FOLLOW_COMMA_in_builtInCall2605;
    static $FOLLOW_expression_in_builtInCall2609;
    static $FOLLOW_CLOSE_BRACE_in_builtInCall2611;
    static $FOLLOW_DATATYPE_in_builtInCall2621;
    static $FOLLOW_OPEN_BRACE_in_builtInCall2623;
    static $FOLLOW_expression_in_builtInCall2627;
    static $FOLLOW_CLOSE_BRACE_in_builtInCall2629;
    static $FOLLOW_BOUND_in_builtInCall2639;
    static $FOLLOW_OPEN_BRACE_in_builtInCall2641;
    static $FOLLOW_variable_in_builtInCall2643;
    static $FOLLOW_CLOSE_BRACE_in_builtInCall2645;
    static $FOLLOW_SAMETERM_in_builtInCall2655;
    static $FOLLOW_OPEN_BRACE_in_builtInCall2657;
    static $FOLLOW_expression_in_builtInCall2661;
    static $FOLLOW_COMMA_in_builtInCall2663;
    static $FOLLOW_expression_in_builtInCall2667;
    static $FOLLOW_CLOSE_BRACE_in_builtInCall2669;
    static $FOLLOW_ISIRI_in_builtInCall2679;
    static $FOLLOW_OPEN_BRACE_in_builtInCall2681;
    static $FOLLOW_expression_in_builtInCall2685;
    static $FOLLOW_CLOSE_BRACE_in_builtInCall2687;
    static $FOLLOW_ISURI_in_builtInCall2697;
    static $FOLLOW_OPEN_BRACE_in_builtInCall2699;
    static $FOLLOW_expression_in_builtInCall2703;
    static $FOLLOW_CLOSE_BRACE_in_builtInCall2705;
    static $FOLLOW_ISBLANK_in_builtInCall2715;
    static $FOLLOW_OPEN_BRACE_in_builtInCall2717;
    static $FOLLOW_expression_in_builtInCall2721;
    static $FOLLOW_CLOSE_BRACE_in_builtInCall2723;
    static $FOLLOW_ISLITERAL_in_builtInCall2733;
    static $FOLLOW_OPEN_BRACE_in_builtInCall2735;
    static $FOLLOW_expression_in_builtInCall2739;
    static $FOLLOW_CLOSE_BRACE_in_builtInCall2741;
    static $FOLLOW_regexExpression_in_builtInCall2751;
    static $FOLLOW_REGEX_in_regexExpression2776;
    static $FOLLOW_OPEN_BRACE_in_regexExpression2778;
    static $FOLLOW_expression_in_regexExpression2782;
    static $FOLLOW_COMMA_in_regexExpression2784;
    static $FOLLOW_expression_in_regexExpression2788;
    static $FOLLOW_COMMA_in_regexExpression2792;
    static $FOLLOW_expression_in_regexExpression2796;
    static $FOLLOW_CLOSE_BRACE_in_regexExpression2801;
    static $FOLLOW_iriRef_in_iriRefOrFunction2838;
    static $FOLLOW_argList_in_iriRefOrFunction2851;
    static $FOLLOW_string_in_rdfLiteral2882;
    static $FOLLOW_LANGTAG_in_rdfLiteral2896;
    static $FOLLOW_REFERENCE_in_rdfLiteral2913;
    static $FOLLOW_iriRef_in_rdfLiteral2915;
    static $FOLLOW_numericLiteralUnsigned_in_numericLiteral2948;
    static $FOLLOW_numericLiteralPositive_in_numericLiteral2956;
    static $FOLLOW_numericLiteralNegative_in_numericLiteral2964;
    static $FOLLOW_INTEGER_in_numericLiteralUnsigned2997;
    static $FOLLOW_DECIMAL_in_numericLiteralUnsigned3009;
    static $FOLLOW_DOUBLE_in_numericLiteralUnsigned3021;
    static $FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive3052;
    static $FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive3064;
    static $FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive3076;
    static $FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative3107;
    static $FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative3119;
    static $FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative3131;
    static $FOLLOW_TRUE_in_booleanLiteral3164;
    static $FOLLOW_FALSE_in_booleanLiteral3174;
    static $FOLLOW_set_in_string0;
    static $FOLLOW_IRI_REF_in_iriRef3246;
    static $FOLLOW_prefixedName_in_iriRef3256;
    static $FOLLOW_set_in_prefixedName0;
    static $FOLLOW_BLANK_NODE_LABEL_in_blankNode3318;
    static $FOLLOW_OPEN_SQUARE_BRACE_in_blankNode3328;
    static $FOLLOW_WS_in_blankNode3331;
    static $FOLLOW_CLOSE_SQUARE_BRACE_in_blankNode3335;

    
    

        public function __construct($input, $state, $gErfurt_Sparql_Parser_Sparql10_Sparql10 = null) {
            if($state==null){
                $state = new RecognizerSharedState();
            }
            parent::__construct($input, $state, $gErfurt_Sparql_Parser_Sparql10_Sparql10);
            $this->gErfurt_Sparql_Parser_Sparql10_Sparql10 = $gErfurt_Sparql_Parser_Sparql10_Sparql10;
             
            $this->gParent = $this->gErfurt_Sparql_Parser_Sparql10_Sparql10;
            
            
        }
        

    public function getTokenNames() { return Erfurt_Sparql_Parser_Sparql10_Sparql10Parser::$tokenNames; }
    public function getGrammarFileName() { return "Sparql10.g"; }


    private $_q = null;
    private $_errors = array();

    public function emitErrorMessage($msg) {
         $this->_errors []= $msg;
      }


    public static function query10_return() {
    	require_once 'ParserRuleReturnScope.php';
        $retval = new ParserRuleReturnScope();
    	$retval->value=null;
    	$retval->errors=null;
    	return $retval;
    }

    // $ANTLR start "query10"
    // Sparql10.g:17:1: query10 returns [$value, $errors] : prologue ( selectQuery | constructQuery | describeQuery | askQuery ) ; 
    public function query10(){
        $retval = $this->query10_return();
        $retval->start = $this->input->LT(1);

        $retval->value = &$value;
        $retval->errors = &$errors;

        $this->_q = new Erfurt_Sparql_Query2();
        try {
            // Sparql10.g:20:5: ( prologue ( selectQuery | constructQuery | describeQuery | askQuery ) ) 
            // Sparql10.g:20:7: prologue ( selectQuery | constructQuery | describeQuery | askQuery ) 
            {
            $this->pushFollow(self::$FOLLOW_prologue_in_query1038);
            $this->prologue();

            $this->state->_fsp--;

            // Sparql10.g:20:16: ( selectQuery | constructQuery | describeQuery | askQuery ) 
            $alt1=4;
            $LA1 = $this->input->LA(1);
            if($this->getToken('SELECT')== $LA1)
                {
                $alt1=1;
                }
            else if($this->getToken('CONSTRUCT')== $LA1)
                {
                $alt1=2;
                }
            else if($this->getToken('DESCRIBE')== $LA1)
                {
                $alt1=3;
                }
            else if($this->getToken('ASK')== $LA1)
                {
                $alt1=4;
                }
            else{
                $nvae =
                    new NoViableAltException("", 1, 0, $this->input);

                throw $nvae;
            }

            switch ($alt1) {
                case 1 :
                    // Sparql10.g:21:9: selectQuery 
                    {
                    $this->pushFollow(self::$FOLLOW_selectQuery_in_query1051);
                    $this->selectQuery();

                    $this->state->_fsp--;


                    }
                    break;
                case 2 :
                    // Sparql10.g:22:11: constructQuery 
                    {
                    $this->pushFollow(self::$FOLLOW_constructQuery_in_query1063);
                    $this->constructQuery();

                    $this->state->_fsp--;


                    }
                    break;
                case 3 :
                    // Sparql10.g:23:11: describeQuery 
                    {
                    $this->pushFollow(self::$FOLLOW_describeQuery_in_query1076);
                    $this->describeQuery();

                    $this->state->_fsp--;


                    }
                    break;
                case 4 :
                    // Sparql10.g:24:11: askQuery 
                    {
                    $this->pushFollow(self::$FOLLOW_askQuery_in_query1089);
                    $this->askQuery();

                    $this->state->_fsp--;


                    }
                    break;

            }

              $value = $this->_q; $errors = $this->_errors;

            }

            $retval->stop = $this->input->LT(-1);

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $retval;
    }
    // $ANTLR end "query10"


    // $ANTLR start "prologue"
    // Sparql10.g:29:1: prologue : ( baseDecl )? ( prefixDecl )* ; 
    public function prologue(){
        try {
            // Sparql10.g:30:5: ( ( baseDecl )? ( prefixDecl )* ) 
            // Sparql10.g:30:7: ( baseDecl )? ( prefixDecl )* 
            {
            // Sparql10.g:30:7: ( baseDecl )? 
            $alt2=2;
            $LA2_0 = $this->input->LA(1);

            if ( ($LA2_0==$this->getToken('BASE')) ) {
                $alt2=1;
            }
            switch ($alt2) {
                case 1 :
                    // Sparql10.g:30:7: baseDecl 
                    {
                    $this->pushFollow(self::$FOLLOW_baseDecl_in_prologue121);
                    $this->baseDecl();

                    $this->state->_fsp--;


                    }
                    break;

            }

            // Sparql10.g:30:17: ( prefixDecl )* 
            //loop3:
            do {
                $alt3=2;
                $LA3_0 = $this->input->LA(1);

                if ( ($LA3_0==$this->getToken('PREFIX')) ) {
                    $alt3=1;
                }


                switch ($alt3) {
            	case 1 :
            	    // Sparql10.g:30:17: prefixDecl 
            	    {
            	    $this->pushFollow(self::$FOLLOW_prefixDecl_in_prologue124);
            	    $this->prefixDecl();

            	    $this->state->_fsp--;


            	    }
            	    break;

            	default :
            	    break 2;//loop3;
                }
            } while (true);


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "prologue"


    // $ANTLR start "baseDecl"
    // Sparql10.g:34:1: baseDecl : BASE iriRef ; 
    public function baseDecl(){
        $iriRef1 = null;


        try {
            // Sparql10.g:35:5: ( BASE iriRef ) 
            // Sparql10.g:35:7: BASE iriRef 
            {
            $this->match($this->input,$this->getToken('BASE'),self::$FOLLOW_BASE_in_baseDecl144); 
            $this->pushFollow(self::$FOLLOW_iriRef_in_baseDecl146);
            $iriRef1=$this->iriRef();

            $this->state->_fsp--;

              $this->_q->setBase($iriRef1);

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "baseDecl"


    // $ANTLR start "prefixDecl"
    // Sparql10.g:39:1: prefixDecl : PREFIX PNAME_NS iriRef ; 
    public function prefixDecl(){
        $PNAME_NS2=null;
        $iriRef3 = null;


        require_once 'Erfurt/Sparql/Query2/Prefix.php';
        try {
            // Sparql10.g:41:5: ( PREFIX PNAME_NS iriRef ) 
            // Sparql10.g:41:7: PREFIX PNAME_NS iriRef 
            {
            $this->match($this->input,$this->getToken('PREFIX'),self::$FOLLOW_PREFIX_in_prefixDecl171); 
            $PNAME_NS2=$this->match($this->input,$this->getToken('PNAME_NS'),self::$FOLLOW_PNAME_NS_in_prefixDecl173); 
            $this->pushFollow(self::$FOLLOW_iriRef_in_prefixDecl175);
            $iriRef3=$this->iriRef();

            $this->state->_fsp--;

              $this->_q->addPrefix(new Erfurt_Sparql_Query2_Prefix(($PNAME_NS2!=null?$PNAME_NS2->getText():null), $iriRef3));

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "prefixDecl"


    // $ANTLR start "selectQuery"
    // Sparql10.g:45:1: selectQuery : SELECT ( DISTINCT | REDUCED )? ( ( variable )+ | ASTERISK ) ( datasetClause )* whereClause solutionModifier ; 
    public function selectQuery(){
        try {
            // Sparql10.g:46:5: ( SELECT ( DISTINCT | REDUCED )? ( ( variable )+ | ASTERISK ) ( datasetClause )* whereClause solutionModifier ) 
            // Sparql10.g:46:7: SELECT ( DISTINCT | REDUCED )? ( ( variable )+ | ASTERISK ) ( datasetClause )* whereClause solutionModifier 
            {
            $this->match($this->input,$this->getToken('SELECT'),self::$FOLLOW_SELECT_in_selectQuery196); 
            // Sparql10.g:46:14: ( DISTINCT | REDUCED )? 
            $alt4=3;
            $LA4_0 = $this->input->LA(1);

            if ( ($LA4_0==$this->getToken('DISTINCT')) ) {
                $alt4=1;
            }
            else if ( ($LA4_0==$this->getToken('REDUCED')) ) {
                $alt4=2;
            }
            switch ($alt4) {
                case 1 :
                    // Sparql10.g:46:16: DISTINCT 
                    {
                    $this->match($this->input,$this->getToken('DISTINCT'),self::$FOLLOW_DISTINCT_in_selectQuery200); 
                      $this->_q->setDistinct(true);

                    }
                    break;
                case 2 :
                    // Sparql10.g:47:11: REDUCED 
                    {
                    $this->match($this->input,$this->getToken('REDUCED'),self::$FOLLOW_REDUCED_in_selectQuery214); 
                      $this->_q->setReduced(true);

                    }
                    break;

            }

            // Sparql10.g:48:12: ( ( variable )+ | ASTERISK ) 
            $alt6=2;
            $LA6_0 = $this->input->LA(1);

            if ( (($LA6_0>=$this->getToken('VAR1') && $LA6_0<=$this->getToken('VAR2'))) ) {
                $alt6=1;
            }
            else if ( ($LA6_0==$this->getToken('ASTERISK')) ) {
                $alt6=2;
            }
            else {
                $nvae = new NoViableAltException("", 6, 0, $this->input);

                throw $nvae;
            }
            switch ($alt6) {
                case 1 :
                    // Sparql10.g:48:14: ( variable )+ 
                    {
                    // Sparql10.g:48:14: ( variable )+ 
                    $cnt5=0;
                    //loop5:
                    do {
                        $alt5=2;
                        $LA5_0 = $this->input->LA(1);

                        if ( (($LA5_0>=$this->getToken('VAR1') && $LA5_0<=$this->getToken('VAR2'))) ) {
                            $alt5=1;
                        }


                        switch ($alt5) {
                    	case 1 :
                    	    // Sparql10.g:48:14: variable 
                    	    {
                    	    $this->pushFollow(self::$FOLLOW_variable_in_selectQuery231);
                    	    $this->variable();

                    	    $this->state->_fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt5 >= 1 ) break 2;//loop5;
                                $eee =
                                    new EarlyExitException(5, $this->input);
                                throw $eee;
                        }
                        $cnt5++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // Sparql10.g:48:26: ASTERISK 
                    {
                    $this->match($this->input,$this->getToken('ASTERISK'),self::$FOLLOW_ASTERISK_in_selectQuery236); 

                    }
                    break;

            }

            // Sparql10.g:48:37: ( datasetClause )* 
            //loop7:
            do {
                $alt7=2;
                $LA7_0 = $this->input->LA(1);

                if ( ($LA7_0==$this->getToken('FROM')) ) {
                    $alt7=1;
                }


                switch ($alt7) {
            	case 1 :
            	    // Sparql10.g:48:37: datasetClause 
            	    {
            	    $this->pushFollow(self::$FOLLOW_datasetClause_in_selectQuery240);
            	    $this->datasetClause();

            	    $this->state->_fsp--;


            	    }
            	    break;

            	default :
            	    break 2;//loop7;
                }
            } while (true);

            $this->pushFollow(self::$FOLLOW_whereClause_in_selectQuery243);
            $this->whereClause();

            $this->state->_fsp--;

            $this->pushFollow(self::$FOLLOW_solutionModifier_in_selectQuery245);
            $this->solutionModifier();

            $this->state->_fsp--;


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "selectQuery"


    // $ANTLR start "constructQuery"
    // Sparql10.g:52:1: constructQuery : CONSTRUCT constructTemplate ( datasetClause )* whereClause solutionModifier ; 
    public function constructQuery(){
        try {
            // Sparql10.g:53:5: ( CONSTRUCT constructTemplate ( datasetClause )* whereClause solutionModifier ) 
            // Sparql10.g:53:7: CONSTRUCT constructTemplate ( datasetClause )* whereClause solutionModifier 
            {
            $this->match($this->input,$this->getToken('CONSTRUCT'),self::$FOLLOW_CONSTRUCT_in_constructQuery265); 
            $this->pushFollow(self::$FOLLOW_constructTemplate_in_constructQuery267);
            $this->constructTemplate();

            $this->state->_fsp--;

            // Sparql10.g:53:35: ( datasetClause )* 
            //loop8:
            do {
                $alt8=2;
                $LA8_0 = $this->input->LA(1);

                if ( ($LA8_0==$this->getToken('FROM')) ) {
                    $alt8=1;
                }


                switch ($alt8) {
            	case 1 :
            	    // Sparql10.g:53:35: datasetClause 
            	    {
            	    $this->pushFollow(self::$FOLLOW_datasetClause_in_constructQuery269);
            	    $this->datasetClause();

            	    $this->state->_fsp--;


            	    }
            	    break;

            	default :
            	    break 2;//loop8;
                }
            } while (true);

            $this->pushFollow(self::$FOLLOW_whereClause_in_constructQuery272);
            $this->whereClause();

            $this->state->_fsp--;

            $this->pushFollow(self::$FOLLOW_solutionModifier_in_constructQuery274);
            $this->solutionModifier();

            $this->state->_fsp--;


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "constructQuery"


    // $ANTLR start "describeQuery"
    // Sparql10.g:57:1: describeQuery : DESCRIBE ( ( varOrIRIref )+ | ASTERISK ) ( datasetClause )* ( whereClause )? solutionModifier ; 
    public function describeQuery(){
        try {
            // Sparql10.g:58:5: ( DESCRIBE ( ( varOrIRIref )+ | ASTERISK ) ( datasetClause )* ( whereClause )? solutionModifier ) 
            // Sparql10.g:58:7: DESCRIBE ( ( varOrIRIref )+ | ASTERISK ) ( datasetClause )* ( whereClause )? solutionModifier 
            {
            $this->match($this->input,$this->getToken('DESCRIBE'),self::$FOLLOW_DESCRIBE_in_describeQuery293); 
            // Sparql10.g:58:16: ( ( varOrIRIref )+ | ASTERISK ) 
            $alt10=2;
            $LA10_0 = $this->input->LA(1);

            if ( ($LA10_0==$this->getToken('IRI_REF')||$LA10_0==$this->getToken('PNAME_NS')||$LA10_0==$this->getToken('PNAME_LN')||($LA10_0>=$this->getToken('VAR1') && $LA10_0<=$this->getToken('VAR2'))) ) {
                $alt10=1;
            }
            else if ( ($LA10_0==$this->getToken('ASTERISK')) ) {
                $alt10=2;
            }
            else {
                $nvae = new NoViableAltException("", 10, 0, $this->input);

                throw $nvae;
            }
            switch ($alt10) {
                case 1 :
                    // Sparql10.g:58:18: ( varOrIRIref )+ 
                    {
                    // Sparql10.g:58:18: ( varOrIRIref )+ 
                    $cnt9=0;
                    //loop9:
                    do {
                        $alt9=2;
                        $LA9_0 = $this->input->LA(1);

                        if ( ($LA9_0==$this->getToken('IRI_REF')||$LA9_0==$this->getToken('PNAME_NS')||$LA9_0==$this->getToken('PNAME_LN')||($LA9_0>=$this->getToken('VAR1') && $LA9_0<=$this->getToken('VAR2'))) ) {
                            $alt9=1;
                        }


                        switch ($alt9) {
                    	case 1 :
                    	    // Sparql10.g:58:18: varOrIRIref 
                    	    {
                    	    $this->pushFollow(self::$FOLLOW_varOrIRIref_in_describeQuery297);
                    	    $this->varOrIRIref();

                    	    $this->state->_fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt9 >= 1 ) break 2;//loop9;
                                $eee =
                                    new EarlyExitException(9, $this->input);
                                throw $eee;
                        }
                        $cnt9++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // Sparql10.g:58:33: ASTERISK 
                    {
                    $this->match($this->input,$this->getToken('ASTERISK'),self::$FOLLOW_ASTERISK_in_describeQuery302); 

                    }
                    break;

            }

            // Sparql10.g:58:44: ( datasetClause )* 
            //loop11:
            do {
                $alt11=2;
                $LA11_0 = $this->input->LA(1);

                if ( ($LA11_0==$this->getToken('FROM')) ) {
                    $alt11=1;
                }


                switch ($alt11) {
            	case 1 :
            	    // Sparql10.g:58:44: datasetClause 
            	    {
            	    $this->pushFollow(self::$FOLLOW_datasetClause_in_describeQuery306);
            	    $this->datasetClause();

            	    $this->state->_fsp--;


            	    }
            	    break;

            	default :
            	    break 2;//loop11;
                }
            } while (true);

            // Sparql10.g:58:59: ( whereClause )? 
            $alt12=2;
            $LA12_0 = $this->input->LA(1);

            if ( ($LA12_0==$this->getToken('WHERE')||$LA12_0==$this->getToken('OPEN_CURLY_BRACE')) ) {
                $alt12=1;
            }
            switch ($alt12) {
                case 1 :
                    // Sparql10.g:58:59: whereClause 
                    {
                    $this->pushFollow(self::$FOLLOW_whereClause_in_describeQuery309);
                    $this->whereClause();

                    $this->state->_fsp--;


                    }
                    break;

            }

            $this->pushFollow(self::$FOLLOW_solutionModifier_in_describeQuery312);
            $this->solutionModifier();

            $this->state->_fsp--;


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "describeQuery"


    // $ANTLR start "askQuery"
    // Sparql10.g:62:1: askQuery : ASK ( datasetClause )* whereClause ; 
    public function askQuery(){
        $ASK4=null;

        try {
            // Sparql10.g:63:5: ( ASK ( datasetClause )* whereClause ) 
            // Sparql10.g:63:7: ASK ( datasetClause )* whereClause 
            {
            $ASK4=$this->match($this->input,$this->getToken('ASK'),self::$FOLLOW_ASK_in_askQuery331); 
            // Sparql10.g:63:11: ( datasetClause )* 
            //loop13:
            do {
                $alt13=2;
                $LA13_0 = $this->input->LA(1);

                if ( ($LA13_0==$this->getToken('FROM')) ) {
                    $alt13=1;
                }


                switch ($alt13) {
            	case 1 :
            	    // Sparql10.g:63:11: datasetClause 
            	    {
            	    $this->pushFollow(self::$FOLLOW_datasetClause_in_askQuery333);
            	    $this->datasetClause();

            	    $this->state->_fsp--;


            	    }
            	    break;

            	default :
            	    break 2;//loop13;
                }
            } while (true);

            $this->pushFollow(self::$FOLLOW_whereClause_in_askQuery336);
            $this->whereClause();

            $this->state->_fsp--;

              $this->_q->setQueryType(($ASK4!=null?$ASK4->getText():null));

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "askQuery"


    // $ANTLR start "datasetClause"
    // Sparql10.g:67:1: datasetClause : FROM ( defaultGraphClause | namedGraphClause ) ; 
    public function datasetClause(){
        $defaultGraphClause5 = null;

        $namedGraphClause6 = null;


        try {
            // Sparql10.g:68:5: ( FROM ( defaultGraphClause | namedGraphClause ) ) 
            // Sparql10.g:68:7: FROM ( defaultGraphClause | namedGraphClause ) 
            {
            $this->match($this->input,$this->getToken('FROM'),self::$FOLLOW_FROM_in_datasetClause357); 
            // Sparql10.g:68:12: ( defaultGraphClause | namedGraphClause ) 
            $alt14=2;
            $LA14_0 = $this->input->LA(1);

            if ( ($LA14_0==$this->getToken('IRI_REF')||$LA14_0==$this->getToken('PNAME_NS')||$LA14_0==$this->getToken('PNAME_LN')) ) {
                $alt14=1;
            }
            else if ( ($LA14_0==$this->getToken('NAMED')) ) {
                $alt14=2;
            }
            else {
                $nvae = new NoViableAltException("", 14, 0, $this->input);

                throw $nvae;
            }
            switch ($alt14) {
                case 1 :
                    // Sparql10.g:68:14: defaultGraphClause 
                    {
                    $this->pushFollow(self::$FOLLOW_defaultGraphClause_in_datasetClause361);
                    $defaultGraphClause5=$this->defaultGraphClause();

                    $this->state->_fsp--;

                      $this->_q->addFrom($defaultGraphClause5);

                    }
                    break;
                case 2 :
                    // Sparql10.g:69:11: namedGraphClause 
                    {
                    $this->pushFollow(self::$FOLLOW_namedGraphClause_in_datasetClause375);
                    $namedGraphClause6=$this->namedGraphClause();

                    $this->state->_fsp--;

                      $this->_q->addFrom($namedGraphClause6, true);

                    }
                    break;

            }


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "datasetClause"


    // $ANTLR start "defaultGraphClause"
    // Sparql10.g:74:1: defaultGraphClause returns [$value] : sourceSelector ; 
    public function defaultGraphClause(){
        $value = null;

        $sourceSelector7 = null;


        try {
            // Sparql10.g:75:5: ( sourceSelector ) 
            // Sparql10.g:75:7: sourceSelector 
            {
            $this->pushFollow(self::$FOLLOW_sourceSelector_in_defaultGraphClause410);
            $sourceSelector7=$this->sourceSelector();

            $this->state->_fsp--;

              $value = $sourceSelector7;

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "defaultGraphClause"


    // $ANTLR start "namedGraphClause"
    // Sparql10.g:79:1: namedGraphClause returns [$value] : NAMED sourceSelector ; 
    public function namedGraphClause(){
        $value = null;

        $sourceSelector8 = null;


        try {
            // Sparql10.g:80:5: ( NAMED sourceSelector ) 
            // Sparql10.g:80:7: NAMED sourceSelector 
            {
            $this->match($this->input,$this->getToken('NAMED'),self::$FOLLOW_NAMED_in_namedGraphClause435); 
            $this->pushFollow(self::$FOLLOW_sourceSelector_in_namedGraphClause437);
            $sourceSelector8=$this->sourceSelector();

            $this->state->_fsp--;

              $value = $sourceSelector8;

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "namedGraphClause"


    // $ANTLR start "sourceSelector"
    // Sparql10.g:84:1: sourceSelector returns [$value] : iriRef ; 
    public function sourceSelector(){
        $value = null;

        $iriRef9 = null;


        try {
            // Sparql10.g:85:5: ( iriRef ) 
            // Sparql10.g:85:7: iriRef 
            {
            $this->pushFollow(self::$FOLLOW_iriRef_in_sourceSelector462);
            $iriRef9=$this->iriRef();

            $this->state->_fsp--;

              $value = $iriRef9;

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "sourceSelector"


    // $ANTLR start "whereClause"
    // Sparql10.g:89:1: whereClause : ( WHERE )? groupGraphPattern ; 
    public function whereClause(){
        $groupGraphPattern10 = null;


        try {
            // Sparql10.g:90:5: ( ( WHERE )? groupGraphPattern ) 
            // Sparql10.g:90:7: ( WHERE )? groupGraphPattern 
            {
            // Sparql10.g:90:7: ( WHERE )? 
            $alt15=2;
            $LA15_0 = $this->input->LA(1);

            if ( ($LA15_0==$this->getToken('WHERE')) ) {
                $alt15=1;
            }
            switch ($alt15) {
                case 1 :
                    // Sparql10.g:90:7: WHERE 
                    {
                    $this->match($this->input,$this->getToken('WHERE'),self::$FOLLOW_WHERE_in_whereClause483); 

                    }
                    break;

            }

            $this->pushFollow(self::$FOLLOW_groupGraphPattern_in_whereClause486);
            $groupGraphPattern10=$this->groupGraphPattern();

            $this->state->_fsp--;

              $this->_q->setWhere($groupGraphPattern10);

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "whereClause"


    // $ANTLR start "solutionModifier"
    // Sparql10.g:94:1: solutionModifier : ( orderClause )? ( limitOffsetClauses )? ; 
    public function solutionModifier(){
        try {
            // Sparql10.g:95:5: ( ( orderClause )? ( limitOffsetClauses )? ) 
            // Sparql10.g:95:7: ( orderClause )? ( limitOffsetClauses )? 
            {
            // Sparql10.g:95:7: ( orderClause )? 
            $alt16=2;
            $LA16_0 = $this->input->LA(1);

            if ( ($LA16_0==$this->getToken('ORDER')) ) {
                $alt16=1;
            }
            switch ($alt16) {
                case 1 :
                    // Sparql10.g:95:7: orderClause 
                    {
                    $this->pushFollow(self::$FOLLOW_orderClause_in_solutionModifier507);
                    $this->orderClause();

                    $this->state->_fsp--;


                    }
                    break;

            }

            // Sparql10.g:95:20: ( limitOffsetClauses )? 
            $alt17=2;
            $LA17_0 = $this->input->LA(1);

            if ( (($LA17_0>=$this->getToken('LIMIT') && $LA17_0<=$this->getToken('OFFSET'))) ) {
                $alt17=1;
            }
            switch ($alt17) {
                case 1 :
                    // Sparql10.g:95:20: limitOffsetClauses 
                    {
                    $this->pushFollow(self::$FOLLOW_limitOffsetClauses_in_solutionModifier510);
                    $this->limitOffsetClauses();

                    $this->state->_fsp--;


                    }
                    break;

            }


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "solutionModifier"


    // $ANTLR start "limitOffsetClauses"
    // Sparql10.g:98:1: limitOffsetClauses : ( limitClause ( offsetClause )? | offsetClause ( limitClause )? ); 
    public function limitOffsetClauses(){
        try {
            // Sparql10.g:99:5: ( limitClause ( offsetClause )? | offsetClause ( limitClause )? ) 
            $alt20=2;
            $LA20_0 = $this->input->LA(1);

            if ( ($LA20_0==$this->getToken('LIMIT')) ) {
                $alt20=1;
            }
            else if ( ($LA20_0==$this->getToken('OFFSET')) ) {
                $alt20=2;
            }
            else {
                $nvae = new NoViableAltException("", 20, 0, $this->input);

                throw $nvae;
            }
            switch ($alt20) {
                case 1 :
                    // Sparql10.g:99:7: limitClause ( offsetClause )? 
                    {
                    $this->pushFollow(self::$FOLLOW_limitClause_in_limitOffsetClauses529);
                    $this->limitClause();

                    $this->state->_fsp--;

                    // Sparql10.g:99:19: ( offsetClause )? 
                    $alt18=2;
                    $LA18_0 = $this->input->LA(1);

                    if ( ($LA18_0==$this->getToken('OFFSET')) ) {
                        $alt18=1;
                    }
                    switch ($alt18) {
                        case 1 :
                            // Sparql10.g:99:19: offsetClause 
                            {
                            $this->pushFollow(self::$FOLLOW_offsetClause_in_limitOffsetClauses531);
                            $this->offsetClause();

                            $this->state->_fsp--;


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Sparql10.g:100:7: offsetClause ( limitClause )? 
                    {
                    $this->pushFollow(self::$FOLLOW_offsetClause_in_limitOffsetClauses541);
                    $this->offsetClause();

                    $this->state->_fsp--;

                    // Sparql10.g:100:20: ( limitClause )? 
                    $alt19=2;
                    $LA19_0 = $this->input->LA(1);

                    if ( ($LA19_0==$this->getToken('LIMIT')) ) {
                        $alt19=1;
                    }
                    switch ($alt19) {
                        case 1 :
                            // Sparql10.g:100:20: limitClause 
                            {
                            $this->pushFollow(self::$FOLLOW_limitClause_in_limitOffsetClauses543);
                            $this->limitClause();

                            $this->state->_fsp--;


                            }
                            break;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "limitOffsetClauses"


    // $ANTLR start "orderClause"
    // Sparql10.g:104:1: orderClause : ORDER BY ( orderCondition )+ ; 
    public function orderClause(){
        try {
            // Sparql10.g:105:5: ( ORDER BY ( orderCondition )+ ) 
            // Sparql10.g:105:7: ORDER BY ( orderCondition )+ 
            {
            $this->match($this->input,$this->getToken('ORDER'),self::$FOLLOW_ORDER_in_orderClause563); 
            $this->match($this->input,$this->getToken('BY'),self::$FOLLOW_BY_in_orderClause565); 
            // Sparql10.g:105:16: ( orderCondition )+ 
            $cnt21=0;
            //loop21:
            do {
                $alt21=2;
                $LA21_0 = $this->input->LA(1);

                if ( (($LA21_0>=$this->getToken('ASC') && $LA21_0<=$this->getToken('DESC'))||($LA21_0>=$this->getToken('STR') && $LA21_0<=$this->getToken('REGEX'))||$LA21_0==$this->getToken('IRI_REF')||$LA21_0==$this->getToken('PNAME_NS')||$LA21_0==$this->getToken('PNAME_LN')||($LA21_0>=$this->getToken('VAR1') && $LA21_0<=$this->getToken('VAR2'))||$LA21_0==$this->getToken('OPEN_BRACE')) ) {
                    $alt21=1;
                }


                switch ($alt21) {
            	case 1 :
            	    // Sparql10.g:105:16: orderCondition 
            	    {
            	    $this->pushFollow(self::$FOLLOW_orderCondition_in_orderClause567);
            	    $this->orderCondition();

            	    $this->state->_fsp--;


            	    }
            	    break;

            	default :
            	    if ( $cnt21 >= 1 ) break 2;//loop21;
                        $eee =
                            new EarlyExitException(21, $this->input);
                        throw $eee;
                }
                $cnt21++;
            } while (true);


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "orderClause"


    // $ANTLR start "orderCondition"
    // Sparql10.g:109:1: orderCondition : ( ( (o= ASC | o= DESC ) brackettedExpression ) | (v= constraint | v= variable ) ); 
    public function orderCondition(){
        $o=null;
        $v = null;

        $brackettedExpression11 = null;


        try {
            // Sparql10.g:110:5: ( ( (o= ASC | o= DESC ) brackettedExpression ) | (v= constraint | v= variable ) ) 
            $alt24=2;
            $LA24_0 = $this->input->LA(1);

            if ( (($LA24_0>=$this->getToken('ASC') && $LA24_0<=$this->getToken('DESC'))) ) {
                $alt24=1;
            }
            else if ( (($LA24_0>=$this->getToken('STR') && $LA24_0<=$this->getToken('REGEX'))||$LA24_0==$this->getToken('IRI_REF')||$LA24_0==$this->getToken('PNAME_NS')||$LA24_0==$this->getToken('PNAME_LN')||($LA24_0>=$this->getToken('VAR1') && $LA24_0<=$this->getToken('VAR2'))||$LA24_0==$this->getToken('OPEN_BRACE')) ) {
                $alt24=2;
            }
            else {
                $nvae = new NoViableAltException("", 24, 0, $this->input);

                throw $nvae;
            }
            switch ($alt24) {
                case 1 :
                    // Sparql10.g:110:7: ( (o= ASC | o= DESC ) brackettedExpression ) 
                    {
                    // Sparql10.g:110:7: ( (o= ASC | o= DESC ) brackettedExpression ) 
                    // Sparql10.g:110:9: (o= ASC | o= DESC ) brackettedExpression 
                    {
                    // Sparql10.g:110:9: (o= ASC | o= DESC ) 
                    $alt22=2;
                    $LA22_0 = $this->input->LA(1);

                    if ( ($LA22_0==$this->getToken('ASC')) ) {
                        $alt22=1;
                    }
                    else if ( ($LA22_0==$this->getToken('DESC')) ) {
                        $alt22=2;
                    }
                    else {
                        $nvae = new NoViableAltException("", 22, 0, $this->input);

                        throw $nvae;
                    }
                    switch ($alt22) {
                        case 1 :
                            // Sparql10.g:110:11: o= ASC 
                            {
                            $o=$this->match($this->input,$this->getToken('ASC'),self::$FOLLOW_ASC_in_orderCondition593); 

                            }
                            break;
                        case 2 :
                            // Sparql10.g:110:19: o= DESC 
                            {
                            $o=$this->match($this->input,$this->getToken('DESC'),self::$FOLLOW_DESC_in_orderCondition599); 

                            }
                            break;

                    }

                    $this->pushFollow(self::$FOLLOW_brackettedExpression_in_orderCondition603);
                    $brackettedExpression11=$this->brackettedExpression();

                    $this->state->_fsp--;


                    }

                      $this->_q->getOrder()->add($brackettedExpression11, ($o!=null?$o->getText():null));

                    }
                    break;
                case 2 :
                    // Sparql10.g:111:7: (v= constraint | v= variable ) 
                    {
                    // Sparql10.g:111:7: (v= constraint | v= variable ) 
                    $alt23=2;
                    $LA23_0 = $this->input->LA(1);

                    if ( (($LA23_0>=$this->getToken('STR') && $LA23_0<=$this->getToken('REGEX'))||$LA23_0==$this->getToken('IRI_REF')||$LA23_0==$this->getToken('PNAME_NS')||$LA23_0==$this->getToken('PNAME_LN')||$LA23_0==$this->getToken('OPEN_BRACE')) ) {
                        $alt23=1;
                    }
                    else if ( (($LA23_0>=$this->getToken('VAR1') && $LA23_0<=$this->getToken('VAR2'))) ) {
                        $alt23=2;
                    }
                    else {
                        $nvae = new NoViableAltException("", 23, 0, $this->input);

                        throw $nvae;
                    }
                    switch ($alt23) {
                        case 1 :
                            // Sparql10.g:111:9: v= constraint 
                            {
                            $this->pushFollow(self::$FOLLOW_constraint_in_orderCondition619);
                            $v=$this->constraint();

                            $this->state->_fsp--;


                            }
                            break;
                        case 2 :
                            // Sparql10.g:111:24: v= variable 
                            {
                            $this->pushFollow(self::$FOLLOW_variable_in_orderCondition625);
                            $v=$this->variable();

                            $this->state->_fsp--;


                            }
                            break;

                    }

                      $this->_q->getOrder()->add($v);

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "orderCondition"


    // $ANTLR start "limitClause"
    // Sparql10.g:115:1: limitClause : LIMIT INTEGER ; 
    public function limitClause(){
        $INTEGER12=null;

        try {
            // Sparql10.g:116:5: ( LIMIT INTEGER ) 
            // Sparql10.g:116:7: LIMIT INTEGER 
            {
            $this->match($this->input,$this->getToken('LIMIT'),self::$FOLLOW_LIMIT_in_limitClause647); 
            $INTEGER12=$this->match($this->input,$this->getToken('INTEGER'),self::$FOLLOW_INTEGER_in_limitClause649); 
              $this->_q->setLimit(($INTEGER12!=null?$INTEGER12->getText():null));

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "limitClause"


    // $ANTLR start "offsetClause"
    // Sparql10.g:120:1: offsetClause : OFFSET INTEGER ; 
    public function offsetClause(){
        $INTEGER13=null;

        try {
            // Sparql10.g:121:5: ( OFFSET INTEGER ) 
            // Sparql10.g:121:7: OFFSET INTEGER 
            {
            $this->match($this->input,$this->getToken('OFFSET'),self::$FOLLOW_OFFSET_in_offsetClause670); 
            $INTEGER13=$this->match($this->input,$this->getToken('INTEGER'),self::$FOLLOW_INTEGER_in_offsetClause672); 
              $this->_q->setOffset(($INTEGER13!=null?$INTEGER13->getText():null));

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return ;
    }
    // $ANTLR end "offsetClause"


    // $ANTLR start "groupGraphPattern"
    // Sparql10.g:125:1: groupGraphPattern returns [$value] : OPEN_CURLY_BRACE (t1= triplesBlock )? ( (v= graphPatternNotTriples | v= filter ) ( DOT )? (t2= triplesBlock )? )* CLOSE_CURLY_BRACE ; 
    public function groupGraphPattern(){
        $value = null;

        $t1 = null;

        $v = null;

        $t2 = null;



        require_once('Erfurt/Sparql/Query2/GroupGraphPattern.php');
        $value = new Erfurt_Sparql_Query2_GroupGraphPattern();

        try {
            // Sparql10.g:130:3: ( OPEN_CURLY_BRACE (t1= triplesBlock )? ( (v= graphPatternNotTriples | v= filter ) ( DOT )? (t2= triplesBlock )? )* CLOSE_CURLY_BRACE ) 
            // Sparql10.g:130:5: OPEN_CURLY_BRACE (t1= triplesBlock )? ( (v= graphPatternNotTriples | v= filter ) ( DOT )? (t2= triplesBlock )? )* CLOSE_CURLY_BRACE 
            {
            $this->match($this->input,$this->getToken('OPEN_CURLY_BRACE'),self::$FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern699); 
            // Sparql10.g:130:22: (t1= triplesBlock )? 
            $alt25=2;
            $LA25_0 = $this->input->LA(1);

            if ( (($LA25_0>=$this->getToken('TRUE') && $LA25_0<=$this->getToken('FALSE'))||$LA25_0==$this->getToken('IRI_REF')||$LA25_0==$this->getToken('PNAME_NS')||$LA25_0==$this->getToken('PNAME_LN')||($LA25_0>=$this->getToken('VAR1') && $LA25_0<=$this->getToken('VAR2'))||$LA25_0==$this->getToken('INTEGER')||$LA25_0==$this->getToken('DECIMAL')||$LA25_0==$this->getToken('DOUBLE')||($LA25_0>=$this->getToken('INTEGER_POSITIVE') && $LA25_0<=$this->getToken('DOUBLE_NEGATIVE'))||($LA25_0>=$this->getToken('STRING_LITERAL1') && $LA25_0<=$this->getToken('STRING_LITERAL_LONG2'))||$LA25_0==$this->getToken('BLANK_NODE_LABEL')||$LA25_0==$this->getToken('OPEN_BRACE')||$LA25_0==$this->getToken('OPEN_SQUARE_BRACE')) ) {
                $alt25=1;
            }
            switch ($alt25) {
                case 1 :
                    // Sparql10.g:130:23: t1= triplesBlock 
                    {
                    $this->pushFollow(self::$FOLLOW_triplesBlock_in_groupGraphPattern704);
                    $t1=$this->triplesBlock();

                    $this->state->_fsp--;

                      $value ->addElements($t1);

                    }
                    break;

            }

            // Sparql10.g:131:3: ( (v= graphPatternNotTriples | v= filter ) ( DOT )? (t2= triplesBlock )? )* 
            //loop29:
            do {
                $alt29=2;
                $LA29_0 = $this->input->LA(1);

                if ( (($LA29_0>=$this->getToken('OPTIONAL') && $LA29_0<=$this->getToken('GRAPH'))||$LA29_0==$this->getToken('FILTER')||$LA29_0==$this->getToken('OPEN_CURLY_BRACE')) ) {
                    $alt29=1;
                }


                switch ($alt29) {
            	case 1 :
            	    // Sparql10.g:131:5: (v= graphPatternNotTriples | v= filter ) ( DOT )? (t2= triplesBlock )? 
            	    {
            	    // Sparql10.g:131:5: (v= graphPatternNotTriples | v= filter ) 
            	    $alt26=2;
            	    $LA26_0 = $this->input->LA(1);

            	    if ( (($LA26_0>=$this->getToken('OPTIONAL') && $LA26_0<=$this->getToken('GRAPH'))||$LA26_0==$this->getToken('OPEN_CURLY_BRACE')) ) {
            	        $alt26=1;
            	    }
            	    else if ( ($LA26_0==$this->getToken('FILTER')) ) {
            	        $alt26=2;
            	    }
            	    else {
            	        $nvae = new NoViableAltException("", 26, 0, $this->input);

            	        throw $nvae;
            	    }
            	    switch ($alt26) {
            	        case 1 :
            	            // Sparql10.g:131:7: v= graphPatternNotTriples 
            	            {
            	            $this->pushFollow(self::$FOLLOW_graphPatternNotTriples_in_groupGraphPattern718);
            	            $v=$this->graphPatternNotTriples();

            	            $this->state->_fsp--;


            	            }
            	            break;
            	        case 2 :
            	            // Sparql10.g:131:34: v= filter 
            	            {
            	            $this->pushFollow(self::$FOLLOW_filter_in_groupGraphPattern724);
            	            $v=$this->filter();

            	            $this->state->_fsp--;


            	            }
            	            break;

            	    }

            	      $value ->addElement($v);
            	    // Sparql10.g:132:13: ( DOT )? 
            	    $alt27=2;
            	    $LA27_0 = $this->input->LA(1);

            	    if ( ($LA27_0==$this->getToken('DOT')) ) {
            	        $alt27=1;
            	    }
            	    switch ($alt27) {
            	        case 1 :
            	            // Sparql10.g:132:13: DOT 
            	            {
            	            $this->match($this->input,$this->getToken('DOT'),self::$FOLLOW_DOT_in_groupGraphPattern742); 

            	            }
            	            break;

            	    }

            	    // Sparql10.g:132:18: (t2= triplesBlock )? 
            	    $alt28=2;
            	    $LA28_0 = $this->input->LA(1);

            	    if ( (($LA28_0>=$this->getToken('TRUE') && $LA28_0<=$this->getToken('FALSE'))||$LA28_0==$this->getToken('IRI_REF')||$LA28_0==$this->getToken('PNAME_NS')||$LA28_0==$this->getToken('PNAME_LN')||($LA28_0>=$this->getToken('VAR1') && $LA28_0<=$this->getToken('VAR2'))||$LA28_0==$this->getToken('INTEGER')||$LA28_0==$this->getToken('DECIMAL')||$LA28_0==$this->getToken('DOUBLE')||($LA28_0>=$this->getToken('INTEGER_POSITIVE') && $LA28_0<=$this->getToken('DOUBLE_NEGATIVE'))||($LA28_0>=$this->getToken('STRING_LITERAL1') && $LA28_0<=$this->getToken('STRING_LITERAL_LONG2'))||$LA28_0==$this->getToken('BLANK_NODE_LABEL')||$LA28_0==$this->getToken('OPEN_BRACE')||$LA28_0==$this->getToken('OPEN_SQUARE_BRACE')) ) {
            	        $alt28=1;
            	    }
            	    switch ($alt28) {
            	        case 1 :
            	            // Sparql10.g:132:19: t2= triplesBlock 
            	            {
            	            $this->pushFollow(self::$FOLLOW_triplesBlock_in_groupGraphPattern748);
            	            $t2=$this->triplesBlock();

            	            $this->state->_fsp--;

            	              $value ->addElements($t2);

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break 2;//loop29;
                }
            } while (true);

            $this->match($this->input,$this->getToken('CLOSE_CURLY_BRACE'),self::$FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern757); 

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "groupGraphPattern"


    // $ANTLR start "triplesBlock"
    // Sparql10.g:136:1: triplesBlock returns [$value] : triplesSameSubject ( DOT (t= triplesBlock )? )? ; 
    public function triplesBlock(){
        $value = null;

        $t = null;

        $triplesSameSubject14 = null;



        $value = array();

        try {
            // Sparql10.g:140:5: ( triplesSameSubject ( DOT (t= triplesBlock )? )? ) 
            // Sparql10.g:140:7: triplesSameSubject ( DOT (t= triplesBlock )? )? 
            {
            $this->pushFollow(self::$FOLLOW_triplesSameSubject_in_triplesBlock784);
            $triplesSameSubject14=$this->triplesSameSubject();

            $this->state->_fsp--;

              $value[]=$triplesSameSubject14;
            // Sparql10.g:140:65: ( DOT (t= triplesBlock )? )? 
            $alt31=2;
            $LA31_0 = $this->input->LA(1);

            if ( ($LA31_0==$this->getToken('DOT')) ) {
                $alt31=1;
            }
            switch ($alt31) {
                case 1 :
                    // Sparql10.g:140:67: DOT (t= triplesBlock )? 
                    {
                    $this->match($this->input,$this->getToken('DOT'),self::$FOLLOW_DOT_in_triplesBlock790); 
                    // Sparql10.g:140:71: (t= triplesBlock )? 
                    $alt30=2;
                    $LA30_0 = $this->input->LA(1);

                    if ( (($LA30_0>=$this->getToken('TRUE') && $LA30_0<=$this->getToken('FALSE'))||$LA30_0==$this->getToken('IRI_REF')||$LA30_0==$this->getToken('PNAME_NS')||$LA30_0==$this->getToken('PNAME_LN')||($LA30_0>=$this->getToken('VAR1') && $LA30_0<=$this->getToken('VAR2'))||$LA30_0==$this->getToken('INTEGER')||$LA30_0==$this->getToken('DECIMAL')||$LA30_0==$this->getToken('DOUBLE')||($LA30_0>=$this->getToken('INTEGER_POSITIVE') && $LA30_0<=$this->getToken('DOUBLE_NEGATIVE'))||($LA30_0>=$this->getToken('STRING_LITERAL1') && $LA30_0<=$this->getToken('STRING_LITERAL_LONG2'))||$LA30_0==$this->getToken('BLANK_NODE_LABEL')||$LA30_0==$this->getToken('OPEN_BRACE')||$LA30_0==$this->getToken('OPEN_SQUARE_BRACE')) ) {
                        $alt30=1;
                    }
                    switch ($alt30) {
                        case 1 :
                            // Sparql10.g:140:72: t= triplesBlock 
                            {
                            $this->pushFollow(self::$FOLLOW_triplesBlock_in_triplesBlock795);
                            $t=$this->triplesBlock();

                            $this->state->_fsp--;

                              $value = array_merge($value, $t);

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "triplesBlock"


    // $ANTLR start "graphPatternNotTriples"
    // Sparql10.g:144:1: graphPatternNotTriples returns [$value] : (v= optionalGraphPattern | v= groupOrUnionGraphPattern | v= graphGraphPattern ); 
    public function graphPatternNotTriples(){
        $value = null;

        $v = null;


        try {
            // Sparql10.g:146:5: (v= optionalGraphPattern | v= groupOrUnionGraphPattern | v= graphGraphPattern ) 
            $alt32=3;
            $LA32 = $this->input->LA(1);
            if($this->getToken('OPTIONAL')== $LA32)
                {
                $alt32=1;
                }
            else if($this->getToken('OPEN_CURLY_BRACE')== $LA32)
                {
                $alt32=2;
                }
            else if($this->getToken('GRAPH')== $LA32)
                {
                $alt32=3;
                }
            else{
                $nvae =
                    new NoViableAltException("", 32, 0, $this->input);

                throw $nvae;
            }

            switch ($alt32) {
                case 1 :
                    // Sparql10.g:146:7: v= optionalGraphPattern 
                    {
                    $this->pushFollow(self::$FOLLOW_optionalGraphPattern_in_graphPatternNotTriples832);
                    $v=$this->optionalGraphPattern();

                    $this->state->_fsp--;

                      $v=$v;

                    }
                    break;
                case 2 :
                    // Sparql10.g:147:7: v= groupOrUnionGraphPattern 
                    {
                    $this->pushFollow(self::$FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples844);
                    $v=$this->groupOrUnionGraphPattern();

                    $this->state->_fsp--;

                      $v=$v;

                    }
                    break;
                case 3 :
                    // Sparql10.g:148:7: v= graphGraphPattern 
                    {
                    $this->pushFollow(self::$FOLLOW_graphGraphPattern_in_graphPatternNotTriples856);
                    $v=$this->graphGraphPattern();

                    $this->state->_fsp--;

                      $v=$v;

                    }
                    break;

            }
              $value = $v;
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "graphPatternNotTriples"


    // $ANTLR start "optionalGraphPattern"
    // Sparql10.g:152:1: optionalGraphPattern returns [$value] : OPTIONAL groupGraphPattern ; 
    public function optionalGraphPattern(){
        $value = null;

        $groupGraphPattern15 = null;


        require_once('Erfurt/Sparql/Query2/OptionalGraphPattern.php');
        try {
            // Sparql10.g:154:5: ( OPTIONAL groupGraphPattern ) 
            // Sparql10.g:154:7: OPTIONAL groupGraphPattern 
            {
            $this->match($this->input,$this->getToken('OPTIONAL'),self::$FOLLOW_OPTIONAL_in_optionalGraphPattern885); 
            $this->pushFollow(self::$FOLLOW_groupGraphPattern_in_optionalGraphPattern887);
            $groupGraphPattern15=$this->groupGraphPattern();

            $this->state->_fsp--;

              $value = new Erfurt_Sparql_Query2_OptionalGraphPattern(); $value->addElement($groupGraphPattern15);

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "optionalGraphPattern"


    // $ANTLR start "graphGraphPattern"
    // Sparql10.g:158:1: graphGraphPattern returns [$value] : GRAPH varOrIRIref groupGraphPattern ; 
    public function graphGraphPattern(){
        $value = null;

        $varOrIRIref16 = null;

        $groupGraphPattern17 = null;


        require_once('Erfurt/Sparql/Query2/GraphGraphPattern.php');
        try {
            // Sparql10.g:160:5: ( GRAPH varOrIRIref groupGraphPattern ) 
            // Sparql10.g:160:7: GRAPH varOrIRIref groupGraphPattern 
            {
            $this->match($this->input,$this->getToken('GRAPH'),self::$FOLLOW_GRAPH_in_graphGraphPattern916); 
            $this->pushFollow(self::$FOLLOW_varOrIRIref_in_graphGraphPattern918);
            $varOrIRIref16=$this->varOrIRIref();

            $this->state->_fsp--;

            $this->pushFollow(self::$FOLLOW_groupGraphPattern_in_graphGraphPattern920);
            $groupGraphPattern17=$this->groupGraphPattern();

            $this->state->_fsp--;

              $value = new Erfurt_Sparql_Query2_GraphGraphPattern($varOrIRIref16); $value->addElement($groupGraphPattern17);

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "graphGraphPattern"


    // $ANTLR start "groupOrUnionGraphPattern"
    // Sparql10.g:164:1: groupOrUnionGraphPattern returns [$value] : v1= groupGraphPattern ( UNION v2= groupGraphPattern )* ; 
    public function groupOrUnionGraphPattern(){
        $value = null;

        $v1 = null;

        $v2 = null;



        require_once('Erfurt/Sparql/Query2/GroupOrUnionGraphPattern.php');
        $value = new Erfurt_Sparql_Query2_GroupOrUnionGraphPattern();

        try {
            // Sparql10.g:169:5: (v1= groupGraphPattern ( UNION v2= groupGraphPattern )* ) 
            // Sparql10.g:169:7: v1= groupGraphPattern ( UNION v2= groupGraphPattern )* 
            {
            $this->pushFollow(self::$FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern951);
            $v1=$this->groupGraphPattern();

            $this->state->_fsp--;

              $value->addElement($v1);
            // Sparql10.g:169:62: ( UNION v2= groupGraphPattern )* 
            //loop33:
            do {
                $alt33=2;
                $LA33_0 = $this->input->LA(1);

                if ( ($LA33_0==$this->getToken('UNION')) ) {
                    $alt33=1;
                }


                switch ($alt33) {
            	case 1 :
            	    // Sparql10.g:169:64: UNION v2= groupGraphPattern 
            	    {
            	    $this->match($this->input,$this->getToken('UNION'),self::$FOLLOW_UNION_in_groupOrUnionGraphPattern957); 
            	    $this->pushFollow(self::$FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern961);
            	    $v2=$this->groupGraphPattern();

            	    $this->state->_fsp--;

            	      $value->addElement($v2);

            	    }
            	    break;

            	default :
            	    break 2;//loop33;
                }
            } while (true);


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "groupOrUnionGraphPattern"


    // $ANTLR start "filter"
    // Sparql10.g:173:1: filter returns [$value] : FILTER constraint ; 
    public function filter(){
        $value = null;

        $constraint18 = null;


        require_once('Erfurt/Sparql/Query2/Filter.php');
        try {
            // Sparql10.g:175:5: ( FILTER constraint ) 
            // Sparql10.g:175:7: FILTER constraint 
            {
            $this->match($this->input,$this->getToken('FILTER'),self::$FOLLOW_FILTER_in_filter993); 
            $this->pushFollow(self::$FOLLOW_constraint_in_filter995);
            $constraint18=$this->constraint();

            $this->state->_fsp--;

              $value = new Erfurt_Sparql_Query2_Filter($constraint18);

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "filter"


    // $ANTLR start "constraint"
    // Sparql10.g:179:1: constraint returns [$value] : (v= brackettedExpression | v= builtInCall | v= functionCall ); 
    public function constraint(){
        $value = null;

        $v = null;


        try {
            // Sparql10.g:181:5: (v= brackettedExpression | v= builtInCall | v= functionCall ) 
            $alt34=3;
            $LA34 = $this->input->LA(1);
            if($this->getToken('OPEN_BRACE')== $LA34)
                {
                $alt34=1;
                }
            else if($this->getToken('STR')== $LA34||$this->getToken('LANG')== $LA34||$this->getToken('LANGMATCHES')== $LA34||$this->getToken('DATATYPE')== $LA34||$this->getToken('BOUND')== $LA34||$this->getToken('SAMETERM')== $LA34||$this->getToken('ISIRI')== $LA34||$this->getToken('ISURI')== $LA34||$this->getToken('ISBLANK')== $LA34||$this->getToken('ISLITERAL')== $LA34||$this->getToken('REGEX')== $LA34)
                {
                $alt34=2;
                }
            else if($this->getToken('IRI_REF')== $LA34||$this->getToken('PNAME_NS')== $LA34||$this->getToken('PNAME_LN')== $LA34)
                {
                $alt34=3;
                }
            else{
                $nvae =
                    new NoViableAltException("", 34, 0, $this->input);

                throw $nvae;
            }

            switch ($alt34) {
                case 1 :
                    // Sparql10.g:181:7: v= brackettedExpression 
                    {
                    $this->pushFollow(self::$FOLLOW_brackettedExpression_in_constraint1026);
                    $v=$this->brackettedExpression();

                    $this->state->_fsp--;


                    }
                    break;
                case 2 :
                    // Sparql10.g:182:7: v= builtInCall 
                    {
                    $this->pushFollow(self::$FOLLOW_builtInCall_in_constraint1036);
                    $v=$this->builtInCall();

                    $this->state->_fsp--;


                    }
                    break;
                case 3 :
                    // Sparql10.g:183:7: v= functionCall 
                    {
                    $this->pushFollow(self::$FOLLOW_functionCall_in_constraint1046);
                    $v=$this->functionCall();

                    $this->state->_fsp--;


                    }
                    break;

            }
              $value = $v;
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "constraint"


    // $ANTLR start "functionCall"
    // Sparql10.g:186:1: functionCall returns [$value] : iriRef argList ; 
    public function functionCall(){
        $value = null;

        $iriRef19 = null;

        $argList20 = null;


        try {
            // Sparql10.g:187:5: ( iriRef argList ) 
            // Sparql10.g:187:7: iriRef argList 
            {
            $this->pushFollow(self::$FOLLOW_iriRef_in_functionCall1068);
            $iriRef19=$this->iriRef();

            $this->state->_fsp--;

            $this->pushFollow(self::$FOLLOW_argList_in_functionCall1070);
            $argList20=$this->argList();

            $this->state->_fsp--;

              $value = new Erfurt_Sparql_Query2_Function($iriRef19, $argList20);

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "functionCall"


    // $ANTLR start "argList"
    // Sparql10.g:191:1: argList returns [$value] : ( OPEN_BRACE ( WS )* CLOSE_BRACE | OPEN_BRACE e1= expression ( COMMA e2= expression )* CLOSE_BRACE ); 
    public function argList(){
        $value = null;

        $e1 = null;

        $e2 = null;


        $value=array();
        try {
            // Sparql10.g:193:5: ( OPEN_BRACE ( WS )* CLOSE_BRACE | OPEN_BRACE e1= expression ( COMMA e2= expression )* CLOSE_BRACE ) 
            $alt37=2;
            $LA37_0 = $this->input->LA(1);

            if ( ($LA37_0==$this->getToken('OPEN_BRACE')) ) {
                $LA37_1 = $this->input->LA(2);

                if ( ($LA37_1==$this->getToken('WS')||$LA37_1==$this->getToken('CLOSE_BRACE')) ) {
                    $alt37=1;
                }
                else if ( (($LA37_1>=$this->getToken('STR') && $LA37_1<=$this->getToken('FALSE'))||$LA37_1==$this->getToken('IRI_REF')||$LA37_1==$this->getToken('PNAME_NS')||$LA37_1==$this->getToken('PNAME_LN')||($LA37_1>=$this->getToken('VAR1') && $LA37_1<=$this->getToken('MINUS'))||$LA37_1==$this->getToken('INTEGER')||$LA37_1==$this->getToken('DECIMAL')||($LA37_1>=$this->getToken('DOUBLE') && $LA37_1<=$this->getToken('DOUBLE_NEGATIVE'))||($LA37_1>=$this->getToken('STRING_LITERAL1') && $LA37_1<=$this->getToken('STRING_LITERAL_LONG2'))||$LA37_1==$this->getToken('NOT_SIGN')||$LA37_1==$this->getToken('OPEN_BRACE')) ) {
                    $alt37=2;
                }
                else {
                    $nvae = new NoViableAltException("", 37, 1, $this->input);

                    throw $nvae;
                }
            }
            else {
                $nvae = new NoViableAltException("", 37, 0, $this->input);

                throw $nvae;
            }
            switch ($alt37) {
                case 1 :
                    // Sparql10.g:193:7: OPEN_BRACE ( WS )* CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_argList1099); 
                    // Sparql10.g:193:18: ( WS )* 
                    //loop35:
                    do {
                        $alt35=2;
                        $LA35_0 = $this->input->LA(1);

                        if ( ($LA35_0==$this->getToken('WS')) ) {
                            $alt35=1;
                        }


                        switch ($alt35) {
                    	case 1 :
                    	    // Sparql10.g:193:18: WS 
                    	    {
                    	    $this->match($this->input,$this->getToken('WS'),self::$FOLLOW_WS_in_argList1101); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop35;
                        }
                    } while (true);

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_argList1104); 

                    }
                    break;
                case 2 :
                    // Sparql10.g:194:7: OPEN_BRACE e1= expression ( COMMA e2= expression )* CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_argList1112); 
                    $this->pushFollow(self::$FOLLOW_expression_in_argList1116);
                    $e1=$this->expression();

                    $this->state->_fsp--;

                      $value []= $e1;
                    // Sparql10.g:195:9: ( COMMA e2= expression )* 
                    //loop36:
                    do {
                        $alt36=2;
                        $LA36_0 = $this->input->LA(1);

                        if ( ($LA36_0==$this->getToken('COMMA')) ) {
                            $alt36=1;
                        }


                        switch ($alt36) {
                    	case 1 :
                    	    // Sparql10.g:195:11: COMMA e2= expression 
                    	    {
                    	    $this->match($this->input,$this->getToken('COMMA'),self::$FOLLOW_COMMA_in_argList1130); 
                    	    $this->pushFollow(self::$FOLLOW_expression_in_argList1134);
                    	    $e2=$this->expression();

                    	    $this->state->_fsp--;

                    	      $value []= $e2;

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop36;
                        }
                    } while (true);

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_argList1140); 

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "argList"


    // $ANTLR start "constructTemplate"
    // Sparql10.g:199:1: constructTemplate returns [$value] : OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE ; 
    public function constructTemplate(){
        $value = null;

        $constructTriples21 = null;



        require_once 'Erfurt/Sparql/Query2/ConstructTemplate.php';
        $value = new Erfurt_Sparql_Query2_ConstructTemplate();
        try {
            // Sparql10.g:203:5: ( OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE ) 
            // Sparql10.g:203:7: OPEN_CURLY_BRACE ( constructTriples )? CLOSE_CURLY_BRACE 
            {
            $this->match($this->input,$this->getToken('OPEN_CURLY_BRACE'),self::$FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate1167); 
            // Sparql10.g:203:24: ( constructTriples )? 
            $alt38=2;
            $LA38_0 = $this->input->LA(1);

            if ( (($LA38_0>=$this->getToken('TRUE') && $LA38_0<=$this->getToken('FALSE'))||$LA38_0==$this->getToken('IRI_REF')||$LA38_0==$this->getToken('PNAME_NS')||$LA38_0==$this->getToken('PNAME_LN')||($LA38_0>=$this->getToken('VAR1') && $LA38_0<=$this->getToken('VAR2'))||$LA38_0==$this->getToken('INTEGER')||$LA38_0==$this->getToken('DECIMAL')||$LA38_0==$this->getToken('DOUBLE')||($LA38_0>=$this->getToken('INTEGER_POSITIVE') && $LA38_0<=$this->getToken('DOUBLE_NEGATIVE'))||($LA38_0>=$this->getToken('STRING_LITERAL1') && $LA38_0<=$this->getToken('STRING_LITERAL_LONG2'))||$LA38_0==$this->getToken('BLANK_NODE_LABEL')||$LA38_0==$this->getToken('OPEN_BRACE')||$LA38_0==$this->getToken('OPEN_SQUARE_BRACE')) ) {
                $alt38=1;
            }
            switch ($alt38) {
                case 1 :
                    // Sparql10.g:203:25: constructTriples 
                    {
                    $this->pushFollow(self::$FOLLOW_constructTriples_in_constructTemplate1170);
                    $constructTriples21=$this->constructTriples();

                    $this->state->_fsp--;

                      $value->setElements($constructTriples21);

                    }
                    break;

            }

            $this->match($this->input,$this->getToken('CLOSE_CURLY_BRACE'),self::$FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate1176); 

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "constructTemplate"


    // $ANTLR start "constructTriples"
    // Sparql10.g:207:1: constructTriples returns [$value] : triplesSameSubject ( DOT (c= constructTriples )? )? ; 
    public function constructTriples(){
        $value = null;

        $c = null;

        $triplesSameSubject22 = null;


        $value=array();
        try {
            // Sparql10.g:209:5: ( triplesSameSubject ( DOT (c= constructTriples )? )? ) 
            // Sparql10.g:209:7: triplesSameSubject ( DOT (c= constructTriples )? )? 
            {
            $this->pushFollow(self::$FOLLOW_triplesSameSubject_in_constructTriples1203);
            $triplesSameSubject22=$this->triplesSameSubject();

            $this->state->_fsp--;

              $value []= $triplesSameSubject22;
            // Sparql10.g:209:67: ( DOT (c= constructTriples )? )? 
            $alt40=2;
            $LA40_0 = $this->input->LA(1);

            if ( ($LA40_0==$this->getToken('DOT')) ) {
                $alt40=1;
            }
            switch ($alt40) {
                case 1 :
                    // Sparql10.g:209:69: DOT (c= constructTriples )? 
                    {
                    $this->match($this->input,$this->getToken('DOT'),self::$FOLLOW_DOT_in_constructTriples1209); 
                    // Sparql10.g:209:73: (c= constructTriples )? 
                    $alt39=2;
                    $LA39_0 = $this->input->LA(1);

                    if ( (($LA39_0>=$this->getToken('TRUE') && $LA39_0<=$this->getToken('FALSE'))||$LA39_0==$this->getToken('IRI_REF')||$LA39_0==$this->getToken('PNAME_NS')||$LA39_0==$this->getToken('PNAME_LN')||($LA39_0>=$this->getToken('VAR1') && $LA39_0<=$this->getToken('VAR2'))||$LA39_0==$this->getToken('INTEGER')||$LA39_0==$this->getToken('DECIMAL')||$LA39_0==$this->getToken('DOUBLE')||($LA39_0>=$this->getToken('INTEGER_POSITIVE') && $LA39_0<=$this->getToken('DOUBLE_NEGATIVE'))||($LA39_0>=$this->getToken('STRING_LITERAL1') && $LA39_0<=$this->getToken('STRING_LITERAL_LONG2'))||$LA39_0==$this->getToken('BLANK_NODE_LABEL')||$LA39_0==$this->getToken('OPEN_BRACE')||$LA39_0==$this->getToken('OPEN_SQUARE_BRACE')) ) {
                        $alt39=1;
                    }
                    switch ($alt39) {
                        case 1 :
                            // Sparql10.g:209:74: c= constructTriples 
                            {
                            $this->pushFollow(self::$FOLLOW_constructTriples_in_constructTriples1214);
                            $c=$this->constructTriples();

                            $this->state->_fsp--;

                              $value = array_merge($value, $c);

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "constructTriples"


    // $ANTLR start "triplesSameSubject"
    // Sparql10.g:213:1: triplesSameSubject returns [$value] : ( varOrTerm propertyListNotEmpty | triplesNode propertyList ); 
    public function triplesSameSubject(){
        $value = null;

        $varOrTerm23 = null;

        $propertyListNotEmpty24 = null;

        $triplesNode25 = null;

        $propertyList26 = null;


        require_once('Erfurt/Sparql/Query2/TriplesSameSubject.php');
        try {
            // Sparql10.g:215:5: ( varOrTerm propertyListNotEmpty | triplesNode propertyList ) 
            $alt41=2;
            $LA41 = $this->input->LA(1);
            if($this->getToken('TRUE')== $LA41||$this->getToken('FALSE')== $LA41||$this->getToken('IRI_REF')== $LA41||$this->getToken('PNAME_NS')== $LA41||$this->getToken('PNAME_LN')== $LA41||$this->getToken('VAR1')== $LA41||$this->getToken('VAR2')== $LA41||$this->getToken('INTEGER')== $LA41||$this->getToken('DECIMAL')== $LA41||$this->getToken('DOUBLE')== $LA41||$this->getToken('INTEGER_POSITIVE')== $LA41||$this->getToken('DECIMAL_POSITIVE')== $LA41||$this->getToken('DOUBLE_POSITIVE')== $LA41||$this->getToken('INTEGER_NEGATIVE')== $LA41||$this->getToken('DECIMAL_NEGATIVE')== $LA41||$this->getToken('DOUBLE_NEGATIVE')== $LA41||$this->getToken('STRING_LITERAL1')== $LA41||$this->getToken('STRING_LITERAL2')== $LA41||$this->getToken('STRING_LITERAL_LONG1')== $LA41||$this->getToken('STRING_LITERAL_LONG2')== $LA41||$this->getToken('BLANK_NODE_LABEL')== $LA41)
                {
                $alt41=1;
                }
            else if($this->getToken('OPEN_SQUARE_BRACE')== $LA41)
                {
                $LA41_2 = $this->input->LA(2);

                if ( ($LA41_2==$this->getToken('A')||$LA41_2==$this->getToken('IRI_REF')||$LA41_2==$this->getToken('PNAME_NS')||$LA41_2==$this->getToken('PNAME_LN')||($LA41_2>=$this->getToken('VAR1') && $LA41_2<=$this->getToken('VAR2'))) ) {
                    $alt41=2;
                }
                else if ( ($LA41_2==$this->getToken('WS')||$LA41_2==$this->getToken('CLOSE_SQUARE_BRACE')) ) {
                    $alt41=1;
                }
                else {
                    $nvae = new NoViableAltException("", 41, 2, $this->input);

                    throw $nvae;
                }
                }
            else if($this->getToken('OPEN_BRACE')== $LA41)
                {
                $LA41_3 = $this->input->LA(2);

                if ( (($LA41_3>=$this->getToken('TRUE') && $LA41_3<=$this->getToken('FALSE'))||$LA41_3==$this->getToken('IRI_REF')||$LA41_3==$this->getToken('PNAME_NS')||$LA41_3==$this->getToken('PNAME_LN')||($LA41_3>=$this->getToken('VAR1') && $LA41_3<=$this->getToken('VAR2'))||$LA41_3==$this->getToken('INTEGER')||$LA41_3==$this->getToken('DECIMAL')||$LA41_3==$this->getToken('DOUBLE')||($LA41_3>=$this->getToken('INTEGER_POSITIVE') && $LA41_3<=$this->getToken('DOUBLE_NEGATIVE'))||($LA41_3>=$this->getToken('STRING_LITERAL1') && $LA41_3<=$this->getToken('STRING_LITERAL_LONG2'))||$LA41_3==$this->getToken('BLANK_NODE_LABEL')||$LA41_3==$this->getToken('OPEN_BRACE')||$LA41_3==$this->getToken('OPEN_SQUARE_BRACE')) ) {
                    $alt41=2;
                }
                else if ( ($LA41_3==$this->getToken('WS')||$LA41_3==$this->getToken('CLOSE_BRACE')) ) {
                    $alt41=1;
                }
                else {
                    $nvae = new NoViableAltException("", 41, 3, $this->input);

                    throw $nvae;
                }
                }
            else{
                $nvae =
                    new NoViableAltException("", 41, 0, $this->input);

                throw $nvae;
            }

            switch ($alt41) {
                case 1 :
                    // Sparql10.g:215:7: varOrTerm propertyListNotEmpty 
                    {
                    $this->pushFollow(self::$FOLLOW_varOrTerm_in_triplesSameSubject1248);
                    $varOrTerm23=$this->varOrTerm();

                    $this->state->_fsp--;

                    $this->pushFollow(self::$FOLLOW_propertyListNotEmpty_in_triplesSameSubject1250);
                    $propertyListNotEmpty24=$this->propertyListNotEmpty();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_TriplesSameSubject($varOrTerm23, $propertyListNotEmpty24);

                    }
                    break;
                case 2 :
                    // Sparql10.g:216:7: triplesNode propertyList 
                    {
                    $this->pushFollow(self::$FOLLOW_triplesNode_in_triplesSameSubject1260);
                    $triplesNode25=$this->triplesNode();

                    $this->state->_fsp--;

                    $this->pushFollow(self::$FOLLOW_propertyList_in_triplesSameSubject1262);
                    $propertyList26=$this->propertyList();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_TriplesSameSubject($triplesNode25, $propertyList26);

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "triplesSameSubject"


    // $ANTLR start "propertyListNotEmpty"
    // Sparql10.g:220:1: propertyListNotEmpty returns [$value] : v1= verb ol1= objectList ( SEMICOLON (v2= verb ol2= objectList )? )* ; 
    public function propertyListNotEmpty(){
        $value = null;

        $v1 = null;

        $ol1 = null;

        $v2 = null;

        $ol2 = null;


        require_once 'Erfurt/Sparql/Query2/PropertyList.php';
        $value = new Erfurt_Sparql_Query2_PropertyList();
        try {
            // Sparql10.g:223:5: (v1= verb ol1= objectList ( SEMICOLON (v2= verb ol2= objectList )? )* ) 
            // Sparql10.g:223:7: v1= verb ol1= objectList ( SEMICOLON (v2= verb ol2= objectList )? )* 
            {
            $this->pushFollow(self::$FOLLOW_verb_in_propertyListNotEmpty1293);
            $v1=$this->verb();

            $this->state->_fsp--;

            $this->pushFollow(self::$FOLLOW_objectList_in_propertyListNotEmpty1297);
            $ol1=$this->objectList();

            $this->state->_fsp--;

              $value->addProperty($v1, $ol1);
            // Sparql10.g:224:9: ( SEMICOLON (v2= verb ol2= objectList )? )* 
            //loop43:
            do {
                $alt43=2;
                $LA43_0 = $this->input->LA(1);

                if ( ($LA43_0==$this->getToken('SEMICOLON')) ) {
                    $alt43=1;
                }


                switch ($alt43) {
            	case 1 :
            	    // Sparql10.g:224:11: SEMICOLON (v2= verb ol2= objectList )? 
            	    {
            	    $this->match($this->input,$this->getToken('SEMICOLON'),self::$FOLLOW_SEMICOLON_in_propertyListNotEmpty1311); 
            	    // Sparql10.g:224:21: (v2= verb ol2= objectList )? 
            	    $alt42=2;
            	    $LA42_0 = $this->input->LA(1);

            	    if ( ($LA42_0==$this->getToken('A')||$LA42_0==$this->getToken('IRI_REF')||$LA42_0==$this->getToken('PNAME_NS')||$LA42_0==$this->getToken('PNAME_LN')||($LA42_0>=$this->getToken('VAR1') && $LA42_0<=$this->getToken('VAR2'))) ) {
            	        $alt42=1;
            	    }
            	    switch ($alt42) {
            	        case 1 :
            	            // Sparql10.g:224:23: v2= verb ol2= objectList 
            	            {
            	            $this->pushFollow(self::$FOLLOW_verb_in_propertyListNotEmpty1317);
            	            $v2=$this->verb();

            	            $this->state->_fsp--;

            	            $this->pushFollow(self::$FOLLOW_objectList_in_propertyListNotEmpty1321);
            	            $ol2=$this->objectList();

            	            $this->state->_fsp--;

            	              $value->addProperty($v2, $ol2);

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break 2;//loop43;
                }
            } while (true);


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "propertyListNotEmpty"


    // $ANTLR start "propertyList"
    // Sparql10.g:228:1: propertyList returns [$value] : ( propertyListNotEmpty )? ; 
    public function propertyList(){
        $value = null;

        $propertyListNotEmpty27 = null;


        require_once 'Erfurt/Sparql/Query2/PropertyList.php';
        $v=null;
        try {
            // Sparql10.g:232:5: ( ( propertyListNotEmpty )? ) 
            // Sparql10.g:232:7: ( propertyListNotEmpty )? 
            {
            // Sparql10.g:232:7: ( propertyListNotEmpty )? 
            $alt44=2;
            $LA44_0 = $this->input->LA(1);

            if ( ($LA44_0==$this->getToken('A')||$LA44_0==$this->getToken('IRI_REF')||$LA44_0==$this->getToken('PNAME_NS')||$LA44_0==$this->getToken('PNAME_LN')||($LA44_0>=$this->getToken('VAR1') && $LA44_0<=$this->getToken('VAR2'))) ) {
                $alt44=1;
            }
            switch ($alt44) {
                case 1 :
                    // Sparql10.g:232:8: propertyListNotEmpty 
                    {
                    $this->pushFollow(self::$FOLLOW_propertyListNotEmpty_in_propertyList1360);
                    $propertyListNotEmpty27=$this->propertyListNotEmpty();

                    $this->state->_fsp--;

                      $v = $propertyListNotEmpty27;

                    }
                    break;

            }


            }

              $value=$v?$v:new Erfurt_Sparql_Query2_PropertyList();
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "propertyList"


    // $ANTLR start "objectList"
    // Sparql10.g:236:1: objectList returns [$value] : o1= object ( COMMA o2= object )* ; 
    public function objectList(){
        $value = null;

        $o1 = null;

        $o2 = null;


        require_once 'Erfurt/Sparql/Query2/ObjectList.php';
        try {
            // Sparql10.g:238:5: (o1= object ( COMMA o2= object )* ) 
            // Sparql10.g:238:7: o1= object ( COMMA o2= object )* 
            {
            $this->pushFollow(self::$FOLLOW_object_in_objectList1393);
            $o1=$this->object();

            $this->state->_fsp--;

              $value = new Erfurt_Sparql_Query2_ObjectList(array($o1));
            // Sparql10.g:239:9: ( COMMA o2= object )* 
            //loop45:
            do {
                $alt45=2;
                $LA45_0 = $this->input->LA(1);

                if ( ($LA45_0==$this->getToken('COMMA')) ) {
                    $alt45=1;
                }


                switch ($alt45) {
            	case 1 :
            	    // Sparql10.g:239:11: COMMA o2= object 
            	    {
            	    $this->match($this->input,$this->getToken('COMMA'),self::$FOLLOW_COMMA_in_objectList1407); 
            	    $this->pushFollow(self::$FOLLOW_object_in_objectList1411);
            	    $o2=$this->object();

            	    $this->state->_fsp--;

            	      $value -> addElement($o2);

            	    }
            	    break;

            	default :
            	    break 2;//loop45;
                }
            } while (true);


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "objectList"


    // $ANTLR start "object"
    // Sparql10.g:243:1: object returns [$value] : graphNode ; 
    public function object(){
        $value = null;

        $graphNode28 = null;


        try {
            // Sparql10.g:244:5: ( graphNode ) 
            // Sparql10.g:244:7: graphNode 
            {
            $this->pushFollow(self::$FOLLOW_graphNode_in_object1439);
            $graphNode28=$this->graphNode();

            $this->state->_fsp--;

              $value = $graphNode28;

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "object"


    // $ANTLR start "verb"
    // Sparql10.g:248:1: verb returns [$value] : ( varOrIRIref | A ); 
    public function verb(){
        $value = null;

        $varOrIRIref29 = null;


        try {
            // Sparql10.g:249:5: ( varOrIRIref | A ) 
            $alt46=2;
            $LA46_0 = $this->input->LA(1);

            if ( ($LA46_0==$this->getToken('IRI_REF')||$LA46_0==$this->getToken('PNAME_NS')||$LA46_0==$this->getToken('PNAME_LN')||($LA46_0>=$this->getToken('VAR1') && $LA46_0<=$this->getToken('VAR2'))) ) {
                $alt46=1;
            }
            else if ( ($LA46_0==$this->getToken('A')) ) {
                $alt46=2;
            }
            else {
                $nvae = new NoViableAltException("", 46, 0, $this->input);

                throw $nvae;
            }
            switch ($alt46) {
                case 1 :
                    // Sparql10.g:249:7: varOrIRIref 
                    {
                    $this->pushFollow(self::$FOLLOW_varOrIRIref_in_verb1464);
                    $varOrIRIref29=$this->varOrIRIref();

                    $this->state->_fsp--;

                      $value = $varOrIRIref29;

                    }
                    break;
                case 2 :
                    // Sparql10.g:250:7: A 
                    {
                    $this->match($this->input,$this->getToken('A'),self::$FOLLOW_A_in_verb1474); 

                        require_once('Erfurt/Sparql/Query2/A.php');
                        $value = new Erfurt_Sparql_Query2_A();

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "verb"


    // $ANTLR start "triplesNode"
    // Sparql10.g:256:1: triplesNode returns [$value] : ( collection | blankNodePropertyList ); 
    public function triplesNode(){
        $value = null;

        $collection30 = null;

        $blankNodePropertyList31 = null;


        try {
            // Sparql10.g:257:5: ( collection | blankNodePropertyList ) 
            $alt47=2;
            $LA47_0 = $this->input->LA(1);

            if ( ($LA47_0==$this->getToken('OPEN_BRACE')) ) {
                $alt47=1;
            }
            else if ( ($LA47_0==$this->getToken('OPEN_SQUARE_BRACE')) ) {
                $alt47=2;
            }
            else {
                $nvae = new NoViableAltException("", 47, 0, $this->input);

                throw $nvae;
            }
            switch ($alt47) {
                case 1 :
                    // Sparql10.g:257:7: collection 
                    {
                    $this->pushFollow(self::$FOLLOW_collection_in_triplesNode1499);
                    $collection30=$this->collection();

                    $this->state->_fsp--;

                      $value = $collection30;

                    }
                    break;
                case 2 :
                    // Sparql10.g:258:7: blankNodePropertyList 
                    {
                    $this->pushFollow(self::$FOLLOW_blankNodePropertyList_in_triplesNode1509);
                    $blankNodePropertyList31=$this->blankNodePropertyList();

                    $this->state->_fsp--;

                      $value = $blankNodePropertyList31;

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "triplesNode"


    // $ANTLR start "blankNodePropertyList"
    // Sparql10.g:262:1: blankNodePropertyList returns [$value] : OPEN_SQUARE_BRACE propertyListNotEmpty CLOSE_SQUARE_BRACE ; 
    public function blankNodePropertyList(){
        $value = null;

        $propertyListNotEmpty32 = null;


        require_once 'Erfurt/Sparql/Query2/BlankNodePropertyList.php';
        try {
            // Sparql10.g:264:5: ( OPEN_SQUARE_BRACE propertyListNotEmpty CLOSE_SQUARE_BRACE ) 
            // Sparql10.g:264:7: OPEN_SQUARE_BRACE propertyListNotEmpty CLOSE_SQUARE_BRACE 
            {
            $this->match($this->input,$this->getToken('OPEN_SQUARE_BRACE'),self::$FOLLOW_OPEN_SQUARE_BRACE_in_blankNodePropertyList1538); 
            $this->pushFollow(self::$FOLLOW_propertyListNotEmpty_in_blankNodePropertyList1540);
            $propertyListNotEmpty32=$this->propertyListNotEmpty();

            $this->state->_fsp--;

            $this->match($this->input,$this->getToken('CLOSE_SQUARE_BRACE'),self::$FOLLOW_CLOSE_SQUARE_BRACE_in_blankNodePropertyList1542); 
              $value = new Erfurt_Sparql_Query2_BlankNodePropertyList($propertyListNotEmpty32);

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "blankNodePropertyList"


    // $ANTLR start "collection"
    // Sparql10.g:268:1: collection returns [$value] : OPEN_BRACE ( graphNode )+ CLOSE_BRACE ; 
    public function collection(){
        $value = null;

        $graphNode33 = null;


        require_once 'Erfurt/Sparql/Query2/Collection.php';
        $list=array();
        try {
            // Sparql10.g:272:5: ( OPEN_BRACE ( graphNode )+ CLOSE_BRACE ) 
            // Sparql10.g:272:7: OPEN_BRACE ( graphNode )+ CLOSE_BRACE 
            {
            $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_collection1575); 
            // Sparql10.g:272:18: ( graphNode )+ 
            $cnt48=0;
            //loop48:
            do {
                $alt48=2;
                $LA48_0 = $this->input->LA(1);

                if ( (($LA48_0>=$this->getToken('TRUE') && $LA48_0<=$this->getToken('FALSE'))||$LA48_0==$this->getToken('IRI_REF')||$LA48_0==$this->getToken('PNAME_NS')||$LA48_0==$this->getToken('PNAME_LN')||($LA48_0>=$this->getToken('VAR1') && $LA48_0<=$this->getToken('VAR2'))||$LA48_0==$this->getToken('INTEGER')||$LA48_0==$this->getToken('DECIMAL')||$LA48_0==$this->getToken('DOUBLE')||($LA48_0>=$this->getToken('INTEGER_POSITIVE') && $LA48_0<=$this->getToken('DOUBLE_NEGATIVE'))||($LA48_0>=$this->getToken('STRING_LITERAL1') && $LA48_0<=$this->getToken('STRING_LITERAL_LONG2'))||$LA48_0==$this->getToken('BLANK_NODE_LABEL')||$LA48_0==$this->getToken('OPEN_BRACE')||$LA48_0==$this->getToken('OPEN_SQUARE_BRACE')) ) {
                    $alt48=1;
                }


                switch ($alt48) {
            	case 1 :
            	    // Sparql10.g:272:19: graphNode 
            	    {
            	    $this->pushFollow(self::$FOLLOW_graphNode_in_collection1578);
            	    $graphNode33=$this->graphNode();

            	    $this->state->_fsp--;

            	       $list []= $graphNode33;

            	    }
            	    break;

            	default :
            	    if ( $cnt48 >= 1 ) break 2;//loop48;
                        $eee =
                            new EarlyExitException(48, $this->input);
                        throw $eee;
                }
                $cnt48++;
            } while (true);

            $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_collection1584); 

            }

              $value = new Erfurt_Sparql_Query2_Collection($list);
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "collection"


    // $ANTLR start "graphNode"
    // Sparql10.g:276:1: graphNode returns [$value] : ( varOrTerm | triplesNode ); 
    public function graphNode(){
        $value = null;

        $varOrTerm34 = null;

        $triplesNode35 = null;


        try {
            // Sparql10.g:277:5: ( varOrTerm | triplesNode ) 
            $alt49=2;
            $LA49 = $this->input->LA(1);
            if($this->getToken('TRUE')== $LA49||$this->getToken('FALSE')== $LA49||$this->getToken('IRI_REF')== $LA49||$this->getToken('PNAME_NS')== $LA49||$this->getToken('PNAME_LN')== $LA49||$this->getToken('VAR1')== $LA49||$this->getToken('VAR2')== $LA49||$this->getToken('INTEGER')== $LA49||$this->getToken('DECIMAL')== $LA49||$this->getToken('DOUBLE')== $LA49||$this->getToken('INTEGER_POSITIVE')== $LA49||$this->getToken('DECIMAL_POSITIVE')== $LA49||$this->getToken('DOUBLE_POSITIVE')== $LA49||$this->getToken('INTEGER_NEGATIVE')== $LA49||$this->getToken('DECIMAL_NEGATIVE')== $LA49||$this->getToken('DOUBLE_NEGATIVE')== $LA49||$this->getToken('STRING_LITERAL1')== $LA49||$this->getToken('STRING_LITERAL2')== $LA49||$this->getToken('STRING_LITERAL_LONG1')== $LA49||$this->getToken('STRING_LITERAL_LONG2')== $LA49||$this->getToken('BLANK_NODE_LABEL')== $LA49)
                {
                $alt49=1;
                }
            else if($this->getToken('OPEN_SQUARE_BRACE')== $LA49)
                {
                $LA49_2 = $this->input->LA(2);

                if ( ($LA49_2==$this->getToken('WS')||$LA49_2==$this->getToken('CLOSE_SQUARE_BRACE')) ) {
                    $alt49=1;
                }
                else if ( ($LA49_2==$this->getToken('A')||$LA49_2==$this->getToken('IRI_REF')||$LA49_2==$this->getToken('PNAME_NS')||$LA49_2==$this->getToken('PNAME_LN')||($LA49_2>=$this->getToken('VAR1') && $LA49_2<=$this->getToken('VAR2'))) ) {
                    $alt49=2;
                }
                else {
                    $nvae = new NoViableAltException("", 49, 2, $this->input);

                    throw $nvae;
                }
                }
            else if($this->getToken('OPEN_BRACE')== $LA49)
                {
                $LA49_3 = $this->input->LA(2);

                if ( ($LA49_3==$this->getToken('WS')||$LA49_3==$this->getToken('CLOSE_BRACE')) ) {
                    $alt49=1;
                }
                else if ( (($LA49_3>=$this->getToken('TRUE') && $LA49_3<=$this->getToken('FALSE'))||$LA49_3==$this->getToken('IRI_REF')||$LA49_3==$this->getToken('PNAME_NS')||$LA49_3==$this->getToken('PNAME_LN')||($LA49_3>=$this->getToken('VAR1') && $LA49_3<=$this->getToken('VAR2'))||$LA49_3==$this->getToken('INTEGER')||$LA49_3==$this->getToken('DECIMAL')||$LA49_3==$this->getToken('DOUBLE')||($LA49_3>=$this->getToken('INTEGER_POSITIVE') && $LA49_3<=$this->getToken('DOUBLE_NEGATIVE'))||($LA49_3>=$this->getToken('STRING_LITERAL1') && $LA49_3<=$this->getToken('STRING_LITERAL_LONG2'))||$LA49_3==$this->getToken('BLANK_NODE_LABEL')||$LA49_3==$this->getToken('OPEN_BRACE')||$LA49_3==$this->getToken('OPEN_SQUARE_BRACE')) ) {
                    $alt49=2;
                }
                else {
                    $nvae = new NoViableAltException("", 49, 3, $this->input);

                    throw $nvae;
                }
                }
            else{
                $nvae =
                    new NoViableAltException("", 49, 0, $this->input);

                throw $nvae;
            }

            switch ($alt49) {
                case 1 :
                    // Sparql10.g:277:7: varOrTerm 
                    {
                    $this->pushFollow(self::$FOLLOW_varOrTerm_in_graphNode1607);
                    $varOrTerm34=$this->varOrTerm();

                    $this->state->_fsp--;

                      $value=$varOrTerm34;

                    }
                    break;
                case 2 :
                    // Sparql10.g:278:7: triplesNode 
                    {
                    $this->pushFollow(self::$FOLLOW_triplesNode_in_graphNode1617);
                    $triplesNode35=$this->triplesNode();

                    $this->state->_fsp--;

                      $value=$triplesNode35;

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "graphNode"


    // $ANTLR start "varOrTerm"
    // Sparql10.g:282:1: varOrTerm returns [$value] : ( variable | graphTerm ); 
    public function varOrTerm(){
        $value = null;

        $variable36 = null;

        $graphTerm37 = null;


        try {
            // Sparql10.g:283:5: ( variable | graphTerm ) 
            $alt50=2;
            $LA50_0 = $this->input->LA(1);

            if ( (($LA50_0>=$this->getToken('VAR1') && $LA50_0<=$this->getToken('VAR2'))) ) {
                $alt50=1;
            }
            else if ( (($LA50_0>=$this->getToken('TRUE') && $LA50_0<=$this->getToken('FALSE'))||$LA50_0==$this->getToken('IRI_REF')||$LA50_0==$this->getToken('PNAME_NS')||$LA50_0==$this->getToken('PNAME_LN')||$LA50_0==$this->getToken('INTEGER')||$LA50_0==$this->getToken('DECIMAL')||$LA50_0==$this->getToken('DOUBLE')||($LA50_0>=$this->getToken('INTEGER_POSITIVE') && $LA50_0<=$this->getToken('DOUBLE_NEGATIVE'))||($LA50_0>=$this->getToken('STRING_LITERAL1') && $LA50_0<=$this->getToken('STRING_LITERAL_LONG2'))||$LA50_0==$this->getToken('BLANK_NODE_LABEL')||$LA50_0==$this->getToken('OPEN_BRACE')||$LA50_0==$this->getToken('OPEN_SQUARE_BRACE')) ) {
                $alt50=2;
            }
            else {
                $nvae = new NoViableAltException("", 50, 0, $this->input);

                throw $nvae;
            }
            switch ($alt50) {
                case 1 :
                    // Sparql10.g:283:7: variable 
                    {
                    $this->pushFollow(self::$FOLLOW_variable_in_varOrTerm1642);
                    $variable36=$this->variable();

                    $this->state->_fsp--;

                      $value = $variable36;

                    }
                    break;
                case 2 :
                    // Sparql10.g:284:7: graphTerm 
                    {
                    $this->pushFollow(self::$FOLLOW_graphTerm_in_varOrTerm1652);
                    $graphTerm37=$this->graphTerm();

                    $this->state->_fsp--;

                      $value = $graphTerm37;

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "varOrTerm"


    // $ANTLR start "varOrIRIref"
    // Sparql10.g:288:1: varOrIRIref returns [$value] : ( variable | iriRef ); 
    public function varOrIRIref(){
        $value = null;

        $variable38 = null;

        $iriRef39 = null;


        try {
            // Sparql10.g:289:5: ( variable | iriRef ) 
            $alt51=2;
            $LA51_0 = $this->input->LA(1);

            if ( (($LA51_0>=$this->getToken('VAR1') && $LA51_0<=$this->getToken('VAR2'))) ) {
                $alt51=1;
            }
            else if ( ($LA51_0==$this->getToken('IRI_REF')||$LA51_0==$this->getToken('PNAME_NS')||$LA51_0==$this->getToken('PNAME_LN')) ) {
                $alt51=2;
            }
            else {
                $nvae = new NoViableAltException("", 51, 0, $this->input);

                throw $nvae;
            }
            switch ($alt51) {
                case 1 :
                    // Sparql10.g:289:7: variable 
                    {
                    $this->pushFollow(self::$FOLLOW_variable_in_varOrIRIref1677);
                    $variable38=$this->variable();

                    $this->state->_fsp--;

                      $value = $variable38;

                    }
                    break;
                case 2 :
                    // Sparql10.g:290:7: iriRef 
                    {
                    $this->pushFollow(self::$FOLLOW_iriRef_in_varOrIRIref1687);
                    $iriRef39=$this->iriRef();

                    $this->state->_fsp--;

                      $value = $iriRef39;

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "varOrIRIref"


    // $ANTLR start "variable"
    // Sparql10.g:294:1: variable returns [$value] : (v= VAR1 | v= VAR2 ); 
    public function variable(){
        $value = null;

        $v=null;

        require_once('Erfurt/Sparql/Query2/Var.php');
        try {
            // Sparql10.g:297:5: (v= VAR1 | v= VAR2 ) 
            $alt52=2;
            $LA52_0 = $this->input->LA(1);

            if ( ($LA52_0==$this->getToken('VAR1')) ) {
                $alt52=1;
            }
            else if ( ($LA52_0==$this->getToken('VAR2')) ) {
                $alt52=2;
            }
            else {
                $nvae = new NoViableAltException("", 52, 0, $this->input);

                throw $nvae;
            }
            switch ($alt52) {
                case 1 :
                    // Sparql10.g:297:7: v= VAR1 
                    {
                    $v=$this->match($this->input,$this->getToken('VAR1'),self::$FOLLOW_VAR1_in_variable1722); 
                      $vartype = "?";

                    }
                    break;
                case 2 :
                    // Sparql10.g:298:7: v= VAR2 
                    {
                    $v=$this->match($this->input,$this->getToken('VAR2'),self::$FOLLOW_VAR2_in_variable1734); 
                      $vartype = "$";

                    }
                    break;

            }
              $value = new Erfurt_Sparql_Query2_Var(($v!=null?$v->getText():null)); $value->setVarLabelType($vartype);
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "variable"


    // $ANTLR start "graphTerm"
    // Sparql10.g:302:1: graphTerm returns [$value] : (v= iriRef | v= rdfLiteral | v= numericLiteral | v= booleanLiteral | v= blankNode | OPEN_BRACE ( WS )* CLOSE_BRACE ); 
    public function graphTerm(){
        $value = null;

        $v = null;


        require_once('Erfurt/Sparql/Query2/Nil.php');
        try {
            // Sparql10.g:304:5: (v= iriRef | v= rdfLiteral | v= numericLiteral | v= booleanLiteral | v= blankNode | OPEN_BRACE ( WS )* CLOSE_BRACE ) 
            $alt54=6;
            $LA54 = $this->input->LA(1);
            if($this->getToken('IRI_REF')== $LA54||$this->getToken('PNAME_NS')== $LA54||$this->getToken('PNAME_LN')== $LA54)
                {
                $alt54=1;
                }
            else if($this->getToken('STRING_LITERAL1')== $LA54||$this->getToken('STRING_LITERAL2')== $LA54||$this->getToken('STRING_LITERAL_LONG1')== $LA54||$this->getToken('STRING_LITERAL_LONG2')== $LA54)
                {
                $alt54=2;
                }
            else if($this->getToken('INTEGER')== $LA54||$this->getToken('DECIMAL')== $LA54||$this->getToken('DOUBLE')== $LA54||$this->getToken('INTEGER_POSITIVE')== $LA54||$this->getToken('DECIMAL_POSITIVE')== $LA54||$this->getToken('DOUBLE_POSITIVE')== $LA54||$this->getToken('INTEGER_NEGATIVE')== $LA54||$this->getToken('DECIMAL_NEGATIVE')== $LA54||$this->getToken('DOUBLE_NEGATIVE')== $LA54)
                {
                $alt54=3;
                }
            else if($this->getToken('TRUE')== $LA54||$this->getToken('FALSE')== $LA54)
                {
                $alt54=4;
                }
            else if($this->getToken('BLANK_NODE_LABEL')== $LA54||$this->getToken('OPEN_SQUARE_BRACE')== $LA54)
                {
                $alt54=5;
                }
            else if($this->getToken('OPEN_BRACE')== $LA54)
                {
                $alt54=6;
                }
            else{
                $nvae =
                    new NoViableAltException("", 54, 0, $this->input);

                throw $nvae;
            }

            switch ($alt54) {
                case 1 :
                    // Sparql10.g:304:7: v= iriRef 
                    {
                    $this->pushFollow(self::$FOLLOW_iriRef_in_graphTerm1765);
                    $v=$this->iriRef();

                    $this->state->_fsp--;

                      $value=$v;

                    }
                    break;
                case 2 :
                    // Sparql10.g:305:7: v= rdfLiteral 
                    {
                    $this->pushFollow(self::$FOLLOW_rdfLiteral_in_graphTerm1777);
                    $v=$this->rdfLiteral();

                    $this->state->_fsp--;

                      $value=$v;

                    }
                    break;
                case 3 :
                    // Sparql10.g:306:7: v= numericLiteral 
                    {
                    $this->pushFollow(self::$FOLLOW_numericLiteral_in_graphTerm1789);
                    $v=$this->numericLiteral();

                    $this->state->_fsp--;

                      $value=$v;

                    }
                    break;
                case 4 :
                    // Sparql10.g:307:7: v= booleanLiteral 
                    {
                    $this->pushFollow(self::$FOLLOW_booleanLiteral_in_graphTerm1801);
                    $v=$this->booleanLiteral();

                    $this->state->_fsp--;

                      $value=$v;

                    }
                    break;
                case 5 :
                    // Sparql10.g:308:7: v= blankNode 
                    {
                    $this->pushFollow(self::$FOLLOW_blankNode_in_graphTerm1813);
                    $v=$this->blankNode();

                    $this->state->_fsp--;

                      $value=$v;

                    }
                    break;
                case 6 :
                    // Sparql10.g:309:7: OPEN_BRACE ( WS )* CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_graphTerm1823); 
                    // Sparql10.g:309:18: ( WS )* 
                    //loop53:
                    do {
                        $alt53=2;
                        $LA53_0 = $this->input->LA(1);

                        if ( ($LA53_0==$this->getToken('WS')) ) {
                            $alt53=1;
                        }


                        switch ($alt53) {
                    	case 1 :
                    	    // Sparql10.g:309:18: WS 
                    	    {
                    	    $this->match($this->input,$this->getToken('WS'),self::$FOLLOW_WS_in_graphTerm1825); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop53;
                        }
                    } while (true);

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_graphTerm1828); 
                      $value=new Erfurt_Sparql_Query2_Nil();

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "graphTerm"


    // $ANTLR start "expression"
    // Sparql10.g:313:1: expression returns [$value] : conditionalOrExpression ; 
    public function expression(){
        $value = null;

        $conditionalOrExpression40 = null;


        try {
            // Sparql10.g:314:5: ( conditionalOrExpression ) 
            // Sparql10.g:314:7: conditionalOrExpression 
            {
            $this->pushFollow(self::$FOLLOW_conditionalOrExpression_in_expression1853);
            $conditionalOrExpression40=$this->conditionalOrExpression();

            $this->state->_fsp--;

              $value = $conditionalOrExpression40;

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "expression"


    // $ANTLR start "conditionalOrExpression"
    // Sparql10.g:318:1: conditionalOrExpression returns [$value] : c1= conditionalAndExpression ( OR c2= conditionalAndExpression )* ; 
    public function conditionalOrExpression(){
        $value = null;

        $c1 = null;

        $c2 = null;


        $v = array();
        try {
            // Sparql10.g:321:5: (c1= conditionalAndExpression ( OR c2= conditionalAndExpression )* ) 
            // Sparql10.g:321:7: c1= conditionalAndExpression ( OR c2= conditionalAndExpression )* 
            {
            $this->pushFollow(self::$FOLLOW_conditionalAndExpression_in_conditionalOrExpression1888);
            $c1=$this->conditionalAndExpression();

            $this->state->_fsp--;

              $v[]=$c1;
            // Sparql10.g:322:5: ( OR c2= conditionalAndExpression )* 
            //loop55:
            do {
                $alt55=2;
                $LA55_0 = $this->input->LA(1);

                if ( ($LA55_0==$this->getToken('OR')) ) {
                    $alt55=1;
                }


                switch ($alt55) {
            	case 1 :
            	    // Sparql10.g:322:7: OR c2= conditionalAndExpression 
            	    {
            	    $this->match($this->input,$this->getToken('OR'),self::$FOLLOW_OR_in_conditionalOrExpression1898); 
            	    $this->pushFollow(self::$FOLLOW_conditionalAndExpression_in_conditionalOrExpression1902);
            	    $c2=$this->conditionalAndExpression();

            	    $this->state->_fsp--;

            	      $v[]=$c2;

            	    }
            	    break;

            	default :
            	    break 2;//loop55;
                }
            } while (true);


            }

              $value =  new Erfurt_Sparql_Query2_ConditionalOrExpression($v);
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "conditionalOrExpression"


    // $ANTLR start "conditionalAndExpression"
    // Sparql10.g:326:1: conditionalAndExpression returns [$value] : v1= valueLogical ( AND v2= valueLogical )* ; 
    public function conditionalAndExpression(){
        $value = null;

        $v1 = null;

        $v2 = null;


        $v = array();
        try {
            // Sparql10.g:329:5: (v1= valueLogical ( AND v2= valueLogical )* ) 
            // Sparql10.g:329:7: v1= valueLogical ( AND v2= valueLogical )* 
            {
            $this->pushFollow(self::$FOLLOW_valueLogical_in_conditionalAndExpression1939);
            $v1=$this->valueLogical();

            $this->state->_fsp--;

              $v[] = $v1;
            // Sparql10.g:329:44: ( AND v2= valueLogical )* 
            //loop56:
            do {
                $alt56=2;
                $LA56_0 = $this->input->LA(1);

                if ( ($LA56_0==$this->getToken('AND')) ) {
                    $alt56=1;
                }


                switch ($alt56) {
            	case 1 :
            	    // Sparql10.g:329:46: AND v2= valueLogical 
            	    {
            	    $this->match($this->input,$this->getToken('AND'),self::$FOLLOW_AND_in_conditionalAndExpression1945); 
            	    $this->pushFollow(self::$FOLLOW_valueLogical_in_conditionalAndExpression1949);
            	    $v2=$this->valueLogical();

            	    $this->state->_fsp--;

            	      $v[]=$v2;

            	    }
            	    break;

            	default :
            	    break 2;//loop56;
                }
            } while (true);


            }

              $value = new Erfurt_Sparql_Query2_ConditionalAndExpression($v);
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "conditionalAndExpression"


    // $ANTLR start "valueLogical"
    // Sparql10.g:333:1: valueLogical returns [$value] : relationalExpression ; 
    public function valueLogical(){
        $value = null;

        $relationalExpression41 = null;


        try {
            // Sparql10.g:334:5: ( relationalExpression ) 
            // Sparql10.g:334:7: relationalExpression 
            {
            $this->pushFollow(self::$FOLLOW_relationalExpression_in_valueLogical1977);
            $relationalExpression41=$this->relationalExpression();

            $this->state->_fsp--;

              $value = $relationalExpression41;

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "valueLogical"


    // $ANTLR start "relationalExpression"
    // Sparql10.g:338:1: relationalExpression returns [$value] : n1= numericExpression ( EQUAL n2= numericExpression | NOT_EQUAL n2= numericExpression | LESS n2= numericExpression | GREATER n2= numericExpression | LESS_EQUAL n2= numericExpression | GREATER_EQUAL n2= numericExpression )? ; 
    public function relationalExpression(){
        $value = null;

        $n1 = null;

        $n2 = null;


        try {
            // Sparql10.g:339:5: (n1= numericExpression ( EQUAL n2= numericExpression | NOT_EQUAL n2= numericExpression | LESS n2= numericExpression | GREATER n2= numericExpression | LESS_EQUAL n2= numericExpression | GREATER_EQUAL n2= numericExpression )? ) 
            // Sparql10.g:339:7: n1= numericExpression ( EQUAL n2= numericExpression | NOT_EQUAL n2= numericExpression | LESS n2= numericExpression | GREATER n2= numericExpression | LESS_EQUAL n2= numericExpression | GREATER_EQUAL n2= numericExpression )? 
            {
            $this->pushFollow(self::$FOLLOW_numericExpression_in_relationalExpression2004);
            $n1=$this->numericExpression();

            $this->state->_fsp--;

              $value = $n1;
            // Sparql10.g:340:9: ( EQUAL n2= numericExpression | NOT_EQUAL n2= numericExpression | LESS n2= numericExpression | GREATER n2= numericExpression | LESS_EQUAL n2= numericExpression | GREATER_EQUAL n2= numericExpression )? 
            $alt57=7;
            $LA57 = $this->input->LA(1);
            if($this->getToken('EQUAL')== $LA57)
                {
                $alt57=1;
                }
            else if($this->getToken('NOT_EQUAL')== $LA57)
                {
                $alt57=2;
                }
            else if($this->getToken('LESS')== $LA57)
                {
                $alt57=3;
                }
            else if($this->getToken('GREATER')== $LA57)
                {
                $alt57=4;
                }
            else if($this->getToken('LESS_EQUAL')== $LA57)
                {
                $alt57=5;
                }
            else if($this->getToken('GREATER_EQUAL')== $LA57)
                {
                $alt57=6;
                }

            switch ($alt57) {
                case 1 :
                    // Sparql10.g:340:11: EQUAL n2= numericExpression 
                    {
                    $this->match($this->input,$this->getToken('EQUAL'),self::$FOLLOW_EQUAL_in_relationalExpression2018); 
                    $this->pushFollow(self::$FOLLOW_numericExpression_in_relationalExpression2022);
                    $n2=$this->numericExpression();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_Equals($n1, $n2);

                    }
                    break;
                case 2 :
                    // Sparql10.g:341:11: NOT_EQUAL n2= numericExpression 
                    {
                    $this->match($this->input,$this->getToken('NOT_EQUAL'),self::$FOLLOW_NOT_EQUAL_in_relationalExpression2036); 
                    $this->pushFollow(self::$FOLLOW_numericExpression_in_relationalExpression2040);
                    $n2=$this->numericExpression();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_NotEquals($n1, $n2);

                    }
                    break;
                case 3 :
                    // Sparql10.g:342:11: LESS n2= numericExpression 
                    {
                    $this->match($this->input,$this->getToken('LESS'),self::$FOLLOW_LESS_in_relationalExpression2054); 
                    $this->pushFollow(self::$FOLLOW_numericExpression_in_relationalExpression2058);
                    $n2=$this->numericExpression();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_Smaller($n1, $n2);

                    }
                    break;
                case 4 :
                    // Sparql10.g:343:11: GREATER n2= numericExpression 
                    {
                    $this->match($this->input,$this->getToken('GREATER'),self::$FOLLOW_GREATER_in_relationalExpression2072); 
                    $this->pushFollow(self::$FOLLOW_numericExpression_in_relationalExpression2076);
                    $n2=$this->numericExpression();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_Larger($n1, $n2);

                    }
                    break;
                case 5 :
                    // Sparql10.g:344:11: LESS_EQUAL n2= numericExpression 
                    {
                    $this->match($this->input,$this->getToken('LESS_EQUAL'),self::$FOLLOW_LESS_EQUAL_in_relationalExpression2090); 
                    $this->pushFollow(self::$FOLLOW_numericExpression_in_relationalExpression2094);
                    $n2=$this->numericExpression();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_SmallerEqual($n1, $n2);

                    }
                    break;
                case 6 :
                    // Sparql10.g:345:11: GREATER_EQUAL n2= numericExpression 
                    {
                    $this->match($this->input,$this->getToken('GREATER_EQUAL'),self::$FOLLOW_GREATER_EQUAL_in_relationalExpression2108); 
                    $this->pushFollow(self::$FOLLOW_numericExpression_in_relationalExpression2112);
                    $n2=$this->numericExpression();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_LargerEqual($n1, $n2);

                    }
                    break;

            }


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "relationalExpression"


    // $ANTLR start "numericExpression"
    // Sparql10.g:350:1: numericExpression returns [$value] : additiveExpression ; 
    public function numericExpression(){
        $value = null;

        $additiveExpression42 = null;


        try {
            // Sparql10.g:351:5: ( additiveExpression ) 
            // Sparql10.g:351:7: additiveExpression 
            {
            $this->pushFollow(self::$FOLLOW_additiveExpression_in_numericExpression2147);
            $additiveExpression42=$this->additiveExpression();

            $this->state->_fsp--;

              $value = $additiveExpression42;

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "numericExpression"


    // $ANTLR start "additiveExpression"
    // Sparql10.g:355:1: additiveExpression returns [$value] : m1= multiplicativeExpression ( (op= PLUS m2= multiplicativeExpression | op= MINUS m2= multiplicativeExpression | n= numericLiteralPositive | n= numericLiteralNegative ) )* ; 
    public function additiveExpression(){
        $value = null;

        $op=null;
        $m1 = null;

        $m2 = null;

        $n = null;


        $value = new Erfurt_Sparql_Query2_AdditiveExpression(); $op=null; $v2=null;
        try {
            // Sparql10.g:357:5: (m1= multiplicativeExpression ( (op= PLUS m2= multiplicativeExpression | op= MINUS m2= multiplicativeExpression | n= numericLiteralPositive | n= numericLiteralNegative ) )* ) 
            // Sparql10.g:357:7: m1= multiplicativeExpression ( (op= PLUS m2= multiplicativeExpression | op= MINUS m2= multiplicativeExpression | n= numericLiteralPositive | n= numericLiteralNegative ) )* 
            {
            $this->pushFollow(self::$FOLLOW_multiplicativeExpression_in_additiveExpression2178);
            $m1=$this->multiplicativeExpression();

            $this->state->_fsp--;

              $value->addElement('+', $m1);
            // Sparql10.g:358:9: ( (op= PLUS m2= multiplicativeExpression | op= MINUS m2= multiplicativeExpression | n= numericLiteralPositive | n= numericLiteralNegative ) )* 
            //loop59:
            do {
                $alt59=2;
                $LA59_0 = $this->input->LA(1);

                if ( ($LA59_0==$this->getToken('MINUS')||($LA59_0>=$this->getToken('PLUS') && $LA59_0<=$this->getToken('DOUBLE_NEGATIVE'))) ) {
                    $alt59=1;
                }


                switch ($alt59) {
            	case 1 :
            	    // Sparql10.g:358:10: (op= PLUS m2= multiplicativeExpression | op= MINUS m2= multiplicativeExpression | n= numericLiteralPositive | n= numericLiteralNegative ) 
            	    {
            	    // Sparql10.g:358:10: (op= PLUS m2= multiplicativeExpression | op= MINUS m2= multiplicativeExpression | n= numericLiteralPositive | n= numericLiteralNegative ) 
            	    $alt58=4;
            	    $LA58 = $this->input->LA(1);
            	    if($this->getToken('PLUS')== $LA58)
            	        {
            	        $alt58=1;
            	        }
            	    else if($this->getToken('MINUS')== $LA58)
            	        {
            	        $alt58=2;
            	        }
            	    else if($this->getToken('INTEGER_POSITIVE')== $LA58||$this->getToken('DECIMAL_POSITIVE')== $LA58||$this->getToken('DOUBLE_POSITIVE')== $LA58)
            	        {
            	        $alt58=3;
            	        }
            	    else if($this->getToken('INTEGER_NEGATIVE')== $LA58||$this->getToken('DECIMAL_NEGATIVE')== $LA58||$this->getToken('DOUBLE_NEGATIVE')== $LA58)
            	        {
            	        $alt58=4;
            	        }
            	    else{
            	        $nvae =
            	            new NoViableAltException("", 58, 0, $this->input);

            	        throw $nvae;
            	    }

            	    switch ($alt58) {
            	        case 1 :
            	            // Sparql10.g:358:12: op= PLUS m2= multiplicativeExpression 
            	            {
            	            $op=$this->match($this->input,$this->getToken('PLUS'),self::$FOLLOW_PLUS_in_additiveExpression2195); 
            	            $this->pushFollow(self::$FOLLOW_multiplicativeExpression_in_additiveExpression2199);
            	            $m2=$this->multiplicativeExpression();

            	            $this->state->_fsp--;

            	              $op=($op!=null?$op->getText():null); $v2=$m2;

            	            }
            	            break;
            	        case 2 :
            	            // Sparql10.g:359:11: op= MINUS m2= multiplicativeExpression 
            	            {
            	            $op=$this->match($this->input,$this->getToken('MINUS'),self::$FOLLOW_MINUS_in_additiveExpression2215); 
            	            $this->pushFollow(self::$FOLLOW_multiplicativeExpression_in_additiveExpression2219);
            	            $m2=$this->multiplicativeExpression();

            	            $this->state->_fsp--;

            	              $op=($op!=null?$op->getText():null); $v2=$m2;

            	            }
            	            break;
            	        case 3 :
            	            // Sparql10.g:360:11: n= numericLiteralPositive 
            	            {
            	            $this->pushFollow(self::$FOLLOW_numericLiteralPositive_in_additiveExpression2235);
            	            $n=$this->numericLiteralPositive();

            	            $this->state->_fsp--;

            	              $op='+'; $v2=$n;

            	            }
            	            break;
            	        case 4 :
            	            // Sparql10.g:361:11: n= numericLiteralNegative 
            	            {
            	            $this->pushFollow(self::$FOLLOW_numericLiteralNegative_in_additiveExpression2251);
            	            $n=$this->numericLiteralNegative();

            	            $this->state->_fsp--;

            	              $op='-'; $v2=$n;

            	            }
            	            break;

            	    }

            	      $value->addElement($op, $v2);

            	    }
            	    break;

            	default :
            	    break 2;//loop59;
                }
            } while (true);


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "additiveExpression"


    // $ANTLR start "multiplicativeExpression"
    // Sparql10.g:366:1: multiplicativeExpression returns [$value] : u1= unaryExpression ( (op= ASTERISK u2= unaryExpression | op= DIVIDE u2= unaryExpression ) )* ; 
    public function multiplicativeExpression(){
        $value = null;

        $op=null;
        $u1 = null;

        $u2 = null;


        $value=new Erfurt_Sparql_Query2_MultiplicativeExpression();
        try {
            // Sparql10.g:368:5: (u1= unaryExpression ( (op= ASTERISK u2= unaryExpression | op= DIVIDE u2= unaryExpression ) )* ) 
            // Sparql10.g:368:7: u1= unaryExpression ( (op= ASTERISK u2= unaryExpression | op= DIVIDE u2= unaryExpression ) )* 
            {
            $this->pushFollow(self::$FOLLOW_unaryExpression_in_multiplicativeExpression2299);
            $u1=$this->unaryExpression();

            $this->state->_fsp--;

              $value->addElement('*', $u1);
            // Sparql10.g:369:9: ( (op= ASTERISK u2= unaryExpression | op= DIVIDE u2= unaryExpression ) )* 
            //loop61:
            do {
                $alt61=2;
                $LA61_0 = $this->input->LA(1);

                if ( ($LA61_0==$this->getToken('ASTERISK')||$LA61_0==$this->getToken('DIVIDE')) ) {
                    $alt61=1;
                }


                switch ($alt61) {
            	case 1 :
            	    // Sparql10.g:369:10: (op= ASTERISK u2= unaryExpression | op= DIVIDE u2= unaryExpression ) 
            	    {
            	    // Sparql10.g:369:10: (op= ASTERISK u2= unaryExpression | op= DIVIDE u2= unaryExpression ) 
            	    $alt60=2;
            	    $LA60_0 = $this->input->LA(1);

            	    if ( ($LA60_0==$this->getToken('ASTERISK')) ) {
            	        $alt60=1;
            	    }
            	    else if ( ($LA60_0==$this->getToken('DIVIDE')) ) {
            	        $alt60=2;
            	    }
            	    else {
            	        $nvae = new NoViableAltException("", 60, 0, $this->input);

            	        throw $nvae;
            	    }
            	    switch ($alt60) {
            	        case 1 :
            	            // Sparql10.g:369:12: op= ASTERISK u2= unaryExpression 
            	            {
            	            $op=$this->match($this->input,$this->getToken('ASTERISK'),self::$FOLLOW_ASTERISK_in_multiplicativeExpression2316); 
            	            $this->pushFollow(self::$FOLLOW_unaryExpression_in_multiplicativeExpression2320);
            	            $u2=$this->unaryExpression();

            	            $this->state->_fsp--;


            	            }
            	            break;
            	        case 2 :
            	            // Sparql10.g:369:45: op= DIVIDE u2= unaryExpression 
            	            {
            	            $op=$this->match($this->input,$this->getToken('DIVIDE'),self::$FOLLOW_DIVIDE_in_multiplicativeExpression2326); 
            	            $this->pushFollow(self::$FOLLOW_unaryExpression_in_multiplicativeExpression2330);
            	            $u2=$this->unaryExpression();

            	            $this->state->_fsp--;


            	            }
            	            break;

            	    }

            	      $value->addElement(($op!=null?$op->getText():null), $u2);

            	    }
            	    break;

            	default :
            	    break 2;//loop61;
                }
            } while (true);


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "multiplicativeExpression"


    // $ANTLR start "unaryExpression"
    // Sparql10.g:373:1: unaryExpression returns [$value] : ( NOT_SIGN e= primaryExpression | PLUS e= primaryExpression | MINUS e= primaryExpression | e= primaryExpression ); 
    public function unaryExpression(){
        $value = null;

        $e = null;


        try {
            // Sparql10.g:374:5: ( NOT_SIGN e= primaryExpression | PLUS e= primaryExpression | MINUS e= primaryExpression | e= primaryExpression ) 
            $alt62=4;
            $LA62 = $this->input->LA(1);
            if($this->getToken('NOT_SIGN')== $LA62)
                {
                $alt62=1;
                }
            else if($this->getToken('PLUS')== $LA62)
                {
                $alt62=2;
                }
            else if($this->getToken('MINUS')== $LA62)
                {
                $alt62=3;
                }
            else if($this->getToken('STR')== $LA62||$this->getToken('LANG')== $LA62||$this->getToken('LANGMATCHES')== $LA62||$this->getToken('DATATYPE')== $LA62||$this->getToken('BOUND')== $LA62||$this->getToken('SAMETERM')== $LA62||$this->getToken('ISIRI')== $LA62||$this->getToken('ISURI')== $LA62||$this->getToken('ISBLANK')== $LA62||$this->getToken('ISLITERAL')== $LA62||$this->getToken('REGEX')== $LA62||$this->getToken('TRUE')== $LA62||$this->getToken('FALSE')== $LA62||$this->getToken('IRI_REF')== $LA62||$this->getToken('PNAME_NS')== $LA62||$this->getToken('PNAME_LN')== $LA62||$this->getToken('VAR1')== $LA62||$this->getToken('VAR2')== $LA62||$this->getToken('INTEGER')== $LA62||$this->getToken('DECIMAL')== $LA62||$this->getToken('DOUBLE')== $LA62||$this->getToken('INTEGER_POSITIVE')== $LA62||$this->getToken('DECIMAL_POSITIVE')== $LA62||$this->getToken('DOUBLE_POSITIVE')== $LA62||$this->getToken('INTEGER_NEGATIVE')== $LA62||$this->getToken('DECIMAL_NEGATIVE')== $LA62||$this->getToken('DOUBLE_NEGATIVE')== $LA62||$this->getToken('STRING_LITERAL1')== $LA62||$this->getToken('STRING_LITERAL2')== $LA62||$this->getToken('STRING_LITERAL_LONG1')== $LA62||$this->getToken('STRING_LITERAL_LONG2')== $LA62||$this->getToken('OPEN_BRACE')== $LA62)
                {
                $alt62=4;
                }
            else{
                $nvae =
                    new NoViableAltException("", 62, 0, $this->input);

                throw $nvae;
            }

            switch ($alt62) {
                case 1 :
                    // Sparql10.g:374:7: NOT_SIGN e= primaryExpression 
                    {
                    $this->match($this->input,$this->getToken('NOT_SIGN'),self::$FOLLOW_NOT_SIGN_in_unaryExpression2358); 
                    $this->pushFollow(self::$FOLLOW_primaryExpression_in_unaryExpression2362);
                    $e=$this->primaryExpression();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_UnaryExpressionNot($e);

                    }
                    break;
                case 2 :
                    // Sparql10.g:375:7: PLUS e= primaryExpression 
                    {
                    $this->match($this->input,$this->getToken('PLUS'),self::$FOLLOW_PLUS_in_unaryExpression2372); 
                    $this->pushFollow(self::$FOLLOW_primaryExpression_in_unaryExpression2376);
                    $e=$this->primaryExpression();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_UnaryExpressionPlus($e);

                    }
                    break;
                case 3 :
                    // Sparql10.g:376:7: MINUS e= primaryExpression 
                    {
                    $this->match($this->input,$this->getToken('MINUS'),self::$FOLLOW_MINUS_in_unaryExpression2386); 
                    $this->pushFollow(self::$FOLLOW_primaryExpression_in_unaryExpression2390);
                    $e=$this->primaryExpression();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_UnaryExpressionMinus($e);

                    }
                    break;
                case 4 :
                    // Sparql10.g:377:7: e= primaryExpression 
                    {
                    $this->pushFollow(self::$FOLLOW_primaryExpression_in_unaryExpression2402);
                    $e=$this->primaryExpression();

                    $this->state->_fsp--;

                      $value = $e;

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "unaryExpression"


    // $ANTLR start "primaryExpression"
    // Sparql10.g:381:1: primaryExpression returns [$value] : (v= brackettedExpression | v= builtInCall | v= iriRefOrFunction | v= rdfLiteral | v= numericLiteral | v= booleanLiteral | v= variable ); 
    public function primaryExpression(){
        $value = null;

        $v = null;


        try {
            // Sparql10.g:383:5: (v= brackettedExpression | v= builtInCall | v= iriRefOrFunction | v= rdfLiteral | v= numericLiteral | v= booleanLiteral | v= variable ) 
            $alt63=7;
            $LA63 = $this->input->LA(1);
            if($this->getToken('OPEN_BRACE')== $LA63)
                {
                $alt63=1;
                }
            else if($this->getToken('STR')== $LA63||$this->getToken('LANG')== $LA63||$this->getToken('LANGMATCHES')== $LA63||$this->getToken('DATATYPE')== $LA63||$this->getToken('BOUND')== $LA63||$this->getToken('SAMETERM')== $LA63||$this->getToken('ISIRI')== $LA63||$this->getToken('ISURI')== $LA63||$this->getToken('ISBLANK')== $LA63||$this->getToken('ISLITERAL')== $LA63||$this->getToken('REGEX')== $LA63)
                {
                $alt63=2;
                }
            else if($this->getToken('IRI_REF')== $LA63||$this->getToken('PNAME_NS')== $LA63||$this->getToken('PNAME_LN')== $LA63)
                {
                $alt63=3;
                }
            else if($this->getToken('STRING_LITERAL1')== $LA63||$this->getToken('STRING_LITERAL2')== $LA63||$this->getToken('STRING_LITERAL_LONG1')== $LA63||$this->getToken('STRING_LITERAL_LONG2')== $LA63)
                {
                $alt63=4;
                }
            else if($this->getToken('INTEGER')== $LA63||$this->getToken('DECIMAL')== $LA63||$this->getToken('DOUBLE')== $LA63||$this->getToken('INTEGER_POSITIVE')== $LA63||$this->getToken('DECIMAL_POSITIVE')== $LA63||$this->getToken('DOUBLE_POSITIVE')== $LA63||$this->getToken('INTEGER_NEGATIVE')== $LA63||$this->getToken('DECIMAL_NEGATIVE')== $LA63||$this->getToken('DOUBLE_NEGATIVE')== $LA63)
                {
                $alt63=5;
                }
            else if($this->getToken('TRUE')== $LA63||$this->getToken('FALSE')== $LA63)
                {
                $alt63=6;
                }
            else if($this->getToken('VAR1')== $LA63||$this->getToken('VAR2')== $LA63)
                {
                $alt63=7;
                }
            else{
                $nvae =
                    new NoViableAltException("", 63, 0, $this->input);

                throw $nvae;
            }

            switch ($alt63) {
                case 1 :
                    // Sparql10.g:383:7: v= brackettedExpression 
                    {
                    $this->pushFollow(self::$FOLLOW_brackettedExpression_in_primaryExpression2433);
                    $v=$this->brackettedExpression();

                    $this->state->_fsp--;

                      $v = $v;

                    }
                    break;
                case 2 :
                    // Sparql10.g:384:7: v= builtInCall 
                    {
                    $this->pushFollow(self::$FOLLOW_builtInCall_in_primaryExpression2445);
                    $v=$this->builtInCall();

                    $this->state->_fsp--;

                      $v = $v;

                    }
                    break;
                case 3 :
                    // Sparql10.g:385:7: v= iriRefOrFunction 
                    {
                    $this->pushFollow(self::$FOLLOW_iriRefOrFunction_in_primaryExpression2457);
                    $v=$this->iriRefOrFunction();

                    $this->state->_fsp--;

                      $v = $v;

                    }
                    break;
                case 4 :
                    // Sparql10.g:386:7: v= rdfLiteral 
                    {
                    $this->pushFollow(self::$FOLLOW_rdfLiteral_in_primaryExpression2469);
                    $v=$this->rdfLiteral();

                    $this->state->_fsp--;

                      $v = $v;

                    }
                    break;
                case 5 :
                    // Sparql10.g:387:7: v= numericLiteral 
                    {
                    $this->pushFollow(self::$FOLLOW_numericLiteral_in_primaryExpression2481);
                    $v=$this->numericLiteral();

                    $this->state->_fsp--;

                      $v = $v;

                    }
                    break;
                case 6 :
                    // Sparql10.g:388:7: v= booleanLiteral 
                    {
                    $this->pushFollow(self::$FOLLOW_booleanLiteral_in_primaryExpression2493);
                    $v=$this->booleanLiteral();

                    $this->state->_fsp--;

                      $v = $v;

                    }
                    break;
                case 7 :
                    // Sparql10.g:389:7: v= variable 
                    {
                    $this->pushFollow(self::$FOLLOW_variable_in_primaryExpression2505);
                    $v=$this->variable();

                    $this->state->_fsp--;

                      $v = $v;

                    }
                    break;

            }
              $value = $v;
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "primaryExpression"


    // $ANTLR start "brackettedExpression"
    // Sparql10.g:393:1: brackettedExpression returns [$value] : OPEN_BRACE e= expression CLOSE_BRACE ; 
    public function brackettedExpression(){
        $value = null;

        $e = null;


        try {
            // Sparql10.g:394:5: ( OPEN_BRACE e= expression CLOSE_BRACE ) 
            // Sparql10.g:394:7: OPEN_BRACE e= expression CLOSE_BRACE 
            {
            $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_brackettedExpression2530); 
            $this->pushFollow(self::$FOLLOW_expression_in_brackettedExpression2534);
            $e=$this->expression();

            $this->state->_fsp--;

            $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_brackettedExpression2536); 
              $value = new Erfurt_Sparql_Query2_BrackettedExpression($e);

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "brackettedExpression"


    // $ANTLR start "builtInCall"
    // Sparql10.g:398:1: builtInCall returns [$value] : ( STR OPEN_BRACE e= expression CLOSE_BRACE | LANG OPEN_BRACE e= expression CLOSE_BRACE | LANGMATCHES OPEN_BRACE e1= expression COMMA e2= expression CLOSE_BRACE | DATATYPE OPEN_BRACE e= expression CLOSE_BRACE | BOUND OPEN_BRACE variable CLOSE_BRACE | SAMETERM OPEN_BRACE e1= expression COMMA e2= expression CLOSE_BRACE | ISIRI OPEN_BRACE e= expression CLOSE_BRACE | ISURI OPEN_BRACE e= expression CLOSE_BRACE | ISBLANK OPEN_BRACE e= expression CLOSE_BRACE | ISLITERAL OPEN_BRACE e= expression CLOSE_BRACE | regexExpression ); 
    public function builtInCall(){
        $value = null;

        $e = null;

        $e1 = null;

        $e2 = null;

        $variable43 = null;

        $regexExpression44 = null;


        try {
            // Sparql10.g:399:5: ( STR OPEN_BRACE e= expression CLOSE_BRACE | LANG OPEN_BRACE e= expression CLOSE_BRACE | LANGMATCHES OPEN_BRACE e1= expression COMMA e2= expression CLOSE_BRACE | DATATYPE OPEN_BRACE e= expression CLOSE_BRACE | BOUND OPEN_BRACE variable CLOSE_BRACE | SAMETERM OPEN_BRACE e1= expression COMMA e2= expression CLOSE_BRACE | ISIRI OPEN_BRACE e= expression CLOSE_BRACE | ISURI OPEN_BRACE e= expression CLOSE_BRACE | ISBLANK OPEN_BRACE e= expression CLOSE_BRACE | ISLITERAL OPEN_BRACE e= expression CLOSE_BRACE | regexExpression ) 
            $alt64=11;
            $LA64 = $this->input->LA(1);
            if($this->getToken('STR')== $LA64)
                {
                $alt64=1;
                }
            else if($this->getToken('LANG')== $LA64)
                {
                $alt64=2;
                }
            else if($this->getToken('LANGMATCHES')== $LA64)
                {
                $alt64=3;
                }
            else if($this->getToken('DATATYPE')== $LA64)
                {
                $alt64=4;
                }
            else if($this->getToken('BOUND')== $LA64)
                {
                $alt64=5;
                }
            else if($this->getToken('SAMETERM')== $LA64)
                {
                $alt64=6;
                }
            else if($this->getToken('ISIRI')== $LA64)
                {
                $alt64=7;
                }
            else if($this->getToken('ISURI')== $LA64)
                {
                $alt64=8;
                }
            else if($this->getToken('ISBLANK')== $LA64)
                {
                $alt64=9;
                }
            else if($this->getToken('ISLITERAL')== $LA64)
                {
                $alt64=10;
                }
            else if($this->getToken('REGEX')== $LA64)
                {
                $alt64=11;
                }
            else{
                $nvae =
                    new NoViableAltException("", 64, 0, $this->input);

                throw $nvae;
            }

            switch ($alt64) {
                case 1 :
                    // Sparql10.g:399:7: STR OPEN_BRACE e= expression CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('STR'),self::$FOLLOW_STR_in_builtInCall2561); 
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_builtInCall2563); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2567);
                    $e=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_builtInCall2569); 
                      $value = new Erfurt_Sparql_Query2_Str($e);

                    }
                    break;
                case 2 :
                    // Sparql10.g:400:7: LANG OPEN_BRACE e= expression CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('LANG'),self::$FOLLOW_LANG_in_builtInCall2579); 
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_builtInCall2581); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2585);
                    $e=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_builtInCall2587); 
                      $value = new Erfurt_Sparql_Query2_Lang($e);

                    }
                    break;
                case 3 :
                    // Sparql10.g:401:7: LANGMATCHES OPEN_BRACE e1= expression COMMA e2= expression CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('LANGMATCHES'),self::$FOLLOW_LANGMATCHES_in_builtInCall2597); 
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_builtInCall2599); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2603);
                    $e1=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('COMMA'),self::$FOLLOW_COMMA_in_builtInCall2605); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2609);
                    $e2=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_builtInCall2611); 
                      $value = new Erfurt_Sparql_Query2_LangMatches($e1, $e2);

                    }
                    break;
                case 4 :
                    // Sparql10.g:402:7: DATATYPE OPEN_BRACE e= expression CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('DATATYPE'),self::$FOLLOW_DATATYPE_in_builtInCall2621); 
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_builtInCall2623); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2627);
                    $e=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_builtInCall2629); 
                      $value = new Erfurt_Sparql_Query2_Datatype($e);

                    }
                    break;
                case 5 :
                    // Sparql10.g:403:7: BOUND OPEN_BRACE variable CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('BOUND'),self::$FOLLOW_BOUND_in_builtInCall2639); 
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_builtInCall2641); 
                    $this->pushFollow(self::$FOLLOW_variable_in_builtInCall2643);
                    $variable43=$this->variable();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_builtInCall2645); 
                      $value = new Erfurt_Sparql_Query2_bound($variable43);

                    }
                    break;
                case 6 :
                    // Sparql10.g:404:7: SAMETERM OPEN_BRACE e1= expression COMMA e2= expression CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('SAMETERM'),self::$FOLLOW_SAMETERM_in_builtInCall2655); 
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_builtInCall2657); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2661);
                    $e1=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('COMMA'),self::$FOLLOW_COMMA_in_builtInCall2663); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2667);
                    $e2=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_builtInCall2669); 
                      $value = new Erfurt_Sparql_Query2_sameTerm($e1, $e2);

                    }
                    break;
                case 7 :
                    // Sparql10.g:405:7: ISIRI OPEN_BRACE e= expression CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('ISIRI'),self::$FOLLOW_ISIRI_in_builtInCall2679); 
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_builtInCall2681); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2685);
                    $e=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_builtInCall2687); 
                      $value = new Erfurt_Sparql_Query2_isIri($e);

                    }
                    break;
                case 8 :
                    // Sparql10.g:406:7: ISURI OPEN_BRACE e= expression CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('ISURI'),self::$FOLLOW_ISURI_in_builtInCall2697); 
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_builtInCall2699); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2703);
                    $e=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_builtInCall2705); 
                      $value = new Erfurt_Sparql_Query2_isUri($e);

                    }
                    break;
                case 9 :
                    // Sparql10.g:407:7: ISBLANK OPEN_BRACE e= expression CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('ISBLANK'),self::$FOLLOW_ISBLANK_in_builtInCall2715); 
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_builtInCall2717); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2721);
                    $e=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_builtInCall2723); 
                      $value = new Erfurt_Sparql_Query2_isBlank($e);

                    }
                    break;
                case 10 :
                    // Sparql10.g:408:7: ISLITERAL OPEN_BRACE e= expression CLOSE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('ISLITERAL'),self::$FOLLOW_ISLITERAL_in_builtInCall2733); 
                    $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_builtInCall2735); 
                    $this->pushFollow(self::$FOLLOW_expression_in_builtInCall2739);
                    $e=$this->expression();

                    $this->state->_fsp--;

                    $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_builtInCall2741); 
                      $value = new Erfurt_Sparql_Query2_isLiteral($e);

                    }
                    break;
                case 11 :
                    // Sparql10.g:409:7: regexExpression 
                    {
                    $this->pushFollow(self::$FOLLOW_regexExpression_in_builtInCall2751);
                    $regexExpression44=$this->regexExpression();

                    $this->state->_fsp--;

                      $value = $regexExpression44;

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "builtInCall"


    // $ANTLR start "regexExpression"
    // Sparql10.g:413:1: regexExpression returns [$value] : REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE ; 
    public function regexExpression(){
        $value = null;

        $e1 = null;

        $e2 = null;

        $e3 = null;


        try {
            // Sparql10.g:414:5: ( REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE ) 
            // Sparql10.g:414:7: REGEX OPEN_BRACE e1= expression COMMA e2= expression ( COMMA e3= expression )? CLOSE_BRACE 
            {
            $this->match($this->input,$this->getToken('REGEX'),self::$FOLLOW_REGEX_in_regexExpression2776); 
            $this->match($this->input,$this->getToken('OPEN_BRACE'),self::$FOLLOW_OPEN_BRACE_in_regexExpression2778); 
            $this->pushFollow(self::$FOLLOW_expression_in_regexExpression2782);
            $e1=$this->expression();

            $this->state->_fsp--;

            $this->match($this->input,$this->getToken('COMMA'),self::$FOLLOW_COMMA_in_regexExpression2784); 
            $this->pushFollow(self::$FOLLOW_expression_in_regexExpression2788);
            $e2=$this->expression();

            $this->state->_fsp--;

            // Sparql10.g:414:58: ( COMMA e3= expression )? 
            $alt65=2;
            $LA65_0 = $this->input->LA(1);

            if ( ($LA65_0==$this->getToken('COMMA')) ) {
                $alt65=1;
            }
            switch ($alt65) {
                case 1 :
                    // Sparql10.g:414:60: COMMA e3= expression 
                    {
                    $this->match($this->input,$this->getToken('COMMA'),self::$FOLLOW_COMMA_in_regexExpression2792); 
                    $this->pushFollow(self::$FOLLOW_expression_in_regexExpression2796);
                    $e3=$this->expression();

                    $this->state->_fsp--;


                    }
                    break;

            }

            $this->match($this->input,$this->getToken('CLOSE_BRACE'),self::$FOLLOW_CLOSE_BRACE_in_regexExpression2801); 
              $value = new Erfurt_Sparql_Query2_Regex($e1, $e2, $e3);

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "regexExpression"


    // $ANTLR start "iriRefOrFunction"
    // Sparql10.g:419:1: iriRefOrFunction returns [$value] : iriRef ( argList )? ; 
    public function iriRefOrFunction(){
        $value = null;

        $iriRef45 = null;

        $argList46 = null;


        $al = null;$i=null;
        try {
            // Sparql10.g:426:5: ( iriRef ( argList )? ) 
            // Sparql10.g:426:7: iriRef ( argList )? 
            {
            $this->pushFollow(self::$FOLLOW_iriRef_in_iriRefOrFunction2838);
            $iriRef45=$this->iriRef();

            $this->state->_fsp--;

              $i=$iriRef45;
            // Sparql10.g:427:9: ( argList )? 
            $alt66=2;
            $LA66_0 = $this->input->LA(1);

            if ( ($LA66_0==$this->getToken('OPEN_BRACE')) ) {
                $alt66=1;
            }
            switch ($alt66) {
                case 1 :
                    // Sparql10.g:427:10: argList 
                    {
                    $this->pushFollow(self::$FOLLOW_argList_in_iriRefOrFunction2851);
                    $argList46=$this->argList();

                    $this->state->_fsp--;

                      $al = $argList46;

                    }
                    break;

            }


            }


              if(isset($al)){
                  $value = new Erfurt_Sparql_Query2_Function($i, $al);
              } else{$value = $i;}

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "iriRefOrFunction"


    // $ANTLR start "rdfLiteral"
    // Sparql10.g:431:1: rdfLiteral returns [$value] : string ( LANGTAG | ( REFERENCE iriRef ) )? ; 
    public function rdfLiteral(){
        $value = null;

        $LANGTAG48=null;
        $string47 = null;

        $iriRef49 = null;


        require_once('Erfurt/Sparql/Query2/RDFLiteral.php');
        try {
            // Sparql10.g:433:5: ( string ( LANGTAG | ( REFERENCE iriRef ) )? ) 
            // Sparql10.g:433:7: string ( LANGTAG | ( REFERENCE iriRef ) )? 
            {
            $this->pushFollow(self::$FOLLOW_string_in_rdfLiteral2882);
            $string47=$this->string();

            $this->state->_fsp--;

              $value = new Erfurt_Sparql_Query2_RDFLiteral(($string47!=null?$this->input->toStringBetweenTokens($string47->start,$string47->stop):null));
            // Sparql10.g:434:9: ( LANGTAG | ( REFERENCE iriRef ) )? 
            $alt67=3;
            $LA67_0 = $this->input->LA(1);

            if ( ($LA67_0==$this->getToken('LANGTAG')) ) {
                $alt67=1;
            }
            else if ( ($LA67_0==$this->getToken('REFERENCE')) ) {
                $alt67=2;
            }
            switch ($alt67) {
                case 1 :
                    // Sparql10.g:434:11: LANGTAG 
                    {
                    $LANGTAG48=$this->match($this->input,$this->getToken('LANGTAG'),self::$FOLLOW_LANGTAG_in_rdfLiteral2896); 
                      $value->setLanguageTag(($LANGTAG48!=null?$LANGTAG48->getText():null));

                    }
                    break;
                case 2 :
                    // Sparql10.g:435:11: ( REFERENCE iriRef ) 
                    {
                    // Sparql10.g:435:11: ( REFERENCE iriRef ) 
                    // Sparql10.g:435:13: REFERENCE iriRef 
                    {
                    $this->match($this->input,$this->getToken('REFERENCE'),self::$FOLLOW_REFERENCE_in_rdfLiteral2913); 
                    $this->pushFollow(self::$FOLLOW_iriRef_in_rdfLiteral2915);
                    $iriRef49=$this->iriRef();

                    $this->state->_fsp--;

                      $value->setDatatype($iriRef49);

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "rdfLiteral"


    // $ANTLR start "numericLiteral"
    // Sparql10.g:439:1: numericLiteral returns [$value] : (n= numericLiteralUnsigned | n= numericLiteralPositive | n= numericLiteralNegative ) ; 
    public function numericLiteral(){
        $value = null;

        $n = null;


        try {
            // Sparql10.g:440:5: ( (n= numericLiteralUnsigned | n= numericLiteralPositive | n= numericLiteralNegative ) ) 
            // Sparql10.g:440:7: (n= numericLiteralUnsigned | n= numericLiteralPositive | n= numericLiteralNegative ) 
            {
            // Sparql10.g:440:7: (n= numericLiteralUnsigned | n= numericLiteralPositive | n= numericLiteralNegative ) 
            $alt68=3;
            $LA68 = $this->input->LA(1);
            if($this->getToken('INTEGER')== $LA68||$this->getToken('DECIMAL')== $LA68||$this->getToken('DOUBLE')== $LA68)
                {
                $alt68=1;
                }
            else if($this->getToken('INTEGER_POSITIVE')== $LA68||$this->getToken('DECIMAL_POSITIVE')== $LA68||$this->getToken('DOUBLE_POSITIVE')== $LA68)
                {
                $alt68=2;
                }
            else if($this->getToken('INTEGER_NEGATIVE')== $LA68||$this->getToken('DECIMAL_NEGATIVE')== $LA68||$this->getToken('DOUBLE_NEGATIVE')== $LA68)
                {
                $alt68=3;
                }
            else{
                $nvae =
                    new NoViableAltException("", 68, 0, $this->input);

                throw $nvae;
            }

            switch ($alt68) {
                case 1 :
                    // Sparql10.g:440:8: n= numericLiteralUnsigned 
                    {
                    $this->pushFollow(self::$FOLLOW_numericLiteralUnsigned_in_numericLiteral2948);
                    $n=$this->numericLiteralUnsigned();

                    $this->state->_fsp--;


                    }
                    break;
                case 2 :
                    // Sparql10.g:441:5: n= numericLiteralPositive 
                    {
                    $this->pushFollow(self::$FOLLOW_numericLiteralPositive_in_numericLiteral2956);
                    $n=$this->numericLiteralPositive();

                    $this->state->_fsp--;


                    }
                    break;
                case 3 :
                    // Sparql10.g:442:5: n= numericLiteralNegative 
                    {
                    $this->pushFollow(self::$FOLLOW_numericLiteralNegative_in_numericLiteral2964);
                    $n=$this->numericLiteralNegative();

                    $this->state->_fsp--;


                    }
                    break;

            }

              $value=$n;

            }

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "numericLiteral"


    // $ANTLR start "numericLiteralUnsigned"
    // Sparql10.g:446:1: numericLiteralUnsigned returns [$value] : (v= INTEGER | v= DECIMAL | v= DOUBLE ); 
    public function numericLiteralUnsigned(){
        $value = null;

        $v=null;

        require_once('Erfurt/Sparql/Query2/NumericLiteral.php');
        try {
            // Sparql10.g:448:5: (v= INTEGER | v= DECIMAL | v= DOUBLE ) 
            $alt69=3;
            $LA69 = $this->input->LA(1);
            if($this->getToken('INTEGER')== $LA69)
                {
                $alt69=1;
                }
            else if($this->getToken('DECIMAL')== $LA69)
                {
                $alt69=2;
                }
            else if($this->getToken('DOUBLE')== $LA69)
                {
                $alt69=3;
                }
            else{
                $nvae =
                    new NoViableAltException("", 69, 0, $this->input);

                throw $nvae;
            }

            switch ($alt69) {
                case 1 :
                    // Sparql10.g:448:7: v= INTEGER 
                    {
                    $v=$this->match($this->input,$this->getToken('INTEGER'),self::$FOLLOW_INTEGER_in_numericLiteralUnsigned2997); 
                      $value = new Erfurt_Sparql_Query2_NumericLiteral((int)($v!=null?$v->getText():null));

                    }
                    break;
                case 2 :
                    // Sparql10.g:449:7: v= DECIMAL 
                    {
                    $v=$this->match($this->input,$this->getToken('DECIMAL'),self::$FOLLOW_DECIMAL_in_numericLiteralUnsigned3009); 
                      $value = new Erfurt_Sparql_Query2_NumericLiteral((float)($v!=null?$v->getText():null));

                    }
                    break;
                case 3 :
                    // Sparql10.g:450:7: v= DOUBLE 
                    {
                    $v=$this->match($this->input,$this->getToken('DOUBLE'),self::$FOLLOW_DOUBLE_in_numericLiteralUnsigned3021); 
                      $value = new Erfurt_Sparql_Query2_NumericLiteral((double)($v!=null?$v->getText():null));

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "numericLiteralUnsigned"


    // $ANTLR start "numericLiteralPositive"
    // Sparql10.g:454:1: numericLiteralPositive returns [$value] : (v= INTEGER_POSITIVE | v= DECIMAL_POSITIVE | v= DOUBLE_POSITIVE ); 
    public function numericLiteralPositive(){
        $value = null;

        $v=null;

        require_once('Erfurt/Sparql/Query2/NumericLiteral.php');
        try {
            // Sparql10.g:456:5: (v= INTEGER_POSITIVE | v= DECIMAL_POSITIVE | v= DOUBLE_POSITIVE ) 
            $alt70=3;
            $LA70 = $this->input->LA(1);
            if($this->getToken('INTEGER_POSITIVE')== $LA70)
                {
                $alt70=1;
                }
            else if($this->getToken('DECIMAL_POSITIVE')== $LA70)
                {
                $alt70=2;
                }
            else if($this->getToken('DOUBLE_POSITIVE')== $LA70)
                {
                $alt70=3;
                }
            else{
                $nvae =
                    new NoViableAltException("", 70, 0, $this->input);

                throw $nvae;
            }

            switch ($alt70) {
                case 1 :
                    // Sparql10.g:456:7: v= INTEGER_POSITIVE 
                    {
                    $v=$this->match($this->input,$this->getToken('INTEGER_POSITIVE'),self::$FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive3052); 
                      $value = new Erfurt_Sparql_Query2_NumericLiteral((int)($v!=null?$v->getText():null));

                    }
                    break;
                case 2 :
                    // Sparql10.g:457:7: v= DECIMAL_POSITIVE 
                    {
                    $v=$this->match($this->input,$this->getToken('DECIMAL_POSITIVE'),self::$FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive3064); 
                      $value = new Erfurt_Sparql_Query2_NumericLiteral((float)($v!=null?$v->getText():null));

                    }
                    break;
                case 3 :
                    // Sparql10.g:458:7: v= DOUBLE_POSITIVE 
                    {
                    $v=$this->match($this->input,$this->getToken('DOUBLE_POSITIVE'),self::$FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive3076); 
                      $value = new Erfurt_Sparql_Query2_NumericLiteral((double)($v!=null?$v->getText():null));

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "numericLiteralPositive"


    // $ANTLR start "numericLiteralNegative"
    // Sparql10.g:462:1: numericLiteralNegative returns [$value] : (v= INTEGER_NEGATIVE | v= DECIMAL_NEGATIVE | v= DOUBLE_NEGATIVE ); 
    public function numericLiteralNegative(){
        $value = null;

        $v=null;

        require_once('Erfurt/Sparql/Query2/NumericLiteral.php');
        try {
            // Sparql10.g:464:5: (v= INTEGER_NEGATIVE | v= DECIMAL_NEGATIVE | v= DOUBLE_NEGATIVE ) 
            $alt71=3;
            $LA71 = $this->input->LA(1);
            if($this->getToken('INTEGER_NEGATIVE')== $LA71)
                {
                $alt71=1;
                }
            else if($this->getToken('DECIMAL_NEGATIVE')== $LA71)
                {
                $alt71=2;
                }
            else if($this->getToken('DOUBLE_NEGATIVE')== $LA71)
                {
                $alt71=3;
                }
            else{
                $nvae =
                    new NoViableAltException("", 71, 0, $this->input);

                throw $nvae;
            }

            switch ($alt71) {
                case 1 :
                    // Sparql10.g:464:7: v= INTEGER_NEGATIVE 
                    {
                    $v=$this->match($this->input,$this->getToken('INTEGER_NEGATIVE'),self::$FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative3107); 
                      $value = new Erfurt_Sparql_Query2_NumericLiteral((int)($v!=null?$v->getText():null));

                    }
                    break;
                case 2 :
                    // Sparql10.g:465:7: v= DECIMAL_NEGATIVE 
                    {
                    $v=$this->match($this->input,$this->getToken('DECIMAL_NEGATIVE'),self::$FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative3119); 
                      $value = new Erfurt_Sparql_Query2_NumericLiteral((float)($v!=null?$v->getText():null));

                    }
                    break;
                case 3 :
                    // Sparql10.g:466:7: v= DOUBLE_NEGATIVE 
                    {
                    $v=$this->match($this->input,$this->getToken('DOUBLE_NEGATIVE'),self::$FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative3131); 
                      $value = new Erfurt_Sparql_Query2_NumericLiteral((double)($v!=null?$v->getText():null));

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "numericLiteralNegative"


    // $ANTLR start "booleanLiteral"
    // Sparql10.g:470:1: booleanLiteral returns [$value] : ( TRUE | FALSE ); 
    public function booleanLiteral(){
        $value = null;

        require_once 'Erfurt/Sparql/Query2/BooleanLiteral.php'; $v=null;
        try {
            // Sparql10.g:473:5: ( TRUE | FALSE ) 
            $alt72=2;
            $LA72_0 = $this->input->LA(1);

            if ( ($LA72_0==$this->getToken('TRUE')) ) {
                $alt72=1;
            }
            else if ( ($LA72_0==$this->getToken('FALSE')) ) {
                $alt72=2;
            }
            else {
                $nvae = new NoViableAltException("", 72, 0, $this->input);

                throw $nvae;
            }
            switch ($alt72) {
                case 1 :
                    // Sparql10.g:473:7: TRUE 
                    {
                    $this->match($this->input,$this->getToken('TRUE'),self::$FOLLOW_TRUE_in_booleanLiteral3164); 
                      $v=1;

                    }
                    break;
                case 2 :
                    // Sparql10.g:474:7: FALSE 
                    {
                    $this->match($this->input,$this->getToken('FALSE'),self::$FOLLOW_FALSE_in_booleanLiteral3174); 
                      $v=0;

                    }
                    break;

            }
              $value = new Erfurt_Sparql_Query2_BooleanLiteral((bool)$v);
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "booleanLiteral"

    public static function string_return() {
    	require_once 'ParserRuleReturnScope.php';
        $retval = new ParserRuleReturnScope();
    	return $retval;
    }

    // $ANTLR start "string"
    // Sparql10.g:478:1: string : ( STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 ); 
    public function string(){
        $retval = $this->string_return();
        $retval->start = $this->input->LT(1);


        try {
            // Sparql10.g:479:5: ( STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 ) 
            // Sparql10.g: 
            {
            if ( ($this->input->LA(1)>=$this->getToken('STRING_LITERAL1') && $this->input->LA(1)<=$this->getToken('STRING_LITERAL_LONG2')) ) {
                $this->input->consume();
                $this->state->errorRecovery=false;
            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                throw $mse;
            }


            }

            $retval->stop = $this->input->LT(-1);

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $retval;
    }
    // $ANTLR end "string"


    // $ANTLR start "iriRef"
    // Sparql10.g:486:1: iriRef returns [$value] : ( IRI_REF | prefixedName ); 
    public function iriRef(){
        $value = null;

        $IRI_REF50=null;
        $prefixedName51 = null;


        require_once 'Erfurt/Sparql/Query2/IriRef.php';
        try {
            // Sparql10.g:488:5: ( IRI_REF | prefixedName ) 
            $alt73=2;
            $LA73_0 = $this->input->LA(1);

            if ( ($LA73_0==$this->getToken('IRI_REF')) ) {
                $alt73=1;
            }
            else if ( ($LA73_0==$this->getToken('PNAME_NS')||$LA73_0==$this->getToken('PNAME_LN')) ) {
                $alt73=2;
            }
            else {
                $nvae = new NoViableAltException("", 73, 0, $this->input);

                throw $nvae;
            }
            switch ($alt73) {
                case 1 :
                    // Sparql10.g:488:7: IRI_REF 
                    {
                    $IRI_REF50=$this->match($this->input,$this->getToken('IRI_REF'),self::$FOLLOW_IRI_REF_in_iriRef3246); 
                      $value = new Erfurt_Sparql_Query2_IriRef(($IRI_REF50!=null?$IRI_REF50->getText():null));

                    }
                    break;
                case 2 :
                    // Sparql10.g:489:7: prefixedName 
                    {
                    $this->pushFollow(self::$FOLLOW_prefixedName_in_iriRef3256);
                    $prefixedName51=$this->prefixedName();

                    $this->state->_fsp--;

                      $value = new Erfurt_Sparql_Query2_IriRef(($prefixedName51!=null?$this->input->toStringBetweenTokens($prefixedName51->start,$prefixedName51->stop):null));

                    }
                    break;

            }
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "iriRef"

    public static function prefixedName_return() {
    	require_once 'ParserRuleReturnScope.php';
        $retval = new ParserRuleReturnScope();
    	return $retval;
    }

    // $ANTLR start "prefixedName"
    // Sparql10.g:493:1: prefixedName : ( PNAME_LN | PNAME_NS ); 
    public function prefixedName(){
        $retval = $this->prefixedName_return();
        $retval->start = $this->input->LT(1);


        try {
            // Sparql10.g:494:5: ( PNAME_LN | PNAME_NS ) 
            // Sparql10.g: 
            {
            if ( $this->input->LA(1)==$this->getToken('PNAME_NS')||$this->input->LA(1)==$this->getToken('PNAME_LN') ) {
                $this->input->consume();
                $this->state->errorRecovery=false;
            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                throw $mse;
            }


            }

            $retval->stop = $this->input->LT(-1);

        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $retval;
    }
    // $ANTLR end "prefixedName"


    // $ANTLR start "blankNode"
    // Sparql10.g:499:1: blankNode returns [$value] : (v= BLANK_NODE_LABEL | OPEN_SQUARE_BRACE ( WS )* CLOSE_SQUARE_BRACE ); 
    public function blankNode(){
        $value = null;

        $v=null;

        require_once 'Erfurt/Sparql/Query2/BlankNode.php'; $v=null;
        try {
            // Sparql10.g:502:5: (v= BLANK_NODE_LABEL | OPEN_SQUARE_BRACE ( WS )* CLOSE_SQUARE_BRACE ) 
            $alt75=2;
            $LA75_0 = $this->input->LA(1);

            if ( ($LA75_0==$this->getToken('BLANK_NODE_LABEL')) ) {
                $alt75=1;
            }
            else if ( ($LA75_0==$this->getToken('OPEN_SQUARE_BRACE')) ) {
                $alt75=2;
            }
            else {
                $nvae = new NoViableAltException("", 75, 0, $this->input);

                throw $nvae;
            }
            switch ($alt75) {
                case 1 :
                    // Sparql10.g:502:7: v= BLANK_NODE_LABEL 
                    {
                    $v=$this->match($this->input,$this->getToken('BLANK_NODE_LABEL'),self::$FOLLOW_BLANK_NODE_LABEL_in_blankNode3318); 
                      $v = ($v!=null?$v->getText():null);

                    }
                    break;
                case 2 :
                    // Sparql10.g:503:7: OPEN_SQUARE_BRACE ( WS )* CLOSE_SQUARE_BRACE 
                    {
                    $this->match($this->input,$this->getToken('OPEN_SQUARE_BRACE'),self::$FOLLOW_OPEN_SQUARE_BRACE_in_blankNode3328); 
                    // Sparql10.g:503:25: ( WS )* 
                    //loop74:
                    do {
                        $alt74=2;
                        $LA74_0 = $this->input->LA(1);

                        if ( ($LA74_0==$this->getToken('WS')) ) {
                            $alt74=1;
                        }


                        switch ($alt74) {
                    	case 1 :
                    	    // Sparql10.g:503:26: WS 
                    	    {
                    	    $this->match($this->input,$this->getToken('WS'),self::$FOLLOW_WS_in_blankNode3331); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop74;
                        }
                    } while (true);

                    $this->match($this->input,$this->getToken('CLOSE_SQUARE_BRACE'),self::$FOLLOW_CLOSE_SQUARE_BRACE_in_blankNode3335); 
                      $v='';

                    }
                    break;

            }
              $value = new Erfurt_Sparql_Query2_BlankNode($v);
        }
        catch (RecognitionException $re) {
            $this->reportError($re);
            $this->recover($this->input,$re);
        }
        catch(Exception $e) {
            throw $e;
        }
        
        return $value;
    }
    // $ANTLR end "blankNode"

    // Delegated rules


    
}

 



Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_prologue_in_query1038 = new Set(array(7, 10, 11, 12));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_selectQuery_in_query1051 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_constructQuery_in_query1063 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_describeQuery_in_query1076 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_askQuery_in_query1089 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_baseDecl_in_prologue121 = new Set(array(1, 5));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_prefixDecl_in_prologue124 = new Set(array(1, 5));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_BASE_in_baseDecl144 = new Set(array(46, 48, 50));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_iriRef_in_baseDecl146 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_PREFIX_in_prefixDecl171 = new Set(array(48));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_PNAME_NS_in_prefixDecl173 = new Set(array(46, 48, 50));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_iriRef_in_prefixDecl175 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_SELECT_in_selectQuery196 = new Set(array(8, 9, 52, 53, 85));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DISTINCT_in_selectQuery200 = new Set(array(52, 53, 85));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_REDUCED_in_selectQuery214 = new Set(array(52, 53, 85));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_variable_in_selectQuery231 = new Set(array(13, 15, 44, 52, 53));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_ASTERISK_in_selectQuery236 = new Set(array(13, 15, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_datasetClause_in_selectQuery240 = new Set(array(13, 15, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_whereClause_in_selectQuery243 = new Set(array(16, 21, 22));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_solutionModifier_in_selectQuery245 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CONSTRUCT_in_constructQuery265 = new Set(array(44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_constructTemplate_in_constructQuery267 = new Set(array(13, 15, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_datasetClause_in_constructQuery269 = new Set(array(13, 15, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_whereClause_in_constructQuery272 = new Set(array(16, 21, 22));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_solutionModifier_in_constructQuery274 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DESCRIBE_in_describeQuery293 = new Set(array(46, 48, 50, 52, 53, 85));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_varOrIRIref_in_describeQuery297 = new Set(array(13, 15, 16, 21, 22, 44, 46, 48, 50, 52, 53));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_ASTERISK_in_describeQuery302 = new Set(array(13, 15, 16, 21, 22, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_datasetClause_in_describeQuery306 = new Set(array(13, 15, 16, 21, 22, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_whereClause_in_describeQuery309 = new Set(array(16, 21, 22));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_solutionModifier_in_describeQuery312 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_ASK_in_askQuery331 = new Set(array(13, 15, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_datasetClause_in_askQuery333 = new Set(array(13, 15, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_whereClause_in_askQuery336 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_FROM_in_datasetClause357 = new Set(array(14, 46, 48, 50));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_defaultGraphClause_in_datasetClause361 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_namedGraphClause_in_datasetClause375 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_sourceSelector_in_defaultGraphClause410 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_NAMED_in_namedGraphClause435 = new Set(array(46, 48, 50));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_sourceSelector_in_namedGraphClause437 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_iriRef_in_sourceSelector462 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_WHERE_in_whereClause483 = new Set(array(13, 15, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_groupGraphPattern_in_whereClause486 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_orderClause_in_solutionModifier507 = new Set(array(1, 21, 22));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_limitOffsetClauses_in_solutionModifier510 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_limitClause_in_limitOffsetClauses529 = new Set(array(1, 21, 22));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_offsetClause_in_limitOffsetClauses531 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_offsetClause_in_limitOffsetClauses541 = new Set(array(1, 21));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_limitClause_in_limitOffsetClauses543 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_ORDER_in_orderClause563 = new Set(array(18));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_BY_in_orderClause565 = new Set(array(19, 20, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 48, 50, 52, 53, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_orderCondition_in_orderClause567 = new Set(array(1, 19, 20, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 48, 50, 52, 53, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_ASC_in_orderCondition593 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DESC_in_orderCondition599 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_brackettedExpression_in_orderCondition603 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_constraint_in_orderCondition619 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_variable_in_orderCondition625 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_LIMIT_in_limitClause647 = new Set(array(56));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_INTEGER_in_limitClause649 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OFFSET_in_offsetClause670 = new Set(array(56));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_INTEGER_in_offsetClause672 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_CURLY_BRACE_in_groupGraphPattern699 = new Set(array(13, 15, 23, 24, 26, 40, 41, 44, 45, 46, 48, 50, 52, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_triplesBlock_in_groupGraphPattern704 = new Set(array(13, 15, 23, 24, 26, 44, 45));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_graphPatternNotTriples_in_groupGraphPattern718 = new Set(array(13, 15, 23, 24, 26, 40, 41, 44, 45, 46, 48, 50, 52, 53, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_filter_in_groupGraphPattern724 = new Set(array(13, 15, 23, 24, 26, 40, 41, 44, 45, 46, 48, 50, 52, 53, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DOT_in_groupGraphPattern742 = new Set(array(13, 15, 23, 24, 26, 40, 41, 44, 45, 46, 48, 50, 52, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_triplesBlock_in_groupGraphPattern748 = new Set(array(13, 15, 23, 24, 26, 44, 45));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_CURLY_BRACE_in_groupGraphPattern757 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_triplesSameSubject_in_triplesBlock784 = new Set(array(1, 57));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DOT_in_triplesBlock790 = new Set(array(1, 40, 41, 46, 48, 50, 52, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_triplesBlock_in_triplesBlock795 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_optionalGraphPattern_in_graphPatternNotTriples832 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_groupOrUnionGraphPattern_in_graphPatternNotTriples844 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_graphGraphPattern_in_graphPatternNotTriples856 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPTIONAL_in_optionalGraphPattern885 = new Set(array(13, 15, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_groupGraphPattern_in_optionalGraphPattern887 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_GRAPH_in_graphGraphPattern916 = new Set(array(46, 48, 50, 52, 53));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_varOrIRIref_in_graphGraphPattern918 = new Set(array(13, 15, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_groupGraphPattern_in_graphGraphPattern920 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern951 = new Set(array(1, 25));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_UNION_in_groupOrUnionGraphPattern957 = new Set(array(13, 15, 44));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_groupGraphPattern_in_groupOrUnionGraphPattern961 = new Set(array(1, 25));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_FILTER_in_filter993 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 48, 50, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_constraint_in_filter995 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_brackettedExpression_in_constraint1026 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_builtInCall_in_constraint1036 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_functionCall_in_constraint1046 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_iriRef_in_functionCall1068 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_argList_in_functionCall1070 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_argList1099 = new Set(array(75, 91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_WS_in_argList1101 = new Set(array(75, 91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_argList1104 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_argList1112 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_argList1116 = new Set(array(86, 91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_COMMA_in_argList1130 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_argList1134 = new Set(array(86, 91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_argList1140 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_CURLY_BRACE_in_constructTemplate1167 = new Set(array(40, 41, 45, 46, 48, 50, 52, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_constructTriples_in_constructTemplate1170 = new Set(array(45));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_CURLY_BRACE_in_constructTemplate1176 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_triplesSameSubject_in_constructTriples1203 = new Set(array(1, 57));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DOT_in_constructTriples1209 = new Set(array(1, 40, 41, 46, 48, 50, 52, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_constructTriples_in_constructTriples1214 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_varOrTerm_in_triplesSameSubject1248 = new Set(array(27, 46, 48, 50, 52, 53));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_propertyListNotEmpty_in_triplesSameSubject1250 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_triplesNode_in_triplesSameSubject1260 = new Set(array(27, 46, 48, 50, 52, 53));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_propertyList_in_triplesSameSubject1262 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_verb_in_propertyListNotEmpty1293 = new Set(array(40, 41, 46, 48, 50, 52, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_objectList_in_propertyListNotEmpty1297 = new Set(array(1, 84));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_SEMICOLON_in_propertyListNotEmpty1311 = new Set(array(1, 27, 46, 48, 50, 52, 53, 84));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_verb_in_propertyListNotEmpty1317 = new Set(array(40, 41, 46, 48, 50, 52, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_objectList_in_propertyListNotEmpty1321 = new Set(array(1, 84));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_propertyListNotEmpty_in_propertyList1360 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_object_in_objectList1393 = new Set(array(1, 86));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_COMMA_in_objectList1407 = new Set(array(40, 41, 46, 48, 50, 52, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_object_in_objectList1411 = new Set(array(1, 86));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_graphNode_in_object1439 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_varOrIRIref_in_verb1464 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_A_in_verb1474 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_collection_in_triplesNode1499 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_blankNodePropertyList_in_triplesNode1509 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_SQUARE_BRACE_in_blankNodePropertyList1538 = new Set(array(27, 46, 48, 50, 52, 53));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_propertyListNotEmpty_in_blankNodePropertyList1540 = new Set(array(96));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_SQUARE_BRACE_in_blankNodePropertyList1542 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_collection1575 = new Set(array(40, 41, 46, 48, 50, 52, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_graphNode_in_collection1578 = new Set(array(40, 41, 46, 48, 50, 52, 53, 56, 58, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 79, 90, 91, 95));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_collection1584 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_varOrTerm_in_graphNode1607 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_triplesNode_in_graphNode1617 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_variable_in_varOrTerm1642 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_graphTerm_in_varOrTerm1652 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_variable_in_varOrIRIref1677 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_iriRef_in_varOrIRIref1687 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_VAR1_in_variable1722 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_VAR2_in_variable1734 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_iriRef_in_graphTerm1765 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_rdfLiteral_in_graphTerm1777 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericLiteral_in_graphTerm1789 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_booleanLiteral_in_graphTerm1801 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_blankNode_in_graphTerm1813 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_graphTerm1823 = new Set(array(75, 91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_WS_in_graphTerm1825 = new Set(array(75, 91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_graphTerm1828 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_conditionalOrExpression_in_expression1853 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_conditionalAndExpression_in_conditionalOrExpression1888 = new Set(array(1, 82));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OR_in_conditionalOrExpression1898 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_conditionalAndExpression_in_conditionalOrExpression1902 = new Set(array(1, 82));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_valueLogical_in_conditionalAndExpression1939 = new Set(array(1, 81));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_AND_in_conditionalAndExpression1945 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_valueLogical_in_conditionalAndExpression1949 = new Set(array(1, 81));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_relationalExpression_in_valueLogical1977 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericExpression_in_relationalExpression2004 = new Set(array(1, 42, 43, 89, 92, 93, 94));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_EQUAL_in_relationalExpression2018 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericExpression_in_relationalExpression2022 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_NOT_EQUAL_in_relationalExpression2036 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericExpression_in_relationalExpression2040 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_LESS_in_relationalExpression2054 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericExpression_in_relationalExpression2058 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_GREATER_in_relationalExpression2072 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericExpression_in_relationalExpression2076 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_LESS_EQUAL_in_relationalExpression2090 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericExpression_in_relationalExpression2094 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_GREATER_EQUAL_in_relationalExpression2108 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericExpression_in_relationalExpression2112 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_additiveExpression_in_numericExpression2147 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_multiplicativeExpression_in_additiveExpression2178 = new Set(array(1, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_PLUS_in_additiveExpression2195 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_multiplicativeExpression_in_additiveExpression2199 = new Set(array(1, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_MINUS_in_additiveExpression2215 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_multiplicativeExpression_in_additiveExpression2219 = new Set(array(1, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericLiteralPositive_in_additiveExpression2235 = new Set(array(1, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericLiteralNegative_in_additiveExpression2251 = new Set(array(1, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_unaryExpression_in_multiplicativeExpression2299 = new Set(array(1, 85, 88));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_ASTERISK_in_multiplicativeExpression2316 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_unaryExpression_in_multiplicativeExpression2320 = new Set(array(1, 85, 88));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DIVIDE_in_multiplicativeExpression2326 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_unaryExpression_in_multiplicativeExpression2330 = new Set(array(1, 85, 88));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_NOT_SIGN_in_unaryExpression2358 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_primaryExpression_in_unaryExpression2362 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_PLUS_in_unaryExpression2372 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_primaryExpression_in_unaryExpression2376 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_MINUS_in_unaryExpression2386 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_primaryExpression_in_unaryExpression2390 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_primaryExpression_in_unaryExpression2402 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_brackettedExpression_in_primaryExpression2433 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_builtInCall_in_primaryExpression2445 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_iriRefOrFunction_in_primaryExpression2457 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_rdfLiteral_in_primaryExpression2469 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericLiteral_in_primaryExpression2481 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_booleanLiteral_in_primaryExpression2493 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_variable_in_primaryExpression2505 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_brackettedExpression2530 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_brackettedExpression2534 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_brackettedExpression2536 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_STR_in_builtInCall2561 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_builtInCall2563 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2567 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_builtInCall2569 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_LANG_in_builtInCall2579 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_builtInCall2581 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2585 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_builtInCall2587 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_LANGMATCHES_in_builtInCall2597 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_builtInCall2599 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2603 = new Set(array(86));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_COMMA_in_builtInCall2605 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2609 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_builtInCall2611 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DATATYPE_in_builtInCall2621 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_builtInCall2623 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2627 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_builtInCall2629 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_BOUND_in_builtInCall2639 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_builtInCall2641 = new Set(array(52, 53));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_variable_in_builtInCall2643 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_builtInCall2645 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_SAMETERM_in_builtInCall2655 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_builtInCall2657 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2661 = new Set(array(86));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_COMMA_in_builtInCall2663 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2667 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_builtInCall2669 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_ISIRI_in_builtInCall2679 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_builtInCall2681 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2685 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_builtInCall2687 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_ISURI_in_builtInCall2697 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_builtInCall2699 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2703 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_builtInCall2705 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_ISBLANK_in_builtInCall2715 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_builtInCall2717 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2721 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_builtInCall2723 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_ISLITERAL_in_builtInCall2733 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_builtInCall2735 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_builtInCall2739 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_builtInCall2741 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_regexExpression_in_builtInCall2751 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_REGEX_in_regexExpression2776 = new Set(array(90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_BRACE_in_regexExpression2778 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_regexExpression2782 = new Set(array(86));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_COMMA_in_regexExpression2784 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_regexExpression2788 = new Set(array(86, 91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_COMMA_in_regexExpression2792 = new Set(array(29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 50, 52, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 87, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_expression_in_regexExpression2796 = new Set(array(91));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_BRACE_in_regexExpression2801 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_iriRef_in_iriRefOrFunction2838 = new Set(array(1, 90));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_argList_in_iriRefOrFunction2851 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_string_in_rdfLiteral2882 = new Set(array(1, 55, 80));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_LANGTAG_in_rdfLiteral2896 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_REFERENCE_in_rdfLiteral2913 = new Set(array(46, 48, 50));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_iriRef_in_rdfLiteral2915 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericLiteralUnsigned_in_numericLiteral2948 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericLiteralPositive_in_numericLiteral2956 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_numericLiteralNegative_in_numericLiteral2964 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_INTEGER_in_numericLiteralUnsigned2997 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DECIMAL_in_numericLiteralUnsigned3009 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DOUBLE_in_numericLiteralUnsigned3021 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_INTEGER_POSITIVE_in_numericLiteralPositive3052 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DECIMAL_POSITIVE_in_numericLiteralPositive3064 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DOUBLE_POSITIVE_in_numericLiteralPositive3076 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_INTEGER_NEGATIVE_in_numericLiteralNegative3107 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DECIMAL_NEGATIVE_in_numericLiteralNegative3119 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_DOUBLE_NEGATIVE_in_numericLiteralNegative3131 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_TRUE_in_booleanLiteral3164 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_FALSE_in_booleanLiteral3174 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_set_in_string0 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_IRI_REF_in_iriRef3246 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_prefixedName_in_iriRef3256 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_set_in_prefixedName0 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_BLANK_NODE_LABEL_in_blankNode3318 = new Set(array(1));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_OPEN_SQUARE_BRACE_in_blankNode3328 = new Set(array(75, 96));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_WS_in_blankNode3331 = new Set(array(75, 96));
Erfurt_Sparql_Parser_Sparql10_Sparql10_Sparql10::$FOLLOW_CLOSE_SQUARE_BRACE_in_blankNode3335 = new Set(array(1));

?>