<?php
// $ANTLR 3.1.3 “ˆŽ 06, 2009 18:28:01 Tokenizer.g 2010-04-25 18:25:15

/**
 * Do not edit this file
 *
 * This file is part of the {@link http://aksw.org/Projects/Erfurt Erfurt} project.
 *
 * @copyright Copyright (c) 2010, {@link http://aksw.org AKSW}
 * @license http://opensource.org/licenses/gpl-license.php GNU General Public License (GPL)
 */

/**
 * @category Erfurt
 * @package Sparql_Parser_Sparql10
 * @author Rolland Brunec <rollxx@gmail.com>
 * @copyright Copyright (c) 2010 {@link http://aksw.org aksw}
 * @license http://opensource.org/licenses/gpl-license.php GNU General Public License (GPL)
 */



# for convenience in actions
if (!defined('HIDDEN')) define('HIDDEN', BaseRecognizer::$HIDDEN);

 
class Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA15_static {
	static function getValues(){
		$eot = array(5, 65535);
		$eof = array(5, 65535);
		$min = array(2, 46, 3, 65535);
		$max = array(1, 57, 1, 101, 3, 65535);
		$accept = array(2, 65535, 1, 2, 1, 3, 1, 1);
		$special = array(5, 65535);
		$transitionS = array(array(1, 2, 1, 65535, 10, 1), array(1, 4, 1, 65535, 
    10, 1, 43, 65535, 1, 3), array(), array(), array());
		
		$arr = array();
		$arr['eot'] = DFA::unpackRLE($eot);
		$arr['eof'] = DFA::unpackRLE($eof);
		$arr['min'] = DFA::unpackRLE($min, true);
		$arr['max'] = DFA::unpackRLE($max, true);
		$arr['accept'] = DFA::unpackRLE($accept);
		$arr['special'] = DFA::unpackRLE($special);
		
		
		$numStates = sizeof($transitionS);
		$arr['transition'] = array();
		for ($i=0; $i<$numStates; $i++) {
		    $arr['transition'][$i] = DFA::unpackRLE($transitionS[$i]);
		}
		return $arr;
	}
}
//$Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA15 = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA15_static();

class Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA15 extends DFA {

    public function __construct($recognizer) {
//        global $Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA15;
//        $DFA = $Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA15;
		$DFA = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA15_static::getValues();
        $this->recognizer = $recognizer;
        $this->decisionNumber = 15;
        $this->eot = $DFA['eot'];
        $this->eof = $DFA['eof'];
        $this->min = $DFA['min'];
        $this->max = $DFA['max'];
        $this->accept = $DFA['accept'];
        $this->special = $DFA['special'];
        $this->transition = $DFA['transition'];
    }
    public function getDescription() {
        return "287:1: DOUBLE : ( ( DIGIT )+ DOT ( DIGIT )* EXPONENT | DOT ( DIGIT )+ EXPONENT | ( DIGIT )+ EXPONENT );";
    }
}
class Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA30_static {
	static function getValues(){
		$eot = array(1, 65535, 6, 8, 3, 65535);
		$eof = array(10, 65535);
		$min = array(7, 45, 3, 65535);
		$max = array(7, 65533, 3, 65535);
		$accept = array(7, 65535, 1, 2, 1, 3, 1, 1);
		$special = array(10, 65535);
		$transitionS = array(array(1, 2, 1, 7, 1, 65535, 10, 3, 37, 65535, 1, 
    1, 1, 65535, 26, 1, 60, 65535, 1, 4, 8, 65535, 23, 1, 1, 65535, 31, 
    1, 1, 65535, 520, 1, 112, 5, 14, 1, 1, 65535, 7297, 1, 12, 65535, 2, 
    1, 49, 65535, 2, 6, 47, 65535, 288, 1, 2672, 65535, 1008, 1, 17, 65535, 
    43007, 1, 8448, 65535, 1232, 1, 32, 65535, 526, 1), array(2, 9, 1, 65535, 
    10, 9, 37, 65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 
    23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 
    2, 9, 49, 65535, 2, 9, 47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 
    65535, 43007, 9, 8448, 65535, 1232, 9, 32, 65535, 526, 9), array(2, 
    9, 1, 65535, 10, 9, 37, 65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 
    9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 
    9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 288, 9, 2672, 65535, 
    1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 9, 32, 65535, 526, 
    9), array(2, 9, 1, 65535, 10, 9, 37, 65535, 1, 9, 1, 65535, 26, 9, 60, 
    65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 1, 
    65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 288, 9, 
    2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 9, 32, 
    65535, 526, 9), array(2, 9, 1, 65535, 10, 9, 37, 65535, 1, 9, 1, 65535, 
    26, 9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 
    646, 9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 
    288, 9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 
    9, 32, 65535, 526, 9), array(2, 9, 1, 65535, 10, 9, 37, 65535, 1, 9, 
    1, 65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 
    1, 65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 
    9, 47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 
    65535, 1232, 9, 32, 65535, 526, 9), array(2, 9, 1, 65535, 10, 9, 37, 
    65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 
    31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 
    2, 9, 47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 
    8448, 65535, 1232, 9, 32, 65535, 526, 9), array(), array(), array());
		
		$arr = array();
		$arr['eot'] = DFA::unpackRLE($eot);
		$arr['eof'] = DFA::unpackRLE($eof);
		$arr['min'] = DFA::unpackRLE($min, true);
		$arr['max'] = DFA::unpackRLE($max, true);
		$arr['accept'] = DFA::unpackRLE($accept);
		$arr['special'] = DFA::unpackRLE($special);
		
		
		$numStates = sizeof($transitionS);
		$arr['transition'] = array();
		for ($i=0; $i<$numStates; $i++) {
		    $arr['transition'][$i] = DFA::unpackRLE($transitionS[$i]);
		}
		return $arr;
	}
}
//$Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA30 = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA30_static();

class Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA30 extends DFA {

    public function __construct($recognizer) {
//        global $Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA30;
//        $DFA = $Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA30;
		$DFA = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA30_static::getValues();
        $this->recognizer = $recognizer;
        $this->decisionNumber = 30;
        $this->eot = $DFA['eot'];
        $this->eof = $DFA['eof'];
        $this->min = $DFA['min'];
        $this->max = $DFA['max'];
        $this->accept = $DFA['accept'];
        $this->special = $DFA['special'];
        $this->transition = $DFA['transition'];
    }
    public function getDescription() {
        return "()* loopback of 501:5: ( PN_CHARS | DOT )*";
    }
}
class Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA33_static {
	static function getValues(){
		$eot = array(1, 65535, 6, 8, 3, 65535);
		$eof = array(10, 65535);
		$min = array(7, 45, 3, 65535);
		$max = array(7, 65533, 3, 65535);
		$accept = array(7, 65535, 1, 2, 1, 3, 1, 1);
		$special = array(10, 65535);
		$transitionS = array(array(1, 2, 1, 7, 1, 65535, 10, 3, 37, 65535, 1, 
    1, 1, 65535, 26, 1, 60, 65535, 1, 4, 8, 65535, 23, 1, 1, 65535, 31, 
    1, 1, 65535, 520, 1, 112, 5, 14, 1, 1, 65535, 7297, 1, 12, 65535, 2, 
    1, 49, 65535, 2, 6, 47, 65535, 288, 1, 2672, 65535, 1008, 1, 17, 65535, 
    43007, 1, 8448, 65535, 1232, 1, 32, 65535, 526, 1), array(2, 9, 1, 65535, 
    10, 9, 37, 65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 
    23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 
    2, 9, 49, 65535, 2, 9, 47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 
    65535, 43007, 9, 8448, 65535, 1232, 9, 32, 65535, 526, 9), array(2, 
    9, 1, 65535, 10, 9, 37, 65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 
    9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 
    9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 288, 9, 2672, 65535, 
    1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 9, 32, 65535, 526, 
    9), array(2, 9, 1, 65535, 10, 9, 37, 65535, 1, 9, 1, 65535, 26, 9, 60, 
    65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 646, 9, 1, 
    65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 288, 9, 
    2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 9, 32, 
    65535, 526, 9), array(2, 9, 1, 65535, 10, 9, 37, 65535, 1, 9, 1, 65535, 
    26, 9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 1, 65535, 
    646, 9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 9, 47, 65535, 
    288, 9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 65535, 1232, 
    9, 32, 65535, 526, 9), array(2, 9, 1, 65535, 10, 9, 37, 65535, 1, 9, 
    1, 65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 31, 9, 
    1, 65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 2, 
    9, 47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 8448, 
    65535, 1232, 9, 32, 65535, 526, 9), array(2, 9, 1, 65535, 10, 9, 37, 
    65535, 1, 9, 1, 65535, 26, 9, 60, 65535, 1, 9, 8, 65535, 23, 9, 1, 65535, 
    31, 9, 1, 65535, 646, 9, 1, 65535, 7297, 9, 12, 65535, 2, 9, 49, 65535, 
    2, 9, 47, 65535, 288, 9, 2672, 65535, 1008, 9, 17, 65535, 43007, 9, 
    8448, 65535, 1232, 9, 32, 65535, 526, 9), array(), array(), array());
		
		$arr = array();
		$arr['eot'] = DFA::unpackRLE($eot);
		$arr['eof'] = DFA::unpackRLE($eof);
		$arr['min'] = DFA::unpackRLE($min, true);
		$arr['max'] = DFA::unpackRLE($max, true);
		$arr['accept'] = DFA::unpackRLE($accept);
		$arr['special'] = DFA::unpackRLE($special);
		
		
		$numStates = sizeof($transitionS);
		$arr['transition'] = array();
		for ($i=0; $i<$numStates; $i++) {
		    $arr['transition'][$i] = DFA::unpackRLE($transitionS[$i]);
		}
		return $arr;
	}
}
//$Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA33 = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA33_static();

class Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA33 extends DFA {

    public function __construct($recognizer) {
//        global $Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA33;
//        $DFA = $Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA33;
		$DFA = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA33_static::getValues();
        $this->recognizer = $recognizer;
        $this->decisionNumber = 33;
        $this->eot = $DFA['eot'];
        $this->eof = $DFA['eof'];
        $this->min = $DFA['min'];
        $this->max = $DFA['max'];
        $this->accept = $DFA['accept'];
        $this->special = $DFA['special'];
        $this->transition = $DFA['transition'];
    }
    public function getDescription() {
        return "()* loopback of 517:5: ( PN_CHARS | DOT )*";
    }
}
class Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA36_static {
	static function getValues(){
		$eot = array(8, 65535, 1, 70, 8, 65535, 1, 85, 1, 65535, 1, 87, 1, 90, 
    2, 65535, 1, 92, 1, 94, 1, 96, 1, 99, 4, 65535, 1, 107, 8, 65535, 1, 
    109, 2, 65535, 1, 111, 5, 65535, 1, 113, 19, 65535, 1, 129, 14, 65535, 
    1, 147, 6, 65535, 1, 148, 3, 65535, 1, 148, 1, 65535, 1, 150, 2, 65535, 
    1, 154, 1, 65535, 1, 103, 1, 65535, 1, 105, 11, 65535, 1, 163, 2, 65535, 
    1, 166, 7, 65535, 1, 174, 1, 175, 20, 65535, 1, 148, 1, 65535, 1, 193, 
    1, 65535, 1, 193, 1, 65535, 1, 195, 1, 65535, 1, 195, 2, 65535, 1, 197, 
    8, 65535, 1, 205, 6, 65535, 1, 210, 9, 65535, 1, 221, 5, 65535, 1, 227, 
    1, 65535, 1, 193, 1, 65535, 1, 195, 1, 65535, 1, 228, 1, 65535, 1, 230, 
    7, 65535, 1, 237, 3, 65535, 1, 240, 1, 241, 1, 242, 2, 65535, 1, 245, 
    1, 246, 1, 247, 2, 65535, 1, 249, 1, 250, 1, 251, 4, 65535, 1, 254, 
    1, 65535, 1, 255, 7, 65535, 1, 262, 3, 65535, 1, 263, 16, 65535, 1, 
    272, 5, 65535, 1, 276, 1, 65535, 1, 278, 1, 279, 1, 280, 1, 281, 2, 
    65535, 1, 283, 7, 65535, 1, 286, 2, 65535, 1, 288, 3, 65535, 1, 290, 
    1, 65535);
		$eof = array(291, 65535);
		$min = array(1, 9, 16, 45, 1, 33, 1, 45, 2, 48, 2, 65535, 1, 46, 1, 48, 
    2, 46, 2, 0, 2, 65535, 1, 94, 8, 65535, 1, 61, 2, 65535, 1, 61, 4, 65535, 
    22, 45, 1, 65535, 13, 45, 1, 33, 6, 65535, 1, 48, 3, 65535, 1, 48, 1, 
    65535, 1, 46, 1, 48, 1, 65535, 1, 46, 1, 48, 1, 39, 1, 65535, 1, 34, 
    7, 65535, 1, 45, 1, 65535, 15, 45, 1, 65535, 17, 45, 2, 65535, 1, 48, 
    1, 65535, 1, 48, 1, 65535, 1, 48, 1, 65535, 1, 48, 1, 65535, 1, 48, 
    2, 65535, 3, 45, 1, 65535, 2, 45, 1, 65535, 7, 45, 2, 65535, 17, 45, 
    1, 65535, 1, 48, 1, 65535, 1, 48, 1, 65535, 7, 45, 1, 65535, 4, 45, 
    1, 65535, 10, 45, 1, 65535, 5, 45, 2, 65535, 1, 45, 1, 65535, 6, 45, 
    1, 65535, 2, 45, 3, 65535, 2, 45, 3, 65535, 1, 45, 3, 65535, 2, 45, 
    2, 65535, 6, 45, 2, 65535, 8, 45, 1, 65535, 3, 45, 1, 65535, 1, 45, 
    4, 65535, 1, 45, 1, 65535, 2, 45, 1, 65535, 1, 45, 1, 65535, 1, 45, 
    1, 65535);
		$max = array(17, 65533, 1, 65535, 3, 65533, 2, 65535, 1, 101, 3, 57, 2, 
    65535, 2, 65535, 1, 94, 8, 65535, 1, 61, 2, 65535, 1, 61, 4, 65535, 
    22, 65533, 1, 65535, 13, 65533, 1, 65535, 6, 65535, 1, 101, 3, 65535, 
    1, 101, 1, 65535, 1, 101, 1, 57, 1, 65535, 1, 101, 1, 57, 1, 39, 1, 
    65535, 1, 34, 7, 65535, 1, 65533, 1, 65535, 15, 65533, 1, 65535, 17, 
    65533, 2, 65535, 1, 101, 1, 65535, 1, 101, 1, 65535, 1, 101, 1, 65535, 
    1, 101, 1, 65535, 1, 101, 2, 65535, 3, 65533, 1, 65535, 2, 65533, 1, 
    65535, 7, 65533, 2, 65535, 17, 65533, 1, 65535, 1, 101, 1, 65535, 1, 
    101, 1, 65535, 7, 65533, 1, 65535, 4, 65533, 1, 65535, 10, 65533, 1, 
    65535, 5, 65533, 2, 65535, 1, 65533, 1, 65535, 6, 65533, 1, 65535, 2, 
    65533, 3, 65535, 2, 65533, 3, 65535, 1, 65533, 3, 65535, 2, 65533, 2, 
    65535, 6, 65533, 2, 65535, 8, 65533, 1, 65535, 3, 65533, 1, 65535, 1, 
    65533, 4, 65535, 1, 65533, 1, 65535, 2, 65533, 1, 65535, 1, 65533, 1, 
    65535, 1, 65533, 1, 65535);
		$accept = array(21, 65535, 1, 43, 1, 44, 6, 65535, 1, 58, 1, 59, 1, 65535, 
    1, 61, 1, 62, 1, 63, 1, 64, 1, 65, 1, 66, 1, 70, 1, 71, 1, 65535, 1, 
    73, 1, 74, 1, 65535, 1, 77, 1, 78, 1, 82, 1, 83, 22, 65535, 1, 24, 14, 
    65535, 1, 75, 1, 39, 1, 40, 1, 41, 1, 42, 1, 85, 1, 65535, 1, 45, 1, 
    47, 1, 67, 1, 65535, 1, 68, 2, 65535, 1, 69, 3, 65535, 1, 54, 1, 65535, 
    1, 55, 1, 60, 1, 84, 1, 81, 1, 72, 1, 80, 1, 76, 1, 65535, 1, 15, 15, 
    65535, 1, 25, 17, 65535, 1, 79, 1, 46, 1, 65535, 1, 48, 1, 65535, 1, 
    50, 1, 65535, 1, 51, 1, 65535, 1, 53, 1, 65535, 1, 56, 1, 57, 3, 65535, 
    1, 3, 2, 65535, 1, 26, 7, 65535, 1, 9, 1, 16, 17, 65535, 1, 49, 1, 65535, 
    1, 52, 1, 65535, 1, 1, 7, 65535, 1, 17, 4, 65535, 1, 10, 10, 65535, 
    1, 27, 5, 65535, 1, 37, 1, 30, 1, 65535, 1, 11, 6, 65535, 1, 36, 2, 
    65535, 1, 38, 1, 12, 1, 13, 2, 65535, 1, 14, 1, 21, 1, 18, 1, 65535, 
    1, 22, 1, 32, 1, 33, 2, 65535, 1, 2, 1, 4, 6, 65535, 1, 23, 1, 19, 8, 
    65535, 1, 6, 3, 65535, 1, 34, 1, 65535, 1, 31, 1, 5, 1, 8, 1, 29, 1, 
    65535, 1, 20, 2, 65535, 1, 7, 1, 65535, 1, 35, 1, 65535, 1, 28);
		$special = array(27, 65535, 1, 0, 1, 1, 262, 65535);
		$transitionS = array(array(2, 29, 2, 65535, 1, 29, 18, 65535, 1, 29, 1, 
    40, 1, 28, 1, 34, 1, 21, 1, 65535, 1, 32, 1, 27, 1, 44, 1, 45, 1, 38, 
    1, 25, 1, 39, 1, 26, 1, 24, 1, 41, 10, 23, 1, 19, 1, 37, 1, 17, 1, 42, 
    1, 43, 1, 20, 1, 22, 26, 65535, 1, 46, 1, 65535, 1, 47, 1, 31, 1, 30, 
    1, 65535, 1, 8, 1, 1, 1, 7, 1, 5, 1, 18, 1, 9, 1, 12, 1, 18, 1, 15, 
    2, 18, 1, 13, 1, 18, 1, 3, 1, 11, 1, 2, 1, 18, 1, 6, 1, 4, 1, 16, 1, 
    14, 1, 18, 1, 10, 3, 18, 1, 35, 1, 33, 1, 36, 66, 65535, 23, 18, 1, 
    65535, 31, 18, 1, 65535, 520, 18, 112, 65535, 14, 18, 1, 65535, 7297, 
    18, 12, 65535, 2, 18, 98, 65535, 288, 18, 2672, 65535, 1008, 18, 17, 
    65535, 43007, 18, 8448, 65535, 1232, 18, 32, 65535, 526, 18), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 1, 
    48, 13, 51, 1, 50, 9, 51, 1, 49, 1, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 17, 51, 1, 58, 8, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 1, 60, 13, 51, 1, 59, 11, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 1, 63, 3, 51, 1, 61, 14, 51, 1, 62, 6, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 1, 66, 3, 51, 1, 65, 3, 51, 1, 64, 
    17, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 
    520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 
    65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 4, 51, 1, 
    67, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 
    65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 
    49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 14, 51, 
    1, 68, 11, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 
    1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 
    51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 
    65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 18, 
    51, 1, 69, 7, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 1, 
    73, 7, 51, 1, 72, 8, 51, 1, 71, 8, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 7, 51, 1, 74, 18, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 5, 51, 1, 76, 9, 51, 1, 77, 1, 51, 1, 75, 8, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 17, 51, 1, 78, 8, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 1, 80, 7, 51, 1, 79, 17, 51, 60, 
    65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 
    112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 
    56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 
    8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 
    10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 13, 51, 1, 81, 12, 51, 60, 
    65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 
    112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 
    56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 
    8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 
    10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 18, 51, 1, 82, 7, 51, 60, 
    65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 
    112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 
    56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 
    8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 
    10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 17, 51, 1, 83, 8, 51, 60, 
    65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 
    112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 
    56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 
    8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 86, 1, 65535, 25, 
    86, 1, 65535, 1, 84, 30, 86, 1, 65535, 1, 86, 1, 65535, 1, 86, 1, 65535, 
    26, 86, 3, 65535, 65410, 86), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(10, 88, 37, 65535, 1, 88, 1, 65535, 26, 88, 69, 65535, 
    23, 88, 1, 65535, 31, 88, 1, 65535, 520, 88, 112, 65535, 14, 88, 1, 
    65535, 7297, 88, 12, 65535, 2, 88, 98, 65535, 288, 88, 2672, 65535, 
    1008, 88, 17, 65535, 43007, 88, 8448, 65535, 1232, 88, 32, 65535, 526, 
    88), array(10, 89, 37, 65535, 1, 89, 1, 65535, 26, 89, 69, 65535, 23, 
    89, 1, 65535, 31, 89, 1, 65535, 520, 89, 112, 65535, 14, 89, 1, 65535, 
    7297, 89, 12, 65535, 2, 89, 98, 65535, 288, 89, 2672, 65535, 1008, 89, 
    17, 65535, 43007, 89, 8448, 65535, 1232, 89, 32, 65535, 526, 89), array(
    ), array(), array(1, 91, 1, 65535, 10, 23, 43, 65535, 1, 93), array(
    10, 95), array(1, 98, 1, 65535, 10, 97), array(1, 101, 1, 65535, 10, 
    100), array(10, 103, 1, 65535, 2, 103, 1, 65535, 25, 103, 1, 102, 65496, 
    103), array(10, 105, 1, 65535, 2, 105, 1, 65535, 20, 105, 1, 104, 65501, 
    105), array(), array(), array(1, 106), array(), array(), array(), array(
    ), array(), array(), array(), array(), array(1, 108), array(), array(
    ), array(1, 110), array(), array(), array(), array(), array(1, 52, 1, 
    57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 18, 51, 1, 
    112, 7, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 
    65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 
    49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 
    60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 
    51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 
    2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 
    51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 
    1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 20, 51, 1, 114, 
    5, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 
    520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 
    65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 
    60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 
    51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 
    2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 
    51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 
    1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 
    520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 
    65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 
    60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 
    51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 
    2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 
    51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 
    1, 65535, 10, 53, 37, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 
    54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 4, 51, 1, 115, 21, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 19, 51, 1, 116, 6, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 12, 51, 1, 117, 13, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 11, 51, 1, 118, 14, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 17, 51, 1, 119, 8, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 12, 51, 1, 120, 13, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 18, 51, 1, 121, 7, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 18, 51, 1, 122, 7, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 19, 51, 1, 123, 6, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 3, 51, 1, 124, 2, 51, 1, 125, 19, 
    51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 
    520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 
    65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 13, 51, 
    1, 126, 12, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 
    1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 
    51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 
    65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 2, 
    51, 1, 128, 7, 51, 1, 127, 15, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 
    1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 
    51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 
    1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 
    51), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 
    1, 51, 1, 65535, 14, 51, 1, 130, 11, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 11, 51, 1, 131, 14, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 11, 51, 1, 132, 14, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 4, 51, 1, 133, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 3, 51, 1, 134, 22, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 5, 51, 1, 135, 20, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 19, 51, 1, 136, 6, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 1, 138, 13, 51, 1, 137, 11, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 12, 51, 1, 139, 13, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 13, 51, 1, 140, 12, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 8, 51, 1, 141, 17, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 1, 51, 1, 144, 6, 51, 1, 142, 2, 51, 1, 145, 8, 51, 1, 
    143, 5, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 
    65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 
    49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 20, 51, 
    1, 146, 5, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 
    1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 
    51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 
    65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 86, 1, 65535, 25, 86, 1, 65535, 31, 86, 1, 65535, 1, 86, 1, 65535, 
    1, 86, 1, 65535, 26, 86, 3, 65535, 65410, 86), array(), array(), array(
    ), array(), array(), array(), array(10, 149, 43, 65535, 1, 93), array(
    ), array(), array(), array(10, 95, 43, 65535, 1, 93), array(), array(
    1, 151, 1, 65535, 10, 97, 43, 65535, 1, 152), array(10, 153), array(
    ), array(1, 155, 1, 65535, 10, 100, 43, 65535, 1, 156), array(10, 157), 
    array(1, 158), array(), array(1, 159), array(), array(), array(), array(
    ), array(), array(), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 4, 51, 1, 160, 21, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(), array(1, 52, 1, 57, 1, 65535, 
    10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 13, 51, 1, 161, 12, 51, 60, 
    65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 
    112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 
    56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 
    8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 
    10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 5, 51, 1, 162, 20, 51, 60, 
    65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 
    112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 
    56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 
    8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 
    10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 
    8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 
    51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 
    288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 4, 51, 1, 164, 21, 51, 60, 65535, 1, 54, 
    8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 
    51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 
    288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 4, 51, 1, 165, 21, 51, 60, 65535, 1, 54, 
    8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 
    51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 
    288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 4, 51, 1, 167, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 19, 51, 1, 168, 6, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 2, 51, 1, 169, 23, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 1, 170, 25, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 
    65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 
    12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 
    1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 
    51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 
    1, 65535, 20, 51, 1, 171, 5, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 
    1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 
    51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 
    1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 
    51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 
    1, 65535, 4, 51, 1, 172, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 
    1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 
    51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 
    1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 
    51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 
    1, 65535, 18, 51, 1, 173, 7, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 
    1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 
    51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 
    1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 
    51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 
    1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 
    51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 
    520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 
    65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 12, 
    51, 1, 176, 13, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 19, 
    51, 1, 177, 6, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 18, 
    51, 1, 178, 7, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 17, 
    51, 1, 179, 8, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 4, 
    51, 1, 180, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 18, 
    51, 1, 181, 7, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 8, 
    51, 1, 182, 17, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 20, 
    51, 1, 183, 5, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 15, 
    51, 1, 184, 10, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 8, 
    51, 1, 185, 17, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 6, 
    51, 1, 186, 19, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 14, 
    51, 1, 187, 11, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 17, 
    51, 1, 188, 8, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 17, 
    51, 1, 189, 8, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 11, 
    51, 1, 190, 14, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 8, 
    51, 1, 191, 17, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 4, 
    51, 1, 192, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    ), array(), array(10, 149, 43, 65535, 1, 93), array(), array(10, 194, 
    43, 65535, 1, 152), array(), array(10, 153, 43, 65535, 1, 152), array(
    ), array(10, 196, 43, 65535, 1, 156), array(), array(10, 157, 43, 65535, 
    1, 156), array(), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 
    19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 3, 51, 1, 198, 22, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 8, 51, 1, 199, 17, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 
    65535, 1, 51, 1, 65535, 3, 51, 1, 200, 22, 51, 60, 65535, 1, 54, 8, 
    65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 
    1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 
    51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 2, 51, 1, 201, 23, 51, 60, 65535, 1, 54, 
    8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 
    51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 
    288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(), array(1, 52, 1, 57, 1, 65535, 10, 
    53, 1, 19, 36, 65535, 1, 51, 1, 65535, 19, 51, 1, 202, 6, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 8, 51, 1, 203, 17, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 17, 51, 1, 204, 8, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 19, 51, 1, 206, 6, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 2, 51, 1, 207, 23, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 23, 51, 1, 208, 2, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 19, 51, 1, 209, 6, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(), array(), array(1, 52, 1, 57, 
    1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 4, 51, 1, 211, 21, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 4, 51, 1, 212, 21, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 4, 51, 1, 213, 21, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 17, 51, 1, 214, 8, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 4, 51, 1, 215, 21, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 14, 51, 1, 216, 11, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 15, 51, 1, 217, 10, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 7, 51, 1, 218, 18, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 19, 51, 1, 219, 6, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 12, 51, 1, 220, 13, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 13, 51, 1, 222, 12, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 8, 51, 1, 223, 17, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 8, 51, 1, 224, 17, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 1, 225, 25, 51, 60, 65535, 1, 54, 
    8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 
    51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 
    288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 19, 51, 1, 226, 6, 51, 60, 65535, 1, 54, 
    8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 
    51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 
    288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(), array(10, 194, 43, 65535, 1, 152), array(), array(
    10, 196, 43, 65535, 1, 156), array(), array(1, 52, 1, 57, 1, 65535, 
    10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 
    8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 
    51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 
    288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 23, 51, 1, 229, 2, 51, 60, 65535, 1, 54, 
    8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 
    51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 
    288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 19, 51, 1, 231, 6, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 4, 51, 1, 232, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 13, 51, 1, 233, 12, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 8, 51, 1, 234, 17, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 
    65535, 1, 51, 1, 65535, 24, 51, 1, 235, 1, 51, 60, 65535, 1, 54, 8, 
    65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 
    1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 
    51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 4, 51, 1, 236, 21, 51, 60, 65535, 1, 54, 
    8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 
    51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 
    288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 17, 51, 1, 238, 8, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 
    65535, 1, 51, 1, 65535, 17, 51, 1, 239, 8, 51, 60, 65535, 1, 54, 8, 
    65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 
    1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 
    51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 
    520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 
    65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 19, 51, 
    1, 243, 6, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 
    1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 
    51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 
    65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 13, 
    51, 1, 244, 12, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 
    51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 
    520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 
    65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 
    60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 
    51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 
    2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 
    51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 
    1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 1, 248, 25, 51, 60, 65535, 1, 54, 
    8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 
    51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 
    288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(), array(1, 52, 1, 57, 1, 65535, 10, 
    53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 
    65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 
    1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 
    51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    13, 51, 1, 252, 12, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    4, 51, 1, 253, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 
    1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    17, 51, 1, 256, 8, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    2, 51, 1, 257, 23, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    1, 51, 1, 258, 24, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    15, 51, 1, 259, 10, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    3, 51, 1, 260, 22, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 20, 51, 1, 261, 5, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(), array(), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 
    19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 1, 264, 25, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 
    65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 
    12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 
    1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 
    51), array(), array(), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 19, 51, 1, 265, 6, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(), array(), array(), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 10, 51, 
    1, 266, 15, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 
    1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 
    51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 
    65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 17, 
    51, 1, 267, 8, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    ), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 
    1, 51, 1, 65535, 12, 51, 1, 268, 13, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 19, 51, 1, 269, 6, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 4, 51, 1, 270, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 4, 51, 1, 271, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    2, 51, 1, 273, 23, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 
    1, 51, 1, 65535, 11, 51, 1, 274, 14, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 2, 51, 1, 275, 23, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 
    31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 
    65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 
    51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), 
    array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 
    1, 277, 25, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 
    1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 
    51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 
    65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 
    51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 
    520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 
    65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 
    1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 
    60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 
    51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 
    2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 
    51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 
    1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 
    1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 
    14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 
    65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 
    1232, 51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 
    1, 19, 36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 
    23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 
    65535, 1, 51, 1, 65535, 19, 51, 1, 282, 6, 51, 60, 65535, 1, 54, 8, 
    65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 
    1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 
    51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 
    36, 65535, 1, 51, 1, 65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 
    51, 1, 65535, 7, 51, 1, 284, 18, 51, 60, 65535, 1, 54, 8, 65535, 23, 
    51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 
    7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 
    65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 
    526, 51), array(), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 
    65535, 1, 51, 1, 65535, 11, 51, 1, 285, 14, 51, 60, 65535, 1, 54, 8, 
    65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 520, 51, 112, 55, 14, 51, 
    1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 65535, 2, 56, 47, 65535, 288, 
    51, 2672, 65535, 1008, 51, 17, 65535, 43007, 51, 8448, 65535, 1232, 
    51, 32, 65535, 526, 51), array(), array(), array(), array(), array(1, 
    52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 
    51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 
    520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 
    65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 4, 
    51, 1, 287, 21, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 26, 
    51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 1, 65535, 
    520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 51, 49, 
    65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 65535, 
    43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(), array(
    1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 65535, 18, 
    51, 1, 289, 7, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 
    51, 1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 
    2, 51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 
    17, 65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    ), array(1, 52, 1, 57, 1, 65535, 10, 53, 1, 19, 36, 65535, 1, 51, 1, 
    65535, 26, 51, 60, 65535, 1, 54, 8, 65535, 23, 51, 1, 65535, 31, 51, 
    1, 65535, 520, 51, 112, 55, 14, 51, 1, 65535, 7297, 51, 12, 65535, 2, 
    51, 49, 65535, 2, 56, 47, 65535, 288, 51, 2672, 65535, 1008, 51, 17, 
    65535, 43007, 51, 8448, 65535, 1232, 51, 32, 65535, 526, 51), array(
    ));
		
		$arr = array();
		$arr['eot'] = DFA::unpackRLE($eot);
		$arr['eof'] = DFA::unpackRLE($eof);
		$arr['min'] = DFA::unpackRLE($min, true);
		$arr['max'] = DFA::unpackRLE($max, true);
		$arr['accept'] = DFA::unpackRLE($accept);
		$arr['special'] = DFA::unpackRLE($special);
		
		
		$numStates = sizeof($transitionS);
		$arr['transition'] = array();
		for ($i=0; $i<$numStates; $i++) {
		    $arr['transition'][$i] = DFA::unpackRLE($transitionS[$i]);
		}
		return $arr;
	}
}
//$Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA36 = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA36_static();

class Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA36 extends DFA {

    public function __construct($recognizer) {
//        global $Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA36;
//        $DFA = $Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA36;
		$DFA = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA36_static::getValues();
        $this->recognizer = $recognizer;
        $this->decisionNumber = 36;
        $this->eot = $DFA['eot'];
        $this->eof = $DFA['eof'];
        $this->min = $DFA['min'];
        $this->max = $DFA['max'];
        $this->accept = $DFA['accept'];
        $this->special = $DFA['special'];
        $this->transition = $DFA['transition'];
    }
    public function getDescription() {
        return "1:1: Tokens : ( BASE | PREFIX | NOT | SELECT | DISTINCT | REDUCED | CONSTRUCT | DESCRIBE | ASK | FROM | NAMED | WHERE | ORDER | GROUP | BY | ASC | DESC | LIMIT | OFFSET | OPTIONAL | GRAPH | UNION | FILTER | A | AS | STR | LANG | LANGMATCHES | DATATYPE | BOUND | SAMETERM | ISIRI | ISURI | ISBLANK | ISLITERAL | REGEX | TRUE | FALSE | IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | LANGTAG | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | BLANK_NODE_LABEL | REFERENCE | AND | OR | COMMENT | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | SEMICOLON | DOT | PLUS | MINUS | ASTERISK | COMMA | NOT_SIGN | DIVIDE | EQUAL | LESS | GREATER | OPEN_BRACE | CLOSE_BRACE | LESS_EQUAL | GREATER_EQUAL | NOT_EQUAL | OPEN_SQUARE_BRACE | CLOSE_SQUARE_BRACE | HAT_LABEL | QUESTION_MARK_LABEL );";
    }
    public function specialStateTransition($s, IntStream $_input) {
        $input = $_input;
    	$_s = $s;
        switch ( $s ) {
                case 0 : 
                    $LA36_27 = $input->LA(1);

                    $s = -1;
                    if ( ($LA36_27==$this->getToken('39')) ) {$s = 102;}

                    else if ( (($LA36_27>=$this->getToken('0') && $LA36_27<=$this->getToken('9'))||($LA36_27>=$this->getToken('11') && $LA36_27<=$this->getToken('12'))||($LA36_27>=$this->getToken('14') && $LA36_27<=$this->getToken('38'))||($LA36_27>=$this->getToken('40') && $LA36_27<=$this->getToken('65535'))) ) {$s = 103;}

                    if ( $s>=0 ) return $s;
                    break;
                case 1 : 
                    $LA36_28 = $input->LA(1);

                    $s = -1;
                    if ( ($LA36_28==$this->getToken('34')) ) {$s = 104;}

                    else if ( (($LA36_28>=$this->getToken('0') && $LA36_28<=$this->getToken('9'))||($LA36_28>=$this->getToken('11') && $LA36_28<=$this->getToken('12'))||($LA36_28>=$this->getToken('14') && $LA36_28<=$this->getToken('33'))||($LA36_28>=$this->getToken('35') && $LA36_28<=$this->getToken('65535'))) ) {$s = 105;}

                    if ( $s>=0 ) return $s;
                    break;
        }
        $nvae =
            new NoViableAltException($this->getDescription(), 36, $_s, $input);
        $this->error($nvae);
        throw $nvae;        
    }
}
      

class Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer extends AntlrLexer {
    static $PREFIX=5;
    static $EXPONENT=60;
    static $CLOSE_SQUARE_BRACE=96;
    static $GRAPH=24;
    static $REGEX=39;
    static $PNAME_LN=50;
    static $CONSTRUCT=10;
    static $NOT=6;
    static $EOF=-1;
    static $VARNAME=51;
    static $ISLITERAL=38;
    static $GREATER=43;
    static $EOL=74;
    static $NOT_EQUAL=94;
    static $LESS=42;
    static $LANGMATCHES=31;
    static $DOUBLE=61;
    static $PN_CHARS_U=77;
    static $BASE=4;
    static $COMMENT=83;
    static $OPEN_CURLY_BRACE=44;
    static $SELECT=7;
    static $CLOSE_CURLY_BRACE=45;
    static $DOUBLE_POSITIVE=65;
    static $DIVIDE=88;
    static $BOUND=33;
    static $ISIRI=35;
    static $A=27;
    static $NOT_SIGN=87;
    static $ASC=19;
    static $BLANK_NODE_LABEL=79;
    static $ASK=12;
    static $SEMICOLON=84;
    static $QUESTION_MARK_LABEL=98;
    static $ISBLANK=37;
    static $GROUP=17;
    static $WS=75;
    static $INTEGER_POSITIVE=63;
    static $NAMED=14;
    static $OR=82;
    static $STRING_LITERAL2=71;
    static $FILTER=26;
    static $DESCRIBE=11;
    static $STRING_LITERAL1=70;
    static $PN_CHARS=78;
    static $DATATYPE=32;
    static $LESS_EQUAL=92;
    static $DOUBLE_NEGATIVE=68;
    static $FROM=13;
    static $FALSE=41;
    static $DISTINCT=8;
    static $LANG=30;
    static $WHERE=15;
    static $IRI_REF=46;
    static $ORDER=16;
    static $LIMIT=21;
    static $AND=81;
    static $ASTERISK=85;
    static $ISURI=36;
    static $STR=29;
    static $AS=28;
    static $SAMETERM=34;
    static $COMMA=86;
    static $OFFSET=22;
    static $DECIMAL_POSITIVE=64;
    static $EQUAL=89;
    static $PLUS=62;
    static $DIGIT=59;
    static $DOT=57;
    static $INTEGER=56;
    static $BY=18;
    static $REDUCED=9;
    static $INTEGER_NEGATIVE=66;
    static $PN_LOCAL=49;
    static $PNAME_NS=48;
    static $REFERENCE=80;
    static $CLOSE_BRACE=91;
    static $MINUS=54;
    static $Tokens=99;
    static $TRUE=40;
    static $OPEN_SQUARE_BRACE=95;
    static $UNION=25;
    static $ECHAR=69;
    static $OPTIONAL=23;
    static $HAT_LABEL=97;
    static $STRING_LITERAL_LONG2=73;
    static $PN_CHARS_BASE=76;
    static $DECIMAL=58;
    static $VAR1=52;
    static $STRING_LITERAL_LONG1=72;
    static $VAR2=53;
    static $DECIMAL_NEGATIVE=67;
    static $PN_PREFIX=47;
    static $DESC=20;
    static $OPEN_BRACE=90;
    static $GREATER_EQUAL=93;
    static $LANGTAG=55;

    // delegates
    // delegators
    /**
    * @param Erfurt_Sparql_Parser_Sparql10_Sparql10Lexer $gErfurt_Sparql_Parser_Sparql10_Sparql10
    */
    public $gErfurt_Sparql_Parser_Sparql10_Sparql10;
    /**
    * @param Erfurt_Sparql_Parser_Sparql10_Sparql10Lexer $gErfurt_Sparql_Parser_Sparql10_Sparql10
    */
    public $gParent;

    function __construct($input, $state=null){
        parent::__construct($input,$state);

        $this->gErfurt_Sparql_Parser_Sparql10_Sparql10 = $this->gErfurt_Sparql_Parser_Sparql10_Sparql10;
        $this->gParent = $this->gErfurt_Sparql_Parser_Sparql10_Sparql10;
        
            $this->dfa15 = new Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA15($this);
            $this->dfa30 = new Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA30($this);
            $this->dfa33 = new Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA33($this);
            $this->dfa36 = new Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer_DFA36($this);
    }
    function getGrammarFileName() { return "Tokenizer.g"; }

    // $ANTLR start "BASE"
    function mBASE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$BASE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:26:3: ( 'base' ) 
            // Tokenizer.g:27:3: 'base' 
            {
            $this->matchString("base"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BASE"

    // $ANTLR start "PREFIX"
    function mPREFIX(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$PREFIX;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:31:3: ( 'prefix' ) 
            // Tokenizer.g:32:3: 'prefix' 
            {
            $this->matchString("prefix"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PREFIX"

    // $ANTLR start "NOT"
    function mNOT(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$NOT;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:41:3: ( 'not' ) 
            // Tokenizer.g:42:3: 'not' 
            {
            $this->matchString("not"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NOT"

    // $ANTLR start "SELECT"
    function mSELECT(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$SELECT;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:46:3: ( 'select' ) 
            // Tokenizer.g:47:3: 'select' 
            {
            $this->matchString("select"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SELECT"

    // $ANTLR start "DISTINCT"
    function mDISTINCT(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DISTINCT;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:51:3: ( 'distinct' ) 
            // Tokenizer.g:52:3: 'distinct' 
            {
            $this->matchString("distinct"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DISTINCT"

    // $ANTLR start "REDUCED"
    function mREDUCED(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$REDUCED;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:56:3: ( 'reduced' ) 
            // Tokenizer.g:57:3: 'reduced' 
            {
            $this->matchString("reduced"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "REDUCED"

    // $ANTLR start "CONSTRUCT"
    function mCONSTRUCT(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$CONSTRUCT;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:61:3: ( 'construct' ) 
            // Tokenizer.g:62:3: 'construct' 
            {
            $this->matchString("construct"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CONSTRUCT"

    // $ANTLR start "DESCRIBE"
    function mDESCRIBE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DESCRIBE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:66:3: ( 'describe' ) 
            // Tokenizer.g:67:3: 'describe' 
            {
            $this->matchString("describe"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DESCRIBE"

    // $ANTLR start "ASK"
    function mASK(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$ASK;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:71:3: ( 'ask' ) 
            // Tokenizer.g:72:3: 'ask' 
            {
            $this->matchString("ask"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ASK"

    // $ANTLR start "FROM"
    function mFROM(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$FROM;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:76:3: ( 'from' ) 
            // Tokenizer.g:77:3: 'from' 
            {
            $this->matchString("from"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "FROM"

    // $ANTLR start "NAMED"
    function mNAMED(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$NAMED;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:81:3: ( 'named' ) 
            // Tokenizer.g:82:3: 'named' 
            {
            $this->matchString("named"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NAMED"

    // $ANTLR start "WHERE"
    function mWHERE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$WHERE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:86:3: ( 'where' ) 
            // Tokenizer.g:87:3: 'where' 
            {
            $this->matchString("where"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "WHERE"

    // $ANTLR start "ORDER"
    function mORDER(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$ORDER;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:91:3: ( 'order' ) 
            // Tokenizer.g:92:3: 'order' 
            {
            $this->matchString("order"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ORDER"

    // $ANTLR start "GROUP"
    function mGROUP(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$GROUP;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:96:3: ( 'group' ) 
            // Tokenizer.g:97:3: 'group' 
            {
            $this->matchString("group"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GROUP"

    // $ANTLR start "BY"
    function mBY(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$BY;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:101:3: ( 'by' ) 
            // Tokenizer.g:102:3: 'by' 
            {
            $this->matchString("by"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BY"

    // $ANTLR start "ASC"
    function mASC(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$ASC;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:106:3: ( 'asc' ) 
            // Tokenizer.g:107:3: 'asc' 
            {
            $this->matchString("asc"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ASC"

    // $ANTLR start "DESC"
    function mDESC(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DESC;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:111:3: ( 'desc' ) 
            // Tokenizer.g:112:3: 'desc' 
            {
            $this->matchString("desc"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DESC"

    // $ANTLR start "LIMIT"
    function mLIMIT(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$LIMIT;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:116:3: ( 'limit' ) 
            // Tokenizer.g:117:3: 'limit' 
            {
            $this->matchString("limit"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LIMIT"

    // $ANTLR start "OFFSET"
    function mOFFSET(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$OFFSET;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:121:3: ( 'offset' ) 
            // Tokenizer.g:122:3: 'offset' 
            {
            $this->matchString("offset"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OFFSET"

    // $ANTLR start "OPTIONAL"
    function mOPTIONAL(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$OPTIONAL;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:126:3: ( 'optional' ) 
            // Tokenizer.g:127:3: 'optional' 
            {
            $this->matchString("optional"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPTIONAL"

    // $ANTLR start "GRAPH"
    function mGRAPH(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$GRAPH;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:131:3: ( 'graph' ) 
            // Tokenizer.g:132:3: 'graph' 
            {
            $this->matchString("graph"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GRAPH"

    // $ANTLR start "UNION"
    function mUNION(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$UNION;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:136:3: ( 'union' ) 
            // Tokenizer.g:137:3: 'union' 
            {
            $this->matchString("union"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "UNION"

    // $ANTLR start "FILTER"
    function mFILTER(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$FILTER;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:141:3: ( 'filter' ) 
            // Tokenizer.g:142:3: 'filter' 
            {
            $this->matchString("filter"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "FILTER"

    // $ANTLR start "AS"
    function mAS(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$AS;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:151:3: ( 'as' ) 
            // Tokenizer.g:152:3: 'as' 
            {
            $this->matchString("as"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "AS"

    // $ANTLR start "STR"
    function mSTR(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$STR;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:156:3: ( 'str' ) 
            // Tokenizer.g:157:3: 'str' 
            {
            $this->matchString("str"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STR"

    // $ANTLR start "LANG"
    function mLANG(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$LANG;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:161:3: ( 'lang' ) 
            // Tokenizer.g:162:3: 'lang' 
            {
            $this->matchString("lang"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LANG"

    // $ANTLR start "LANGMATCHES"
    function mLANGMATCHES(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$LANGMATCHES;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:166:3: ( 'langmatches' ) 
            // Tokenizer.g:167:3: 'langmatches' 
            {
            $this->matchString("langmatches"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LANGMATCHES"

    // $ANTLR start "DATATYPE"
    function mDATATYPE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DATATYPE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:171:3: ( 'datatype' ) 
            // Tokenizer.g:172:3: 'datatype' 
            {
            $this->matchString("datatype"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DATATYPE"

    // $ANTLR start "BOUND"
    function mBOUND(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$BOUND;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:176:3: ( 'bound' ) 
            // Tokenizer.g:177:3: 'bound' 
            {
            $this->matchString("bound"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BOUND"

    // $ANTLR start "SAMETERM"
    function mSAMETERM(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$SAMETERM;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:181:3: ( 'sameterm' ) 
            // Tokenizer.g:182:3: 'sameterm' 
            {
            $this->matchString("sameterm"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SAMETERM"

    // $ANTLR start "ISIRI"
    function mISIRI(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$ISIRI;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:186:3: ( 'isiri' ) 
            // Tokenizer.g:187:3: 'isiri' 
            {
            $this->matchString("isiri"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISIRI"

    // $ANTLR start "ISURI"
    function mISURI(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$ISURI;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:191:3: ( 'isuri' ) 
            // Tokenizer.g:192:3: 'isuri' 
            {
            $this->matchString("isuri"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISURI"

    // $ANTLR start "ISBLANK"
    function mISBLANK(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$ISBLANK;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:196:3: ( 'isblank' ) 
            // Tokenizer.g:197:3: 'isblank' 
            {
            $this->matchString("isblank"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISBLANK"

    // $ANTLR start "ISLITERAL"
    function mISLITERAL(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$ISLITERAL;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:201:3: ( 'isliteral' ) 
            // Tokenizer.g:202:3: 'isliteral' 
            {
            $this->matchString("isliteral"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISLITERAL"

    // $ANTLR start "REGEX"
    function mREGEX(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$REGEX;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:206:3: ( 'regex' ) 
            // Tokenizer.g:207:3: 'regex' 
            {
            $this->matchString("regex"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "REGEX"

    // $ANTLR start "TRUE"
    function mTRUE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$TRUE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:211:3: ( 'true' ) 
            // Tokenizer.g:212:3: 'true' 
            {
            $this->matchString("true"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "TRUE"

    // $ANTLR start "FALSE"
    function mFALSE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$FALSE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:216:3: ( 'false' ) 
            // Tokenizer.g:217:3: 'false' 
            {
            $this->matchString("false"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "FALSE"

    // $ANTLR start "IRI_REF"
    function mIRI_REF(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$IRI_REF;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:226:3: ( LESS ( options {greedy=false; } : ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* GREATER ) 
            // Tokenizer.g:227:3: LESS ( options {greedy=false; } : ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* GREATER 
            {
            $this->mLESS(); 
            // Tokenizer.g:228:3: ( options {greedy=false; } : ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* 
            //loop1:
            do {
                $alt1=2;
                $LA1_0 = $this->input->LA(1);

                if ( ($LA1_0==$this->getToken('33')||($LA1_0>=$this->getToken('35') && $LA1_0<=$this->getToken('59'))||$LA1_0==$this->getToken('61')||($LA1_0>=$this->getToken('63') && $LA1_0<=$this->getToken('91'))||$LA1_0==$this->getToken('93')||$LA1_0==$this->getToken('95')||($LA1_0>=$this->getToken('97') && $LA1_0<=$this->getToken('122'))||($LA1_0>=$this->getToken('126') && $LA1_0<=$this->getToken('65535'))) ) {
                    $alt1=1;
                }
                else if ( ($LA1_0==$this->getToken('62')) ) {
                    $alt1=2;
                }


                switch ($alt1) {
            	case 1 :
            	    // Tokenizer.g:229:5: ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) 
            	    {
            	    if ( $this->input->LA(1)==$this->getToken('33')||($this->input->LA(1)>=$this->getToken('35') && $this->input->LA(1)<=$this->getToken('59'))||$this->input->LA(1)==$this->getToken('61')||($this->input->LA(1)>=$this->getToken('63') && $this->input->LA(1)<=$this->getToken('91'))||$this->input->LA(1)==$this->getToken('93')||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('126') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;

            	default :
            	    break 2;//loop1;
                }
            } while (true);

            $this->mGREATER(); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "IRI_REF"

    // $ANTLR start "PNAME_NS"
    function mPNAME_NS(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$PNAME_NS;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            $p=null;

            // Tokenizer.g:246:3: ( (p= PN_PREFIX )? ':' ) 
            // Tokenizer.g:247:3: (p= PN_PREFIX )? ':' 
            {
            // Tokenizer.g:247:4: (p= PN_PREFIX )? 
            $alt2=2;
            $LA2_0 = $this->input->LA(1);

            if ( (($LA2_0>=$this->getToken('97') && $LA2_0<=$this->getToken('122'))||($LA2_0>=$this->getToken('192') && $LA2_0<=$this->getToken('214'))||($LA2_0>=$this->getToken('216') && $LA2_0<=$this->getToken('246'))||($LA2_0>=$this->getToken('248') && $LA2_0<=$this->getToken('767'))||($LA2_0>=$this->getToken('880') && $LA2_0<=$this->getToken('893'))||($LA2_0>=$this->getToken('895') && $LA2_0<=$this->getToken('8191'))||($LA2_0>=$this->getToken('8204') && $LA2_0<=$this->getToken('8205'))||($LA2_0>=$this->getToken('8304') && $LA2_0<=$this->getToken('8591'))||($LA2_0>=$this->getToken('11264') && $LA2_0<=$this->getToken('12271'))||($LA2_0>=$this->getToken('12289') && $LA2_0<=$this->getToken('55295'))||($LA2_0>=$this->getToken('63744') && $LA2_0<=$this->getToken('64975'))||($LA2_0>=$this->getToken('65008') && $LA2_0<=$this->getToken('65533'))) ) {
                $alt2=1;
            }
            switch ($alt2) {
                case 1 :
                    // Tokenizer.g:247:4: p= PN_PREFIX 
                    {
                    $pStart762 = $this->getCharIndex();
                    $this->mPN_PREFIX(); 
                    $p = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $pStart762, $this->getCharIndex()-1);

                    }
                    break;

            }

            $this->matchChar(58); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PNAME_NS"

    // $ANTLR start "PNAME_LN"
    function mPNAME_LN(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$PNAME_LN;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:251:3: ( PNAME_NS PN_LOCAL ) 
            // Tokenizer.g:252:3: PNAME_NS PN_LOCAL 
            {
            $this->mPNAME_NS(); 
            $this->mPN_LOCAL(); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PNAME_LN"

    // $ANTLR start "VAR1"
    function mVAR1(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$VAR1;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            $v=null;

            // Tokenizer.g:256:3: ( '?' v= VARNAME ) 
            // Tokenizer.g:257:3: '?' v= VARNAME 
            {
            $this->matchChar(63); 
            $vStart801 = $this->getCharIndex();
            $this->mVARNAME(); 
            $v = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $vStart801, $this->getCharIndex()-1);

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "VAR1"

    // $ANTLR start "VAR2"
    function mVAR2(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$VAR2;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            $v=null;

            // Tokenizer.g:261:3: ( '$' v= VARNAME ) 
            // Tokenizer.g:262:3: '$' v= VARNAME 
            {
            $this->matchChar(36); 
            $vStart820 = $this->getCharIndex();
            $this->mVARNAME(); 
            $v = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $vStart820, $this->getCharIndex()-1);

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "VAR2"

    // $ANTLR start "LANGTAG"
    function mLANGTAG(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$LANGTAG;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:266:3: ( '@' ( ( 'a' .. 'z' ) )+ ( MINUS ( ( 'a' .. 'z' ) ( '0' .. '9' ) )+ )* ) 
            // Tokenizer.g:267:3: '@' ( ( 'a' .. 'z' ) )+ ( MINUS ( ( 'a' .. 'z' ) ( '0' .. '9' ) )+ )* 
            {
            $this->matchChar(64); 
            // Tokenizer.g:267:7: ( ( 'a' .. 'z' ) )+ 
            $cnt3=0;
            //loop3:
            do {
                $alt3=2;
                $LA3_0 = $this->input->LA(1);

                if ( (($LA3_0>=$this->getToken('97') && $LA3_0<=$this->getToken('122'))) ) {
                    $alt3=1;
                }


                switch ($alt3) {
            	case 1 :
            	    // Tokenizer.g:267:9: ( 'a' .. 'z' ) 
            	    {
            	    // Tokenizer.g:267:9: ( 'a' .. 'z' ) 
            	    // Tokenizer.g:267:10: 'a' .. 'z' 
            	    {
            	    $this->matchRange(97,122); 

            	    }


            	    }
            	    break;

            	default :
            	    if ( $cnt3 >= 1 ) break 2;//loop3;
                        $eee =
                            new EarlyExitException(3, $this->input);
                        throw $eee;
                }
                $cnt3++;
            } while (true);

            // Tokenizer.g:268:3: ( MINUS ( ( 'a' .. 'z' ) ( '0' .. '9' ) )+ )* 
            //loop5:
            do {
                $alt5=2;
                $LA5_0 = $this->input->LA(1);

                if ( ($LA5_0==$this->getToken('45')) ) {
                    $alt5=1;
                }


                switch ($alt5) {
            	case 1 :
            	    // Tokenizer.g:269:5: MINUS ( ( 'a' .. 'z' ) ( '0' .. '9' ) )+ 
            	    {
            	    $this->mMINUS(); 
            	    // Tokenizer.g:270:5: ( ( 'a' .. 'z' ) ( '0' .. '9' ) )+ 
            	    $cnt4=0;
            	    //loop4:
            	    do {
            	        $alt4=2;
            	        $LA4_0 = $this->input->LA(1);

            	        if ( (($LA4_0>=$this->getToken('97') && $LA4_0<=$this->getToken('122'))) ) {
            	            $alt4=1;
            	        }


            	        switch ($alt4) {
            	    	case 1 :
            	    	    // Tokenizer.g:271:7: ( 'a' .. 'z' ) ( '0' .. '9' ) 
            	    	    {
            	    	    // Tokenizer.g:271:7: ( 'a' .. 'z' ) 
            	    	    // Tokenizer.g:271:8: 'a' .. 'z' 
            	    	    {
            	    	    $this->matchRange(97,122); 

            	    	    }

            	    	    // Tokenizer.g:271:18: ( '0' .. '9' ) 
            	    	    // Tokenizer.g:271:19: '0' .. '9' 
            	    	    {
            	    	    $this->matchRange(48,57); 

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( $cnt4 >= 1 ) break 2;//loop4;
            	                $eee =
            	                    new EarlyExitException(4, $this->input);
            	                throw $eee;
            	        }
            	        $cnt4++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break 2;//loop5;
                }
            } while (true);


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LANGTAG"

    // $ANTLR start "INTEGER"
    function mINTEGER(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$INTEGER;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:277:3: ( ( '0' .. '9' )+ ) 
            // Tokenizer.g:278:3: ( '0' .. '9' )+ 
            {
            // Tokenizer.g:278:3: ( '0' .. '9' )+ 
            $cnt6=0;
            //loop6:
            do {
                $alt6=2;
                $LA6_0 = $this->input->LA(1);

                if ( (($LA6_0>=$this->getToken('48') && $LA6_0<=$this->getToken('57'))) ) {
                    $alt6=1;
                }


                switch ($alt6) {
            	case 1 :
            	    // Tokenizer.g:278:4: '0' .. '9' 
            	    {
            	    $this->matchRange(48,57); 

            	    }
            	    break;

            	default :
            	    if ( $cnt6 >= 1 ) break 2;//loop6;
                        $eee =
                            new EarlyExitException(6, $this->input);
                        throw $eee;
                }
                $cnt6++;
            } while (true);


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INTEGER"

    // $ANTLR start "DECIMAL"
    function mDECIMAL(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DECIMAL;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:282:3: ( ( '0' .. '9' )+ DOT ( '0' .. '9' )* | DOT ( '0' .. '9' )+ ) 
            $alt10=2;
            $LA10_0 = $this->input->LA(1);

            if ( (($LA10_0>=$this->getToken('48') && $LA10_0<=$this->getToken('57'))) ) {
                $alt10=1;
            }
            else if ( ($LA10_0==$this->getToken('46')) ) {
                $alt10=2;
            }
            else {
                $nvae = new NoViableAltException("", 10, 0, $this->input);

                throw $nvae;
            }
            switch ($alt10) {
                case 1 :
                    // Tokenizer.g:283:3: ( '0' .. '9' )+ DOT ( '0' .. '9' )* 
                    {
                    // Tokenizer.g:283:3: ( '0' .. '9' )+ 
                    $cnt7=0;
                    //loop7:
                    do {
                        $alt7=2;
                        $LA7_0 = $this->input->LA(1);

                        if ( (($LA7_0>=$this->getToken('48') && $LA7_0<=$this->getToken('57'))) ) {
                            $alt7=1;
                        }


                        switch ($alt7) {
                    	case 1 :
                    	    // Tokenizer.g:283:4: '0' .. '9' 
                    	    {
                    	    $this->matchRange(48,57); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt7 >= 1 ) break 2;//loop7;
                                $eee =
                                    new EarlyExitException(7, $this->input);
                                throw $eee;
                        }
                        $cnt7++;
                    } while (true);

                    $this->mDOT(); 
                    // Tokenizer.g:283:19: ( '0' .. '9' )* 
                    //loop8:
                    do {
                        $alt8=2;
                        $LA8_0 = $this->input->LA(1);

                        if ( (($LA8_0>=$this->getToken('48') && $LA8_0<=$this->getToken('57'))) ) {
                            $alt8=1;
                        }


                        switch ($alt8) {
                    	case 1 :
                    	    // Tokenizer.g:283:20: '0' .. '9' 
                    	    {
                    	    $this->matchRange(48,57); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop8;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // Tokenizer.g:284:5: DOT ( '0' .. '9' )+ 
                    {
                    $this->mDOT(); 
                    // Tokenizer.g:284:9: ( '0' .. '9' )+ 
                    $cnt9=0;
                    //loop9:
                    do {
                        $alt9=2;
                        $LA9_0 = $this->input->LA(1);

                        if ( (($LA9_0>=$this->getToken('48') && $LA9_0<=$this->getToken('57'))) ) {
                            $alt9=1;
                        }


                        switch ($alt9) {
                    	case 1 :
                    	    // Tokenizer.g:284:10: '0' .. '9' 
                    	    {
                    	    $this->matchRange(48,57); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt9 >= 1 ) break 2;//loop9;
                                $eee =
                                    new EarlyExitException(9, $this->input);
                                throw $eee;
                        }
                        $cnt9++;
                    } while (true);


                    }
                    break;

            }
            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DECIMAL"

    // $ANTLR start "DOUBLE"
    function mDOUBLE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DOUBLE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:288:3: ( ( DIGIT )+ DOT ( DIGIT )* EXPONENT | DOT ( DIGIT )+ EXPONENT | ( DIGIT )+ EXPONENT ) 
            $alt15=3;
            $alt15 = $this->dfa15->predict($this->input);
            switch ($alt15) {
                case 1 :
                    // Tokenizer.g:289:3: ( DIGIT )+ DOT ( DIGIT )* EXPONENT 
                    {
                    // Tokenizer.g:289:3: ( DIGIT )+ 
                    $cnt11=0;
                    //loop11:
                    do {
                        $alt11=2;
                        $LA11_0 = $this->input->LA(1);

                        if ( (($LA11_0>=$this->getToken('48') && $LA11_0<=$this->getToken('57'))) ) {
                            $alt11=1;
                        }


                        switch ($alt11) {
                    	case 1 :
                    	    // Tokenizer.g:289:3: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt11 >= 1 ) break 2;//loop11;
                                $eee =
                                    new EarlyExitException(11, $this->input);
                                throw $eee;
                        }
                        $cnt11++;
                    } while (true);

                    $this->mDOT(); 
                    // Tokenizer.g:289:14: ( DIGIT )* 
                    //loop12:
                    do {
                        $alt12=2;
                        $LA12_0 = $this->input->LA(1);

                        if ( (($LA12_0>=$this->getToken('48') && $LA12_0<=$this->getToken('57'))) ) {
                            $alt12=1;
                        }


                        switch ($alt12) {
                    	case 1 :
                    	    // Tokenizer.g:289:14: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop12;
                        }
                    } while (true);

                    $this->mEXPONENT(); 

                    }
                    break;
                case 2 :
                    // Tokenizer.g:290:5: DOT ( DIGIT )+ EXPONENT 
                    {
                    $this->mDOT(); 
                    // Tokenizer.g:290:9: ( DIGIT )+ 
                    $cnt13=0;
                    //loop13:
                    do {
                        $alt13=2;
                        $LA13_0 = $this->input->LA(1);

                        if ( (($LA13_0>=$this->getToken('48') && $LA13_0<=$this->getToken('57'))) ) {
                            $alt13=1;
                        }


                        switch ($alt13) {
                    	case 1 :
                    	    // Tokenizer.g:290:9: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt13 >= 1 ) break 2;//loop13;
                                $eee =
                                    new EarlyExitException(13, $this->input);
                                throw $eee;
                        }
                        $cnt13++;
                    } while (true);

                    $this->mEXPONENT(); 

                    }
                    break;
                case 3 :
                    // Tokenizer.g:291:5: ( DIGIT )+ EXPONENT 
                    {
                    // Tokenizer.g:291:5: ( DIGIT )+ 
                    $cnt14=0;
                    //loop14:
                    do {
                        $alt14=2;
                        $LA14_0 = $this->input->LA(1);

                        if ( (($LA14_0>=$this->getToken('48') && $LA14_0<=$this->getToken('57'))) ) {
                            $alt14=1;
                        }


                        switch ($alt14) {
                    	case 1 :
                    	    // Tokenizer.g:291:5: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt14 >= 1 ) break 2;//loop14;
                                $eee =
                                    new EarlyExitException(14, $this->input);
                                throw $eee;
                        }
                        $cnt14++;
                    } while (true);

                    $this->mEXPONENT(); 

                    }
                    break;

            }
            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOUBLE"

    // $ANTLR start "DIGIT"
    function mDIGIT(){
        try {
            // Tokenizer.g:296:3: ( '0' .. '9' ) 
            // Tokenizer.g:297:3: '0' .. '9' 
            {
            $this->matchRange(48,57); 

            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DIGIT"

    // $ANTLR start "INTEGER_POSITIVE"
    function mINTEGER_POSITIVE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$INTEGER_POSITIVE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokenizer.g:301:3: ( PLUS n= INTEGER ) 
            // Tokenizer.g:302:3: PLUS n= INTEGER 
            {
            $this->mPLUS(); 
            $nStart1034 = $this->getCharIndex();
            $this->mINTEGER(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart1034, $this->getCharIndex()-1);

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INTEGER_POSITIVE"

    // $ANTLR start "DECIMAL_POSITIVE"
    function mDECIMAL_POSITIVE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DECIMAL_POSITIVE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokenizer.g:306:3: ( PLUS n= DECIMAL ) 
            // Tokenizer.g:307:3: PLUS n= DECIMAL 
            {
            $this->mPLUS(); 
            $nStart1053 = $this->getCharIndex();
            $this->mDECIMAL(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart1053, $this->getCharIndex()-1);

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DECIMAL_POSITIVE"

    // $ANTLR start "DOUBLE_POSITIVE"
    function mDOUBLE_POSITIVE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DOUBLE_POSITIVE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokenizer.g:311:3: ( PLUS n= DOUBLE ) 
            // Tokenizer.g:312:3: PLUS n= DOUBLE 
            {
            $this->mPLUS(); 
            $nStart1072 = $this->getCharIndex();
            $this->mDOUBLE(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart1072, $this->getCharIndex()-1);

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOUBLE_POSITIVE"

    // $ANTLR start "INTEGER_NEGATIVE"
    function mINTEGER_NEGATIVE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$INTEGER_NEGATIVE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokenizer.g:316:3: ( MINUS n= INTEGER ) 
            // Tokenizer.g:317:3: MINUS n= INTEGER 
            {
            $this->mMINUS(); 
            $nStart1091 = $this->getCharIndex();
            $this->mINTEGER(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart1091, $this->getCharIndex()-1);

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INTEGER_NEGATIVE"

    // $ANTLR start "DECIMAL_NEGATIVE"
    function mDECIMAL_NEGATIVE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DECIMAL_NEGATIVE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokenizer.g:321:3: ( MINUS n= DECIMAL ) 
            // Tokenizer.g:322:3: MINUS n= DECIMAL 
            {
            $this->mMINUS(); 
            $nStart1110 = $this->getCharIndex();
            $this->mDECIMAL(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart1110, $this->getCharIndex()-1);

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DECIMAL_NEGATIVE"

    // $ANTLR start "DOUBLE_NEGATIVE"
    function mDOUBLE_NEGATIVE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DOUBLE_NEGATIVE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            $n=null;

            // Tokenizer.g:326:3: ( MINUS n= DOUBLE ) 
            // Tokenizer.g:327:3: MINUS n= DOUBLE 
            {
            $this->mMINUS(); 
            $nStart1129 = $this->getCharIndex();
            $this->mDOUBLE(); 
            $n = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $nStart1129, $this->getCharIndex()-1);

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOUBLE_NEGATIVE"

    // $ANTLR start "EXPONENT"
    function mEXPONENT(){
        try {
            // Tokenizer.g:332:3: ( 'e' ( PLUS | MINUS )? ( '0' .. '9' )+ ) 
            // Tokenizer.g:333:3: 'e' ( PLUS | MINUS )? ( '0' .. '9' )+ 
            {
            $this->matchChar(101); 
            // Tokenizer.g:334:3: ( PLUS | MINUS )? 
            $alt16=2;
            $LA16_0 = $this->input->LA(1);

            if ( ($LA16_0==$this->getToken('43')||$LA16_0==$this->getToken('45')) ) {
                $alt16=1;
            }
            switch ($alt16) {
                case 1 :
                    // Tokenizer.g: 
                    {
                    if ( $this->input->LA(1)==$this->getToken('43')||$this->input->LA(1)==$this->getToken('45') ) {
                        $this->input->consume();

                    }
                    else {
                        $mse = new MismatchedSetException(null,$this->input);
                        $this->recover($mse);
                        throw $mse;}


                    }
                    break;

            }

            // Tokenizer.g:338:3: ( '0' .. '9' )+ 
            $cnt17=0;
            //loop17:
            do {
                $alt17=2;
                $LA17_0 = $this->input->LA(1);

                if ( (($LA17_0>=$this->getToken('48') && $LA17_0<=$this->getToken('57'))) ) {
                    $alt17=1;
                }


                switch ($alt17) {
            	case 1 :
            	    // Tokenizer.g:338:4: '0' .. '9' 
            	    {
            	    $this->matchRange(48,57); 

            	    }
            	    break;

            	default :
            	    if ( $cnt17 >= 1 ) break 2;//loop17;
                        $eee =
                            new EarlyExitException(17, $this->input);
                        throw $eee;
                }
                $cnt17++;
            } while (true);


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "EXPONENT"

    // $ANTLR start "STRING_LITERAL1"
    function mSTRING_LITERAL1(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$STRING_LITERAL1;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:342:3: ( '\\'' ( options {greedy=false; } : ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\\'' ) 
            // Tokenizer.g:343:3: '\\'' ( options {greedy=false; } : ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\\'' 
            {
            $this->matchChar(39); 
            // Tokenizer.g:344:3: ( options {greedy=false; } : ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* 
            //loop18:
            do {
                $alt18=3;
                $LA18_0 = $this->input->LA(1);

                if ( (($LA18_0>=$this->getToken('0') && $LA18_0<=$this->getToken('9'))||($LA18_0>=$this->getToken('11') && $LA18_0<=$this->getToken('12'))||($LA18_0>=$this->getToken('14') && $LA18_0<=$this->getToken('38'))||($LA18_0>=$this->getToken('40') && $LA18_0<=$this->getToken('91'))||($LA18_0>=$this->getToken('93') && $LA18_0<=$this->getToken('65535'))) ) {
                    $alt18=1;
                }
                else if ( ($LA18_0==$this->getToken('92')) ) {
                    $alt18=2;
                }
                else if ( ($LA18_0==$this->getToken('39')) ) {
                    $alt18=3;
                }


                switch ($alt18) {
            	case 1 :
            	    // Tokenizer.g:345:5: ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) 
            	    {
            	    if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('9'))||($this->input->LA(1)>=$this->getToken('11') && $this->input->LA(1)<=$this->getToken('12'))||($this->input->LA(1)>=$this->getToken('14') && $this->input->LA(1)<=$this->getToken('38'))||($this->input->LA(1)>=$this->getToken('40') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;
            	case 2 :
            	    // Tokenizer.g:351:7: ECHAR 
            	    {
            	    $this->mECHAR(); 

            	    }
            	    break;

            	default :
            	    break 2;//loop18;
                }
            } while (true);

            $this->matchChar(39); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL1"

    // $ANTLR start "STRING_LITERAL2"
    function mSTRING_LITERAL2(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$STRING_LITERAL2;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:357:3: ( '\"' ( options {greedy=false; } : ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\"' ) 
            // Tokenizer.g:358:3: '\"' ( options {greedy=false; } : ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\"' 
            {
            $this->matchChar(34); 
            // Tokenizer.g:359:3: ( options {greedy=false; } : ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* 
            //loop19:
            do {
                $alt19=3;
                $LA19_0 = $this->input->LA(1);

                if ( (($LA19_0>=$this->getToken('0') && $LA19_0<=$this->getToken('9'))||($LA19_0>=$this->getToken('11') && $LA19_0<=$this->getToken('12'))||($LA19_0>=$this->getToken('14') && $LA19_0<=$this->getToken('33'))||($LA19_0>=$this->getToken('35') && $LA19_0<=$this->getToken('91'))||($LA19_0>=$this->getToken('93') && $LA19_0<=$this->getToken('65535'))) ) {
                    $alt19=1;
                }
                else if ( ($LA19_0==$this->getToken('92')) ) {
                    $alt19=2;
                }
                else if ( ($LA19_0==$this->getToken('34')) ) {
                    $alt19=3;
                }


                switch ($alt19) {
            	case 1 :
            	    // Tokenizer.g:360:5: ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) 
            	    {
            	    if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('9'))||($this->input->LA(1)>=$this->getToken('11') && $this->input->LA(1)<=$this->getToken('12'))||($this->input->LA(1)>=$this->getToken('14') && $this->input->LA(1)<=$this->getToken('33'))||($this->input->LA(1)>=$this->getToken('35') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;
            	case 2 :
            	    // Tokenizer.g:366:7: ECHAR 
            	    {
            	    $this->mECHAR(); 

            	    }
            	    break;

            	default :
            	    break 2;//loop19;
                }
            } while (true);

            $this->matchChar(34); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL2"

    // $ANTLR start "STRING_LITERAL_LONG1"
    function mSTRING_LITERAL_LONG1(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$STRING_LITERAL_LONG1;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:372:3: ( '\\'\\'\\'' ( options {greedy=false; } : ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) )* '\\'\\'\\'' ) 
            // Tokenizer.g:373:3: '\\'\\'\\'' ( options {greedy=false; } : ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) )* '\\'\\'\\'' 
            {
            $this->matchString("'''"); 

            // Tokenizer.g:374:3: ( options {greedy=false; } : ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) )* 
            //loop22:
            do {
                $alt22=2;
                $LA22_0 = $this->input->LA(1);

                if ( ($LA22_0==$this->getToken('39')) ) {
                    $LA22_1 = $this->input->LA(2);

                    if ( ($LA22_1==$this->getToken('39')) ) {
                        $LA22_3 = $this->input->LA(3);

                        if ( ($LA22_3==$this->getToken('39')) ) {
                            $alt22=2;
                        }
                        else if ( (($LA22_3>=$this->getToken('0') && $LA22_3<=$this->getToken('38'))||($LA22_3>=$this->getToken('40') && $LA22_3<=$this->getToken('65535'))) ) {
                            $alt22=1;
                        }


                    }
                    else if ( (($LA22_1>=$this->getToken('0') && $LA22_1<=$this->getToken('38'))||($LA22_1>=$this->getToken('40') && $LA22_1<=$this->getToken('65535'))) ) {
                        $alt22=1;
                    }


                }
                else if ( (($LA22_0>=$this->getToken('0') && $LA22_0<=$this->getToken('38'))||($LA22_0>=$this->getToken('40') && $LA22_0<=$this->getToken('65535'))) ) {
                    $alt22=1;
                }


                switch ($alt22) {
            	case 1 :
            	    // Tokenizer.g:375:5: ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) 
            	    {
            	    // Tokenizer.g:375:5: ( '\\'' | '\\'\\'' )? 
            	    $alt20=3;
            	    $LA20_0 = $this->input->LA(1);

            	    if ( ($LA20_0==$this->getToken('39')) ) {
            	        $LA20_1 = $this->input->LA(2);

            	        if ( ($LA20_1==$this->getToken('39')) ) {
            	            $alt20=2;
            	        }
            	        else if ( (($LA20_1>=$this->getToken('0') && $LA20_1<=$this->getToken('38'))||($LA20_1>=$this->getToken('40') && $LA20_1<=$this->getToken('65535'))) ) {
            	            $alt20=1;
            	        }
            	    }
            	    switch ($alt20) {
            	        case 1 :
            	            // Tokenizer.g:376:7: '\\'' 
            	            {
            	            $this->matchChar(39); 

            	            }
            	            break;
            	        case 2 :
            	            // Tokenizer.g:377:9: '\\'\\'' 
            	            {
            	            $this->matchString("''"); 


            	            }
            	            break;

            	    }

            	    // Tokenizer.g:379:5: (~ ( '\\'' | '\\\\' ) | ECHAR ) 
            	    $alt21=2;
            	    $LA21_0 = $this->input->LA(1);

            	    if ( (($LA21_0>=$this->getToken('0') && $LA21_0<=$this->getToken('38'))||($LA21_0>=$this->getToken('40') && $LA21_0<=$this->getToken('91'))||($LA21_0>=$this->getToken('93') && $LA21_0<=$this->getToken('65535'))) ) {
            	        $alt21=1;
            	    }
            	    else if ( ($LA21_0==$this->getToken('92')) ) {
            	        $alt21=2;
            	    }
            	    else {
            	        $nvae = new NoViableAltException("", 21, 0, $this->input);

            	        throw $nvae;
            	    }
            	    switch ($alt21) {
            	        case 1 :
            	            // Tokenizer.g:380:7: ~ ( '\\'' | '\\\\' ) 
            	            {
            	            if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('38'))||($this->input->LA(1)>=$this->getToken('40') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	                $this->input->consume();

            	            }
            	            else {
            	                $mse = new MismatchedSetException(null,$this->input);
            	                $this->recover($mse);
            	                throw $mse;}


            	            }
            	            break;
            	        case 2 :
            	            // Tokenizer.g:384:9: ECHAR 
            	            {
            	            $this->mECHAR(); 

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break 2;//loop22;
                }
            } while (true);

            $this->matchString("'''"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL_LONG1"

    // $ANTLR start "STRING_LITERAL_LONG2"
    function mSTRING_LITERAL_LONG2(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$STRING_LITERAL_LONG2;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:391:3: ( '\"\"\"' ( options {greedy=false; } : ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) )* '\"\"\"' ) 
            // Tokenizer.g:392:3: '\"\"\"' ( options {greedy=false; } : ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) )* '\"\"\"' 
            {
            $this->matchString("\"\"\""); 

            // Tokenizer.g:393:3: ( options {greedy=false; } : ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) )* 
            //loop25:
            do {
                $alt25=2;
                $LA25_0 = $this->input->LA(1);

                if ( ($LA25_0==$this->getToken('34')) ) {
                    $LA25_1 = $this->input->LA(2);

                    if ( ($LA25_1==$this->getToken('34')) ) {
                        $LA25_3 = $this->input->LA(3);

                        if ( ($LA25_3==$this->getToken('34')) ) {
                            $alt25=2;
                        }
                        else if ( (($LA25_3>=$this->getToken('0') && $LA25_3<=$this->getToken('33'))||($LA25_3>=$this->getToken('35') && $LA25_3<=$this->getToken('65535'))) ) {
                            $alt25=1;
                        }


                    }
                    else if ( (($LA25_1>=$this->getToken('0') && $LA25_1<=$this->getToken('33'))||($LA25_1>=$this->getToken('35') && $LA25_1<=$this->getToken('65535'))) ) {
                        $alt25=1;
                    }


                }
                else if ( (($LA25_0>=$this->getToken('0') && $LA25_0<=$this->getToken('33'))||($LA25_0>=$this->getToken('35') && $LA25_0<=$this->getToken('65535'))) ) {
                    $alt25=1;
                }


                switch ($alt25) {
            	case 1 :
            	    // Tokenizer.g:394:5: ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) 
            	    {
            	    // Tokenizer.g:394:5: ( '\"' | '\"\"' )? 
            	    $alt23=3;
            	    $LA23_0 = $this->input->LA(1);

            	    if ( ($LA23_0==$this->getToken('34')) ) {
            	        $LA23_1 = $this->input->LA(2);

            	        if ( ($LA23_1==$this->getToken('34')) ) {
            	            $alt23=2;
            	        }
            	        else if ( (($LA23_1>=$this->getToken('0') && $LA23_1<=$this->getToken('33'))||($LA23_1>=$this->getToken('35') && $LA23_1<=$this->getToken('65535'))) ) {
            	            $alt23=1;
            	        }
            	    }
            	    switch ($alt23) {
            	        case 1 :
            	            // Tokenizer.g:395:7: '\"' 
            	            {
            	            $this->matchChar(34); 

            	            }
            	            break;
            	        case 2 :
            	            // Tokenizer.g:396:9: '\"\"' 
            	            {
            	            $this->matchString("\"\""); 


            	            }
            	            break;

            	    }

            	    // Tokenizer.g:398:5: (~ ( '\"' | '\\\\' ) | ECHAR ) 
            	    $alt24=2;
            	    $LA24_0 = $this->input->LA(1);

            	    if ( (($LA24_0>=$this->getToken('0') && $LA24_0<=$this->getToken('33'))||($LA24_0>=$this->getToken('35') && $LA24_0<=$this->getToken('91'))||($LA24_0>=$this->getToken('93') && $LA24_0<=$this->getToken('65535'))) ) {
            	        $alt24=1;
            	    }
            	    else if ( ($LA24_0==$this->getToken('92')) ) {
            	        $alt24=2;
            	    }
            	    else {
            	        $nvae = new NoViableAltException("", 24, 0, $this->input);

            	        throw $nvae;
            	    }
            	    switch ($alt24) {
            	        case 1 :
            	            // Tokenizer.g:399:7: ~ ( '\"' | '\\\\' ) 
            	            {
            	            if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('33'))||($this->input->LA(1)>=$this->getToken('35') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	                $this->input->consume();

            	            }
            	            else {
            	                $mse = new MismatchedSetException(null,$this->input);
            	                $this->recover($mse);
            	                throw $mse;}


            	            }
            	            break;
            	        case 2 :
            	            // Tokenizer.g:403:9: ECHAR 
            	            {
            	            $this->mECHAR(); 

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break 2;//loop25;
                }
            } while (true);

            $this->matchString("\"\"\""); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL_LONG2"

    // $ANTLR start "ECHAR"
    function mECHAR(){
        try {
            // Tokenizer.g:411:3: ( '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' ) ) 
            // Tokenizer.g:412:3: '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' ) 
            {
            $this->matchChar(92); 
            if ( $this->input->LA(1)==$this->getToken('34')||$this->input->LA(1)==$this->getToken('39')||$this->input->LA(1)==$this->getToken('92')||$this->input->LA(1)==$this->getToken('98')||$this->input->LA(1)==$this->getToken('102')||$this->input->LA(1)==$this->getToken('110')||$this->input->LA(1)==$this->getToken('114')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ECHAR"

    // $ANTLR start "WS"
    function mWS(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$WS;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:432:3: ( ( ' ' | '\\t' | EOL )+ ) 
            // Tokenizer.g:433:3: ( ' ' | '\\t' | EOL )+ 
            {
            // Tokenizer.g:433:3: ( ' ' | '\\t' | EOL )+ 
            $cnt26=0;
            //loop26:
            do {
                $alt26=2;
                $LA26_0 = $this->input->LA(1);

                if ( (($LA26_0>=$this->getToken('9') && $LA26_0<=$this->getToken('10'))||$LA26_0==$this->getToken('13')||$LA26_0==$this->getToken('32')) ) {
                    $alt26=1;
                }


                switch ($alt26) {
            	case 1 :
            	    // Tokenizer.g: 
            	    {
            	    if ( ($this->input->LA(1)>=$this->getToken('9') && $this->input->LA(1)<=$this->getToken('10'))||$this->input->LA(1)==$this->getToken('13')||$this->input->LA(1)==$this->getToken('32') ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;

            	default :
            	    if ( $cnt26 >= 1 ) break 2;//loop26;
                        $eee =
                            new EarlyExitException(26, $this->input);
                        throw $eee;
                }
                $cnt26++;
            } while (true);

              $_channel=HIDDEN; 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "WS"

    // $ANTLR start "PN_CHARS_BASE"
    function mPN_CHARS_BASE(){
        try {
            // Tokenizer.g:447:3: ( 'a' .. 'z' | '\\u00C0' .. '\\u00D6' | '\\u00D8' .. '\\u00F6' | '\\u00F8' .. '\\u02FF' | '\\u0370' .. '\\u037D' | '\\u037F' .. '\\u1FFF' | '\\u200C' .. '\\u200D' | '\\u2070' .. '\\u218F' | '\\u2C00' .. '\\u2FEF' | '\\u3001' .. '\\uD7FF' | '\\uF900' .. '\\uFDCF' | '\\uFDF0' .. '\\uFFFD' ) 
            // Tokenizer.g: 
            {
            if ( ($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('767'))||($this->input->LA(1)>=$this->getToken('880') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_CHARS_BASE"

    // $ANTLR start "PN_CHARS_U"
    function mPN_CHARS_U(){
        try {
            // Tokenizer.g:464:3: ( PN_CHARS_BASE | '_' ) 
            // Tokenizer.g: 
            {
            if ( $this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('767'))||($this->input->LA(1)>=$this->getToken('880') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_CHARS_U"

    // $ANTLR start "VARNAME"
    function mVARNAME(){
        try {
            // Tokenizer.g:471:3: ( ( PN_CHARS_U | ( '0' .. '9' ) ) ( PN_CHARS_U | ( '0' .. '9' ) | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )* ) 
            // Tokenizer.g:472:3: ( PN_CHARS_U | ( '0' .. '9' ) ) ( PN_CHARS_U | ( '0' .. '9' ) | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )* 
            {
            // Tokenizer.g:472:3: ( PN_CHARS_U | ( '0' .. '9' ) ) 
            $alt27=2;
            $LA27_0 = $this->input->LA(1);

            if ( ($LA27_0==$this->getToken('95')||($LA27_0>=$this->getToken('97') && $LA27_0<=$this->getToken('122'))||($LA27_0>=$this->getToken('192') && $LA27_0<=$this->getToken('214'))||($LA27_0>=$this->getToken('216') && $LA27_0<=$this->getToken('246'))||($LA27_0>=$this->getToken('248') && $LA27_0<=$this->getToken('767'))||($LA27_0>=$this->getToken('880') && $LA27_0<=$this->getToken('893'))||($LA27_0>=$this->getToken('895') && $LA27_0<=$this->getToken('8191'))||($LA27_0>=$this->getToken('8204') && $LA27_0<=$this->getToken('8205'))||($LA27_0>=$this->getToken('8304') && $LA27_0<=$this->getToken('8591'))||($LA27_0>=$this->getToken('11264') && $LA27_0<=$this->getToken('12271'))||($LA27_0>=$this->getToken('12289') && $LA27_0<=$this->getToken('55295'))||($LA27_0>=$this->getToken('63744') && $LA27_0<=$this->getToken('64975'))||($LA27_0>=$this->getToken('65008') && $LA27_0<=$this->getToken('65533'))) ) {
                $alt27=1;
            }
            else if ( (($LA27_0>=$this->getToken('48') && $LA27_0<=$this->getToken('57'))) ) {
                $alt27=2;
            }
            else {
                $nvae = new NoViableAltException("", 27, 0, $this->input);

                throw $nvae;
            }
            switch ($alt27) {
                case 1 :
                    // Tokenizer.g:473:5: PN_CHARS_U 
                    {
                    $this->mPN_CHARS_U(); 

                    }
                    break;
                case 2 :
                    // Tokenizer.g:474:7: ( '0' .. '9' ) 
                    {
                    // Tokenizer.g:474:7: ( '0' .. '9' ) 
                    // Tokenizer.g:474:8: '0' .. '9' 
                    {
                    $this->matchRange(48,57); 

                    }


                    }
                    break;

            }

            // Tokenizer.g:476:3: ( PN_CHARS_U | ( '0' .. '9' ) | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )* 
            //loop28:
            do {
                $alt28=6;
                $LA28_0 = $this->input->LA(1);

                if ( ($LA28_0==$this->getToken('95')||($LA28_0>=$this->getToken('97') && $LA28_0<=$this->getToken('122'))||($LA28_0>=$this->getToken('192') && $LA28_0<=$this->getToken('214'))||($LA28_0>=$this->getToken('216') && $LA28_0<=$this->getToken('246'))||($LA28_0>=$this->getToken('248') && $LA28_0<=$this->getToken('767'))||($LA28_0>=$this->getToken('880') && $LA28_0<=$this->getToken('893'))||($LA28_0>=$this->getToken('895') && $LA28_0<=$this->getToken('8191'))||($LA28_0>=$this->getToken('8204') && $LA28_0<=$this->getToken('8205'))||($LA28_0>=$this->getToken('8304') && $LA28_0<=$this->getToken('8591'))||($LA28_0>=$this->getToken('11264') && $LA28_0<=$this->getToken('12271'))||($LA28_0>=$this->getToken('12289') && $LA28_0<=$this->getToken('55295'))||($LA28_0>=$this->getToken('63744') && $LA28_0<=$this->getToken('64975'))||($LA28_0>=$this->getToken('65008') && $LA28_0<=$this->getToken('65533'))) ) {
                    $alt28=1;
                }
                else if ( (($LA28_0>=$this->getToken('48') && $LA28_0<=$this->getToken('57'))) ) {
                    $alt28=2;
                }
                else if ( ($LA28_0==$this->getToken('183')) ) {
                    $alt28=3;
                }
                else if ( (($LA28_0>=$this->getToken('768') && $LA28_0<=$this->getToken('879'))) ) {
                    $alt28=4;
                }
                else if ( (($LA28_0>=$this->getToken('8255') && $LA28_0<=$this->getToken('8256'))) ) {
                    $alt28=5;
                }


                switch ($alt28) {
            	case 1 :
            	    // Tokenizer.g:477:5: PN_CHARS_U 
            	    {
            	    $this->mPN_CHARS_U(); 

            	    }
            	    break;
            	case 2 :
            	    // Tokenizer.g:478:7: ( '0' .. '9' ) 
            	    {
            	    // Tokenizer.g:478:7: ( '0' .. '9' ) 
            	    // Tokenizer.g:478:8: '0' .. '9' 
            	    {
            	    $this->matchRange(48,57); 

            	    }


            	    }
            	    break;
            	case 3 :
            	    // Tokenizer.g:479:7: '\\u00B7' 
            	    {
            	    $this->matchChar(183); 

            	    }
            	    break;
            	case 4 :
            	    // Tokenizer.g:480:7: '\\u0300' .. '\\u036F' 
            	    {
            	    $this->matchRange(768,879); 

            	    }
            	    break;
            	case 5 :
            	    // Tokenizer.g:481:7: '\\u203F' .. '\\u2040' 
            	    {
            	    $this->matchRange(8255,8256); 

            	    }
            	    break;

            	default :
            	    break 2;//loop28;
                }
            } while (true);


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "VARNAME"

    // $ANTLR start "PN_CHARS"
    function mPN_CHARS(){
        try {
            // Tokenizer.g:487:3: ( PN_CHARS_U | MINUS | ( '0' .. '9' ) | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' ) 
            $alt29=6;
            $LA29_0 = $this->input->LA(1);

            if ( ($LA29_0==$this->getToken('95')||($LA29_0>=$this->getToken('97') && $LA29_0<=$this->getToken('122'))||($LA29_0>=$this->getToken('192') && $LA29_0<=$this->getToken('214'))||($LA29_0>=$this->getToken('216') && $LA29_0<=$this->getToken('246'))||($LA29_0>=$this->getToken('248') && $LA29_0<=$this->getToken('767'))||($LA29_0>=$this->getToken('880') && $LA29_0<=$this->getToken('893'))||($LA29_0>=$this->getToken('895') && $LA29_0<=$this->getToken('8191'))||($LA29_0>=$this->getToken('8204') && $LA29_0<=$this->getToken('8205'))||($LA29_0>=$this->getToken('8304') && $LA29_0<=$this->getToken('8591'))||($LA29_0>=$this->getToken('11264') && $LA29_0<=$this->getToken('12271'))||($LA29_0>=$this->getToken('12289') && $LA29_0<=$this->getToken('55295'))||($LA29_0>=$this->getToken('63744') && $LA29_0<=$this->getToken('64975'))||($LA29_0>=$this->getToken('65008') && $LA29_0<=$this->getToken('65533'))) ) {
                $alt29=1;
            }
            else if ( ($LA29_0==$this->getToken('45')) ) {
                $alt29=2;
            }
            else if ( (($LA29_0>=$this->getToken('48') && $LA29_0<=$this->getToken('57'))) ) {
                $alt29=3;
            }
            else if ( ($LA29_0==$this->getToken('183')) ) {
                $alt29=4;
            }
            else if ( (($LA29_0>=$this->getToken('768') && $LA29_0<=$this->getToken('879'))) ) {
                $alt29=5;
            }
            else if ( (($LA29_0>=$this->getToken('8255') && $LA29_0<=$this->getToken('8256'))) ) {
                $alt29=6;
            }
            else {
                $nvae = new NoViableAltException("", 29, 0, $this->input);

                throw $nvae;
            }
            switch ($alt29) {
                case 1 :
                    // Tokenizer.g:488:3: PN_CHARS_U 
                    {
                    $this->mPN_CHARS_U(); 

                    }
                    break;
                case 2 :
                    // Tokenizer.g:489:5: MINUS 
                    {
                    $this->mMINUS(); 

                    }
                    break;
                case 3 :
                    // Tokenizer.g:490:5: ( '0' .. '9' ) 
                    {
                    // Tokenizer.g:490:5: ( '0' .. '9' ) 
                    // Tokenizer.g:490:6: '0' .. '9' 
                    {
                    $this->matchRange(48,57); 

                    }


                    }
                    break;
                case 4 :
                    // Tokenizer.g:491:5: '\\u00B7' 
                    {
                    $this->matchChar(183); 

                    }
                    break;
                case 5 :
                    // Tokenizer.g:492:5: '\\u0300' .. '\\u036F' 
                    {
                    $this->matchRange(768,879); 

                    }
                    break;
                case 6 :
                    // Tokenizer.g:493:5: '\\u203F' .. '\\u2040' 
                    {
                    $this->matchRange(8255,8256); 

                    }
                    break;

            }
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_CHARS"

    // $ANTLR start "PN_PREFIX"
    function mPN_PREFIX(){
        try {
            // Tokenizer.g:498:3: ( PN_CHARS_BASE ( ( PN_CHARS | DOT )* PN_CHARS )? ) 
            // Tokenizer.g:499:3: PN_CHARS_BASE ( ( PN_CHARS | DOT )* PN_CHARS )? 
            {
            $this->mPN_CHARS_BASE(); 
            // Tokenizer.g:500:3: ( ( PN_CHARS | DOT )* PN_CHARS )? 
            $alt31=2;
            $LA31_0 = $this->input->LA(1);

            if ( (($LA31_0>=$this->getToken('45') && $LA31_0<=$this->getToken('46'))||($LA31_0>=$this->getToken('48') && $LA31_0<=$this->getToken('57'))||$LA31_0==$this->getToken('95')||($LA31_0>=$this->getToken('97') && $LA31_0<=$this->getToken('122'))||$LA31_0==$this->getToken('183')||($LA31_0>=$this->getToken('192') && $LA31_0<=$this->getToken('214'))||($LA31_0>=$this->getToken('216') && $LA31_0<=$this->getToken('246'))||($LA31_0>=$this->getToken('248') && $LA31_0<=$this->getToken('893'))||($LA31_0>=$this->getToken('895') && $LA31_0<=$this->getToken('8191'))||($LA31_0>=$this->getToken('8204') && $LA31_0<=$this->getToken('8205'))||($LA31_0>=$this->getToken('8255') && $LA31_0<=$this->getToken('8256'))||($LA31_0>=$this->getToken('8304') && $LA31_0<=$this->getToken('8591'))||($LA31_0>=$this->getToken('11264') && $LA31_0<=$this->getToken('12271'))||($LA31_0>=$this->getToken('12289') && $LA31_0<=$this->getToken('55295'))||($LA31_0>=$this->getToken('63744') && $LA31_0<=$this->getToken('64975'))||($LA31_0>=$this->getToken('65008') && $LA31_0<=$this->getToken('65533'))) ) {
                $alt31=1;
            }
            switch ($alt31) {
                case 1 :
                    // Tokenizer.g:501:5: ( PN_CHARS | DOT )* PN_CHARS 
                    {
                    // Tokenizer.g:501:5: ( PN_CHARS | DOT )* 
                    //loop30:
                    do {
                        $alt30=3;
                        $alt30 = $this->dfa30->predict($this->input);
                        switch ($alt30) {
                    	case 1 :
                    	    // Tokenizer.g:502:7: PN_CHARS 
                    	    {
                    	    $this->mPN_CHARS(); 

                    	    }
                    	    break;
                    	case 2 :
                    	    // Tokenizer.g:503:9: DOT 
                    	    {
                    	    $this->mDOT(); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop30;
                        }
                    } while (true);

                    $this->mPN_CHARS(); 

                    }
                    break;

            }


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_PREFIX"

    // $ANTLR start "PN_LOCAL"
    function mPN_LOCAL(){
        try {
            // Tokenizer.g:511:3: ( ( PN_CHARS_U | ( '0' .. '9' ) ) ( ( PN_CHARS | DOT )* PN_CHARS )? ) 
            // Tokenizer.g:512:3: ( PN_CHARS_U | ( '0' .. '9' ) ) ( ( PN_CHARS | DOT )* PN_CHARS )? 
            {
            // Tokenizer.g:512:3: ( PN_CHARS_U | ( '0' .. '9' ) ) 
            $alt32=2;
            $LA32_0 = $this->input->LA(1);

            if ( ($LA32_0==$this->getToken('95')||($LA32_0>=$this->getToken('97') && $LA32_0<=$this->getToken('122'))||($LA32_0>=$this->getToken('192') && $LA32_0<=$this->getToken('214'))||($LA32_0>=$this->getToken('216') && $LA32_0<=$this->getToken('246'))||($LA32_0>=$this->getToken('248') && $LA32_0<=$this->getToken('767'))||($LA32_0>=$this->getToken('880') && $LA32_0<=$this->getToken('893'))||($LA32_0>=$this->getToken('895') && $LA32_0<=$this->getToken('8191'))||($LA32_0>=$this->getToken('8204') && $LA32_0<=$this->getToken('8205'))||($LA32_0>=$this->getToken('8304') && $LA32_0<=$this->getToken('8591'))||($LA32_0>=$this->getToken('11264') && $LA32_0<=$this->getToken('12271'))||($LA32_0>=$this->getToken('12289') && $LA32_0<=$this->getToken('55295'))||($LA32_0>=$this->getToken('63744') && $LA32_0<=$this->getToken('64975'))||($LA32_0>=$this->getToken('65008') && $LA32_0<=$this->getToken('65533'))) ) {
                $alt32=1;
            }
            else if ( (($LA32_0>=$this->getToken('48') && $LA32_0<=$this->getToken('57'))) ) {
                $alt32=2;
            }
            else {
                $nvae = new NoViableAltException("", 32, 0, $this->input);

                throw $nvae;
            }
            switch ($alt32) {
                case 1 :
                    // Tokenizer.g:513:5: PN_CHARS_U 
                    {
                    $this->mPN_CHARS_U(); 

                    }
                    break;
                case 2 :
                    // Tokenizer.g:514:7: ( '0' .. '9' ) 
                    {
                    // Tokenizer.g:514:7: ( '0' .. '9' ) 
                    // Tokenizer.g:514:8: '0' .. '9' 
                    {
                    $this->matchRange(48,57); 

                    }


                    }
                    break;

            }

            // Tokenizer.g:516:3: ( ( PN_CHARS | DOT )* PN_CHARS )? 
            $alt34=2;
            $LA34_0 = $this->input->LA(1);

            if ( (($LA34_0>=$this->getToken('45') && $LA34_0<=$this->getToken('46'))||($LA34_0>=$this->getToken('48') && $LA34_0<=$this->getToken('57'))||$LA34_0==$this->getToken('95')||($LA34_0>=$this->getToken('97') && $LA34_0<=$this->getToken('122'))||$LA34_0==$this->getToken('183')||($LA34_0>=$this->getToken('192') && $LA34_0<=$this->getToken('214'))||($LA34_0>=$this->getToken('216') && $LA34_0<=$this->getToken('246'))||($LA34_0>=$this->getToken('248') && $LA34_0<=$this->getToken('893'))||($LA34_0>=$this->getToken('895') && $LA34_0<=$this->getToken('8191'))||($LA34_0>=$this->getToken('8204') && $LA34_0<=$this->getToken('8205'))||($LA34_0>=$this->getToken('8255') && $LA34_0<=$this->getToken('8256'))||($LA34_0>=$this->getToken('8304') && $LA34_0<=$this->getToken('8591'))||($LA34_0>=$this->getToken('11264') && $LA34_0<=$this->getToken('12271'))||($LA34_0>=$this->getToken('12289') && $LA34_0<=$this->getToken('55295'))||($LA34_0>=$this->getToken('63744') && $LA34_0<=$this->getToken('64975'))||($LA34_0>=$this->getToken('65008') && $LA34_0<=$this->getToken('65533'))) ) {
                $alt34=1;
            }
            switch ($alt34) {
                case 1 :
                    // Tokenizer.g:517:5: ( PN_CHARS | DOT )* PN_CHARS 
                    {
                    // Tokenizer.g:517:5: ( PN_CHARS | DOT )* 
                    //loop33:
                    do {
                        $alt33=3;
                        $alt33 = $this->dfa33->predict($this->input);
                        switch ($alt33) {
                    	case 1 :
                    	    // Tokenizer.g:518:7: PN_CHARS 
                    	    {
                    	    $this->mPN_CHARS(); 

                    	    }
                    	    break;
                    	case 2 :
                    	    // Tokenizer.g:519:9: DOT 
                    	    {
                    	    $this->mDOT(); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop33;
                        }
                    } while (true);

                    $this->mPN_CHARS(); 

                    }
                    break;

            }


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_LOCAL"

    // $ANTLR start "BLANK_NODE_LABEL"
    function mBLANK_NODE_LABEL(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$BLANK_NODE_LABEL;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            $t=null;

            // Tokenizer.g:526:3: ( '_:' t= PN_LOCAL ) 
            // Tokenizer.g:527:3: '_:' t= PN_LOCAL 
            {
            $this->matchString("_:"); 

            $tStart2217 = $this->getCharIndex();
            $this->mPN_LOCAL(); 
            $t = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $tStart2217, $this->getCharIndex()-1);

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BLANK_NODE_LABEL"

    // $ANTLR start "REFERENCE"
    function mREFERENCE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$REFERENCE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:531:3: ( '^^' ) 
            // Tokenizer.g:532:3: '^^' 
            {
            $this->matchString("^^"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "REFERENCE"

    // $ANTLR start "AND"
    function mAND(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$AND;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:536:3: ( '&&' ) 
            // Tokenizer.g:537:3: '&&' 
            {
            $this->matchString("&&"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "AND"

    // $ANTLR start "OR"
    function mOR(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$OR;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:541:3: ( '||' ) 
            // Tokenizer.g:542:3: '||' 
            {
            $this->matchString("||"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OR"

    // $ANTLR start "COMMENT"
    function mCOMMENT(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$COMMENT;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:546:3: ( '#' ( . )* EOL ) 
            // Tokenizer.g:547:3: '#' ( . )* EOL 
            {
            $this->matchChar(35); 
            // Tokenizer.g:547:7: ( . )* 
            //loop35:
            do {
                $alt35=2;
                $LA35_0 = $this->input->LA(1);

                if ( ($LA35_0==$this->getToken('10')||$LA35_0==$this->getToken('13')) ) {
                    $alt35=2;
                }
                else if ( (($LA35_0>=$this->getToken('0') && $LA35_0<=$this->getToken('9'))||($LA35_0>=$this->getToken('11') && $LA35_0<=$this->getToken('12'))||($LA35_0>=$this->getToken('14') && $LA35_0<=$this->getToken('65535'))) ) {
                    $alt35=1;
                }


                switch ($alt35) {
            	case 1 :
            	    // Tokenizer.g:547:7: . 
            	    {
            	    $this->matchAny(); 

            	    }
            	    break;

            	default :
            	    break 2;//loop35;
                }
            } while (true);

            $this->mEOL(); 
               $_channel = HIDDEN; 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "COMMENT"

    // $ANTLR start "EOL"
    function mEOL(){
        try {
            // Tokenizer.g:552:3: ( '\\n' | '\\r' ) 
            // Tokenizer.g: 
            {
            if ( $this->input->LA(1)==$this->getToken('10')||$this->input->LA(1)==$this->getToken('13') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "EOL"

    // $ANTLR start "OPEN_CURLY_BRACE"
    function mOPEN_CURLY_BRACE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$OPEN_CURLY_BRACE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:558:3: ( '{' ) 
            // Tokenizer.g:559:3: '{' 
            {
            $this->matchChar(123); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPEN_CURLY_BRACE"

    // $ANTLR start "CLOSE_CURLY_BRACE"
    function mCLOSE_CURLY_BRACE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$CLOSE_CURLY_BRACE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:563:3: ( '}' ) 
            // Tokenizer.g:564:3: '}' 
            {
            $this->matchChar(125); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CLOSE_CURLY_BRACE"

    // $ANTLR start "SEMICOLON"
    function mSEMICOLON(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$SEMICOLON;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:568:3: ( ';' ) 
            // Tokenizer.g:569:3: ';' 
            {
            $this->matchChar(59); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SEMICOLON"

    // $ANTLR start "DOT"
    function mDOT(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DOT;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:573:3: ( '.' ) 
            // Tokenizer.g:574:3: '.' 
            {
            $this->matchChar(46); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOT"

    // $ANTLR start "PLUS"
    function mPLUS(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$PLUS;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:578:3: ( '+' ) 
            // Tokenizer.g:579:3: '+' 
            {
            $this->matchChar(43); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PLUS"

    // $ANTLR start "MINUS"
    function mMINUS(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$MINUS;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:583:3: ( '-' ) 
            // Tokenizer.g:584:3: '-' 
            {
            $this->matchChar(45); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "MINUS"

    // $ANTLR start "ASTERISK"
    function mASTERISK(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$ASTERISK;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:588:3: ( '*' ) 
            // Tokenizer.g:589:3: '*' 
            {
            $this->matchChar(42); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ASTERISK"

    // $ANTLR start "COMMA"
    function mCOMMA(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$COMMA;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:593:3: ( ',' ) 
            // Tokenizer.g:594:3: ',' 
            {
            $this->matchChar(44); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "COMMA"

    // $ANTLR start "NOT_SIGN"
    function mNOT_SIGN(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$NOT_SIGN;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:598:3: ( '!' ) 
            // Tokenizer.g:599:3: '!' 
            {
            $this->matchChar(33); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NOT_SIGN"

    // $ANTLR start "DIVIDE"
    function mDIVIDE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DIVIDE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:603:3: ( '/' ) 
            // Tokenizer.g:604:3: '/' 
            {
            $this->matchChar(47); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DIVIDE"

    // $ANTLR start "EQUAL"
    function mEQUAL(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$EQUAL;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:608:3: ( '=' ) 
            // Tokenizer.g:609:3: '=' 
            {
            $this->matchChar(61); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "EQUAL"

    // $ANTLR start "LESS"
    function mLESS(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$LESS;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:613:3: ( '<' ) 
            // Tokenizer.g:614:3: '<' 
            {
            $this->matchChar(60); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LESS"

    // $ANTLR start "GREATER"
    function mGREATER(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$GREATER;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:618:3: ( '>' ) 
            // Tokenizer.g:619:3: '>' 
            {
            $this->matchChar(62); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GREATER"

    // $ANTLR start "OPEN_BRACE"
    function mOPEN_BRACE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$OPEN_BRACE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:623:3: ( '(' ) 
            // Tokenizer.g:624:3: '(' 
            {
            $this->matchChar(40); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPEN_BRACE"

    // $ANTLR start "CLOSE_BRACE"
    function mCLOSE_BRACE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$CLOSE_BRACE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:628:3: ( ')' ) 
            // Tokenizer.g:629:3: ')' 
            {
            $this->matchChar(41); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CLOSE_BRACE"

    // $ANTLR start "LESS_EQUAL"
    function mLESS_EQUAL(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$LESS_EQUAL;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:633:3: ( '<=' ) 
            // Tokenizer.g:634:3: '<=' 
            {
            $this->matchString("<="); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LESS_EQUAL"

    // $ANTLR start "GREATER_EQUAL"
    function mGREATER_EQUAL(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$GREATER_EQUAL;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:638:3: ( '>=' ) 
            // Tokenizer.g:639:3: '>=' 
            {
            $this->matchString(">="); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GREATER_EQUAL"

    // $ANTLR start "NOT_EQUAL"
    function mNOT_EQUAL(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$NOT_EQUAL;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:643:3: ( '!=' ) 
            // Tokenizer.g:644:3: '!=' 
            {
            $this->matchString("!="); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NOT_EQUAL"

    // $ANTLR start "OPEN_SQUARE_BRACE"
    function mOPEN_SQUARE_BRACE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$OPEN_SQUARE_BRACE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:648:3: ( '[' ) 
            // Tokenizer.g:649:3: '[' 
            {
            $this->matchChar(91); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPEN_SQUARE_BRACE"

    // $ANTLR start "CLOSE_SQUARE_BRACE"
    function mCLOSE_SQUARE_BRACE(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$CLOSE_SQUARE_BRACE;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:653:3: ( ']' ) 
            // Tokenizer.g:654:3: ']' 
            {
            $this->matchChar(93); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CLOSE_SQUARE_BRACE"

    // $ANTLR start "HAT_LABEL"
    function mHAT_LABEL(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$HAT_LABEL;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:658:3: ( '^' ) 
            // Tokenizer.g:659:3: '^' 
            {
            $this->matchChar(94); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "HAT_LABEL"

    // $ANTLR start "QUESTION_MARK_LABEL"
    function mQUESTION_MARK_LABEL(){
        try {
            $_type = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$QUESTION_MARK_LABEL;
            $_channel = Erfurt_Sparql_Parser_Sparql10_Sparql10_Tokenizer::$DEFAULT_TOKEN_CHANNEL;
            // Tokenizer.g:663:3: ( '?' ) 
            // Tokenizer.g:664:3: '?' 
            {
            $this->matchChar(63); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "QUESTION_MARK_LABEL"

    function mTokens(){
        // Tokenizer.g:1:8: ( BASE | PREFIX | NOT | SELECT | DISTINCT | REDUCED | CONSTRUCT | DESCRIBE | ASK | FROM | NAMED | WHERE | ORDER | GROUP | BY | ASC | DESC | LIMIT | OFFSET | OPTIONAL | GRAPH | UNION | FILTER | A | AS | STR | LANG | LANGMATCHES | DATATYPE | BOUND | SAMETERM | ISIRI | ISURI | ISBLANK | ISLITERAL | REGEX | TRUE | FALSE | IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | LANGTAG | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | BLANK_NODE_LABEL | REFERENCE | AND | OR | COMMENT | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | SEMICOLON | DOT | PLUS | MINUS | ASTERISK | COMMA | NOT_SIGN | DIVIDE | EQUAL | LESS | GREATER | OPEN_BRACE | CLOSE_BRACE | LESS_EQUAL | GREATER_EQUAL | NOT_EQUAL | OPEN_SQUARE_BRACE | CLOSE_SQUARE_BRACE | HAT_LABEL | QUESTION_MARK_LABEL ) 
        $alt36=85;
        $alt36 = $this->dfa36->predict($this->input);
        switch ($alt36) {
            case 1 :
                // Tokenizer.g:1:10: BASE 
                {
                $this->mBASE(); 

                }
                break;
            case 2 :
                // Tokenizer.g:1:15: PREFIX 
                {
                $this->mPREFIX(); 

                }
                break;
            case 3 :
                // Tokenizer.g:1:22: NOT 
                {
                $this->mNOT(); 

                }
                break;
            case 4 :
                // Tokenizer.g:1:26: SELECT 
                {
                $this->mSELECT(); 

                }
                break;
            case 5 :
                // Tokenizer.g:1:33: DISTINCT 
                {
                $this->mDISTINCT(); 

                }
                break;
            case 6 :
                // Tokenizer.g:1:42: REDUCED 
                {
                $this->mREDUCED(); 

                }
                break;
            case 7 :
                // Tokenizer.g:1:50: CONSTRUCT 
                {
                $this->mCONSTRUCT(); 

                }
                break;
            case 8 :
                // Tokenizer.g:1:60: DESCRIBE 
                {
                $this->mDESCRIBE(); 

                }
                break;
            case 9 :
                // Tokenizer.g:1:69: ASK 
                {
                $this->mASK(); 

                }
                break;
            case 10 :
                // Tokenizer.g:1:73: FROM 
                {
                $this->mFROM(); 

                }
                break;
            case 11 :
                // Tokenizer.g:1:78: NAMED 
                {
                $this->mNAMED(); 

                }
                break;
            case 12 :
                // Tokenizer.g:1:84: WHERE 
                {
                $this->mWHERE(); 

                }
                break;
            case 13 :
                // Tokenizer.g:1:90: ORDER 
                {
                $this->mORDER(); 

                }
                break;
            case 14 :
                // Tokenizer.g:1:96: GROUP 
                {
                $this->mGROUP(); 

                }
                break;
            case 15 :
                // Tokenizer.g:1:102: BY 
                {
                $this->mBY(); 

                }
                break;
            case 16 :
                // Tokenizer.g:1:105: ASC 
                {
                $this->mASC(); 

                }
                break;
            case 17 :
                // Tokenizer.g:1:109: DESC 
                {
                $this->mDESC(); 

                }
                break;
            case 18 :
                // Tokenizer.g:1:114: LIMIT 
                {
                $this->mLIMIT(); 

                }
                break;
            case 19 :
                // Tokenizer.g:1:120: OFFSET 
                {
                $this->mOFFSET(); 

                }
                break;
            case 20 :
                // Tokenizer.g:1:127: OPTIONAL 
                {
                $this->mOPTIONAL(); 

                }
                break;
            case 21 :
                // Tokenizer.g:1:136: GRAPH 
                {
                $this->mGRAPH(); 

                }
                break;
            case 22 :
                // Tokenizer.g:1:142: UNION 
                {
                $this->mUNION(); 

                }
                break;
            case 23 :
                // Tokenizer.g:1:148: FILTER 
                {
                $this->mFILTER(); 

                }
                break;
            case 24 :
                // Tokenizer.g:1:155: A 
                {
                $this->gErfurt_Sparql_Parser_Sparql10_Sparql10->mA(); 

                }
                break;
            case 25 :
                // Tokenizer.g:1:157: AS 
                {
                $this->mAS(); 

                }
                break;
            case 26 :
                // Tokenizer.g:1:160: STR 
                {
                $this->mSTR(); 

                }
                break;
            case 27 :
                // Tokenizer.g:1:164: LANG 
                {
                $this->mLANG(); 

                }
                break;
            case 28 :
                // Tokenizer.g:1:169: LANGMATCHES 
                {
                $this->mLANGMATCHES(); 

                }
                break;
            case 29 :
                // Tokenizer.g:1:181: DATATYPE 
                {
                $this->mDATATYPE(); 

                }
                break;
            case 30 :
                // Tokenizer.g:1:190: BOUND 
                {
                $this->mBOUND(); 

                }
                break;
            case 31 :
                // Tokenizer.g:1:196: SAMETERM 
                {
                $this->mSAMETERM(); 

                }
                break;
            case 32 :
                // Tokenizer.g:1:205: ISIRI 
                {
                $this->mISIRI(); 

                }
                break;
            case 33 :
                // Tokenizer.g:1:211: ISURI 
                {
                $this->mISURI(); 

                }
                break;
            case 34 :
                // Tokenizer.g:1:217: ISBLANK 
                {
                $this->mISBLANK(); 

                }
                break;
            case 35 :
                // Tokenizer.g:1:225: ISLITERAL 
                {
                $this->mISLITERAL(); 

                }
                break;
            case 36 :
                // Tokenizer.g:1:235: REGEX 
                {
                $this->mREGEX(); 

                }
                break;
            case 37 :
                // Tokenizer.g:1:241: TRUE 
                {
                $this->mTRUE(); 

                }
                break;
            case 38 :
                // Tokenizer.g:1:246: FALSE 
                {
                $this->mFALSE(); 

                }
                break;
            case 39 :
                // Tokenizer.g:1:252: IRI_REF 
                {
                $this->mIRI_REF(); 

                }
                break;
            case 40 :
                // Tokenizer.g:1:260: PNAME_NS 
                {
                $this->mPNAME_NS(); 

                }
                break;
            case 41 :
                // Tokenizer.g:1:269: PNAME_LN 
                {
                $this->mPNAME_LN(); 

                }
                break;
            case 42 :
                // Tokenizer.g:1:278: VAR1 
                {
                $this->mVAR1(); 

                }
                break;
            case 43 :
                // Tokenizer.g:1:283: VAR2 
                {
                $this->mVAR2(); 

                }
                break;
            case 44 :
                // Tokenizer.g:1:288: LANGTAG 
                {
                $this->mLANGTAG(); 

                }
                break;
            case 45 :
                // Tokenizer.g:1:296: INTEGER 
                {
                $this->mINTEGER(); 

                }
                break;
            case 46 :
                // Tokenizer.g:1:304: DECIMAL 
                {
                $this->mDECIMAL(); 

                }
                break;
            case 47 :
                // Tokenizer.g:1:312: DOUBLE 
                {
                $this->mDOUBLE(); 

                }
                break;
            case 48 :
                // Tokenizer.g:1:319: INTEGER_POSITIVE 
                {
                $this->mINTEGER_POSITIVE(); 

                }
                break;
            case 49 :
                // Tokenizer.g:1:336: DECIMAL_POSITIVE 
                {
                $this->mDECIMAL_POSITIVE(); 

                }
                break;
            case 50 :
                // Tokenizer.g:1:353: DOUBLE_POSITIVE 
                {
                $this->mDOUBLE_POSITIVE(); 

                }
                break;
            case 51 :
                // Tokenizer.g:1:369: INTEGER_NEGATIVE 
                {
                $this->mINTEGER_NEGATIVE(); 

                }
                break;
            case 52 :
                // Tokenizer.g:1:386: DECIMAL_NEGATIVE 
                {
                $this->mDECIMAL_NEGATIVE(); 

                }
                break;
            case 53 :
                // Tokenizer.g:1:403: DOUBLE_NEGATIVE 
                {
                $this->mDOUBLE_NEGATIVE(); 

                }
                break;
            case 54 :
                // Tokenizer.g:1:419: STRING_LITERAL1 
                {
                $this->mSTRING_LITERAL1(); 

                }
                break;
            case 55 :
                // Tokenizer.g:1:435: STRING_LITERAL2 
                {
                $this->mSTRING_LITERAL2(); 

                }
                break;
            case 56 :
                // Tokenizer.g:1:451: STRING_LITERAL_LONG1 
                {
                $this->mSTRING_LITERAL_LONG1(); 

                }
                break;
            case 57 :
                // Tokenizer.g:1:472: STRING_LITERAL_LONG2 
                {
                $this->mSTRING_LITERAL_LONG2(); 

                }
                break;
            case 58 :
                // Tokenizer.g:1:493: WS 
                {
                $this->mWS(); 

                }
                break;
            case 59 :
                // Tokenizer.g:1:496: BLANK_NODE_LABEL 
                {
                $this->mBLANK_NODE_LABEL(); 

                }
                break;
            case 60 :
                // Tokenizer.g:1:513: REFERENCE 
                {
                $this->mREFERENCE(); 

                }
                break;
            case 61 :
                // Tokenizer.g:1:523: AND 
                {
                $this->mAND(); 

                }
                break;
            case 62 :
                // Tokenizer.g:1:527: OR 
                {
                $this->mOR(); 

                }
                break;
            case 63 :
                // Tokenizer.g:1:530: COMMENT 
                {
                $this->mCOMMENT(); 

                }
                break;
            case 64 :
                // Tokenizer.g:1:538: OPEN_CURLY_BRACE 
                {
                $this->mOPEN_CURLY_BRACE(); 

                }
                break;
            case 65 :
                // Tokenizer.g:1:555: CLOSE_CURLY_BRACE 
                {
                $this->mCLOSE_CURLY_BRACE(); 

                }
                break;
            case 66 :
                // Tokenizer.g:1:573: SEMICOLON 
                {
                $this->mSEMICOLON(); 

                }
                break;
            case 67 :
                // Tokenizer.g:1:583: DOT 
                {
                $this->mDOT(); 

                }
                break;
            case 68 :
                // Tokenizer.g:1:587: PLUS 
                {
                $this->mPLUS(); 

                }
                break;
            case 69 :
                // Tokenizer.g:1:592: MINUS 
                {
                $this->mMINUS(); 

                }
                break;
            case 70 :
                // Tokenizer.g:1:598: ASTERISK 
                {
                $this->mASTERISK(); 

                }
                break;
            case 71 :
                // Tokenizer.g:1:607: COMMA 
                {
                $this->mCOMMA(); 

                }
                break;
            case 72 :
                // Tokenizer.g:1:613: NOT_SIGN 
                {
                $this->mNOT_SIGN(); 

                }
                break;
            case 73 :
                // Tokenizer.g:1:622: DIVIDE 
                {
                $this->mDIVIDE(); 

                }
                break;
            case 74 :
                // Tokenizer.g:1:629: EQUAL 
                {
                $this->mEQUAL(); 

                }
                break;
            case 75 :
                // Tokenizer.g:1:635: LESS 
                {
                $this->mLESS(); 

                }
                break;
            case 76 :
                // Tokenizer.g:1:640: GREATER 
                {
                $this->mGREATER(); 

                }
                break;
            case 77 :
                // Tokenizer.g:1:648: OPEN_BRACE 
                {
                $this->mOPEN_BRACE(); 

                }
                break;
            case 78 :
                // Tokenizer.g:1:659: CLOSE_BRACE 
                {
                $this->mCLOSE_BRACE(); 

                }
                break;
            case 79 :
                // Tokenizer.g:1:671: LESS_EQUAL 
                {
                $this->mLESS_EQUAL(); 

                }
                break;
            case 80 :
                // Tokenizer.g:1:682: GREATER_EQUAL 
                {
                $this->mGREATER_EQUAL(); 

                }
                break;
            case 81 :
                // Tokenizer.g:1:696: NOT_EQUAL 
                {
                $this->mNOT_EQUAL(); 

                }
                break;
            case 82 :
                // Tokenizer.g:1:706: OPEN_SQUARE_BRACE 
                {
                $this->mOPEN_SQUARE_BRACE(); 

                }
                break;
            case 83 :
                // Tokenizer.g:1:724: CLOSE_SQUARE_BRACE 
                {
                $this->mCLOSE_SQUARE_BRACE(); 

                }
                break;
            case 84 :
                // Tokenizer.g:1:743: HAT_LABEL 
                {
                $this->mHAT_LABEL(); 

                }
                break;
            case 85 :
                // Tokenizer.g:1:753: QUESTION_MARK_LABEL 
                {
                $this->mQUESTION_MARK_LABEL(); 

                }
                break;

        }

    }



}
?>