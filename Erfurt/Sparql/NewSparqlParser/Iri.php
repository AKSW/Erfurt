<?php
// $ANTLR 3.1.3 “ˆŽ 06, 2009 18:28:01 Iri.g 2009-12-01 11:35:10


# for convenience in actions
if (!defined('HIDDEN')) define('HIDDEN', BaseRecognizer::$HIDDEN);

 
function Iri_DFA29_static(){
    $eot = array(5, 65535);
    $eof = array(5, 65535);
    $min = array(2, 46, 3, 65535);
    $max = array(1, 57, 1, 101, 3, 65535);
    $accept = array(2, 65535, 1, 2, 1, 3, 1, 1);
    $special = array(5, 65535);
    $transitionS = array(array(1, 2, 1, 65535, 10, 1), array(1, 4, 1, 65535, 
    10, 1, 11, 65535, 1, 3, 31, 65535, 1, 3), array(), array(), array());

    $arr = array();
    $arr['eot'] = DFA::unpackRLE($eot);
    $arr['eof'] = DFA::unpackRLE($eof);
    $arr['min'] = DFA::unpackRLE($min, true);
    $arr['max'] = DFA::unpackRLE($max, true);
    $arr['accept'] = DFA::unpackRLE($accept);
    $arr['special'] = DFA::unpackRLE($special);


    $numStates = sizeof($transitionS);
    $arr['transition'] = array();
    for ($i=0; $i<$numStates; $i++) {
        $arr['transition'][$i] = DFA::unpackRLE($transitionS[$i]);
    }
    return $arr;
}
$Iri_DFA29 = Iri_DFA29_static();

class Iri_DFA29 extends DFA {

    public function __construct($recognizer) {
        global $Iri_DFA29;
        $DFA = $Iri_DFA29;
        $this->recognizer = $recognizer;
        $this->decisionNumber = 29;
        $this->eot = $DFA['eot'];
        $this->eof = $DFA['eof'];
        $this->min = $DFA['min'];
        $this->max = $DFA['max'];
        $this->accept = $DFA['accept'];
        $this->special = $DFA['special'];
        $this->transition = $DFA['transition'];
    }
    public function getDescription() {
        return "350:1: DOUBLE : ( ( DIGIT )+ DOT ( DIGIT )* EXPONENT | DOT ( DIGIT )+ EXPONENT | ( DIGIT )+ EXPONENT );";
    }
}
function Iri_DFA33_static(){
    $eot = array(1, 65535, 1, 50, 7, 65535, 1, 67, 11, 65535, 1, 82, 1, 
    65535, 1, 84, 1, 86, 1, 89, 2, 65535, 1, 93, 2, 65535, 1, 95, 13, 65535, 
    1, 100, 3, 65535, 1, 103, 3, 65535, 1, 105, 31, 65535, 1, 136, 1, 65535, 
    1, 137, 2, 65535, 1, 141, 5, 65535, 1, 97, 1, 65535, 1, 99, 2, 65535, 
    1, 136, 7, 65535, 1, 152, 7, 65535, 1, 160, 1, 161, 19, 65535, 1, 179, 
    1, 65535, 1, 179, 1, 65535, 1, 181, 1, 65535, 1, 181, 2, 65535, 1, 136, 
    1, 183, 6, 65535, 1, 190, 6, 65535, 1, 195, 8, 65535, 1, 205, 6, 65535, 
    1, 212, 1, 65535, 1, 179, 1, 65535, 1, 181, 1, 65535, 1, 213, 8, 65535, 
    1, 221, 3, 65535, 1, 224, 1, 225, 1, 226, 1, 227, 2, 65535, 1, 230, 
    2, 65535, 1, 232, 1, 233, 1, 234, 1, 235, 4, 65535, 1, 238, 1, 239, 
    7, 65535, 1, 246, 4, 65535, 1, 247, 15, 65535, 1, 256, 5, 65535, 1, 
    260, 1, 65535, 1, 262, 1, 263, 1, 264, 1, 265, 2, 65535, 1, 267, 7, 
    65535, 1, 270, 2, 65535, 1, 272, 3, 65535, 1, 274, 1, 65535);
    $eof = array(275, 65535);
    $min = array(1, 9, 1, 33, 1, 65535, 18, 45, 1, 48, 1, 65535, 1, 48, 
    2, 46, 2, 65535, 1, 61, 2, 65535, 1, 61, 4, 65535, 2, 0, 7, 65535, 1, 
    46, 3, 65535, 1, 33, 2, 65535, 15, 45, 1, 65535, 14, 45, 3, 65535, 1, 
    48, 1, 65535, 1, 46, 1, 48, 1, 65535, 1, 46, 1, 48, 4, 65535, 1, 39, 
    1, 65535, 1, 34, 2, 65535, 1, 48, 2, 65535, 1, 45, 1, 65535, 30, 45, 
    2, 65535, 1, 48, 1, 65535, 1, 48, 1, 65535, 1, 48, 1, 65535, 1, 48, 
    2, 65535, 1, 48, 4, 45, 1, 65535, 7, 45, 2, 65535, 17, 45, 1, 65535, 
    1, 48, 1, 65535, 1, 48, 1, 65535, 6, 45, 1, 65535, 4, 45, 1, 65535, 
    9, 45, 1, 65535, 6, 45, 2, 65535, 7, 45, 1, 65535, 2, 45, 4, 65535, 
    2, 45, 1, 65535, 1, 45, 4, 65535, 2, 45, 2, 65535, 6, 45, 2, 65535, 
    8, 45, 1, 65535, 3, 45, 1, 65535, 1, 45, 4, 65535, 1, 45, 1, 65535, 
    2, 45, 1, 65535, 1, 45, 1, 65535, 1, 45, 1, 65535);
    $max = array(1, 65533, 1, 65535, 1, 65535, 19, 65533, 1, 65535, 3, 57, 
    2, 65535, 1, 61, 2, 65535, 1, 61, 4, 65535, 2, 65535, 7, 65535, 1, 101, 
    3, 65535, 1, 65535, 2, 65535, 15, 65533, 1, 65535, 14, 65533, 3, 65535, 
    1, 101, 1, 65535, 1, 101, 1, 57, 1, 65535, 1, 101, 1, 57, 4, 65535, 
    1, 39, 1, 65535, 1, 34, 2, 65535, 1, 101, 2, 65535, 1, 65533, 1, 65535, 
    30, 65533, 2, 65535, 1, 101, 1, 65535, 1, 101, 1, 65535, 1, 101, 1, 
    65535, 1, 101, 2, 65535, 1, 101, 4, 65533, 1, 65535, 7, 65533, 2, 65535, 
    17, 65533, 1, 65535, 1, 101, 1, 65535, 1, 101, 1, 65535, 6, 65533, 1, 
    65535, 4, 65533, 1, 65535, 9, 65533, 1, 65535, 6, 65533, 2, 65535, 7, 
    65533, 1, 65535, 2, 65533, 4, 65535, 2, 65533, 1, 65535, 1, 65533, 4, 
    65535, 2, 65533, 2, 65535, 6, 65533, 2, 65535, 8, 65533, 1, 65535, 3, 
    65533, 1, 65535, 1, 65533, 4, 65535, 1, 65533, 1, 65535, 2, 65533, 1, 
    65535, 1, 65533, 1, 65535, 1, 65533, 1, 65535);
    $accept = array(2, 65535, 1, 2, 19, 65535, 1, 40, 3, 65535, 1, 44, 1, 
    45, 1, 65535, 1, 47, 1, 48, 1, 65535, 1, 51, 1, 52, 1, 53, 1, 54, 2, 
    65535, 1, 59, 1, 60, 1, 61, 1, 65, 1, 66, 1, 67, 1, 68, 1, 65535, 1, 
    78, 1, 79, 1, 80, 1, 65535, 1, 49, 1, 1, 15, 65535, 1, 24, 14, 65535, 
    1, 39, 1, 38, 1, 41, 1, 65535, 1, 42, 2, 65535, 1, 43, 2, 65535, 1, 
    64, 1, 46, 1, 63, 1, 50, 1, 65535, 1, 55, 1, 65535, 1, 56, 1, 69, 1, 
    65535, 1, 71, 1, 62, 1, 65535, 1, 15, 30, 65535, 1, 70, 1, 72, 1, 65535, 
    1, 74, 1, 65535, 1, 75, 1, 65535, 1, 77, 1, 65535, 1, 57, 1, 58, 5, 
    65535, 1, 25, 7, 65535, 1, 10, 1, 16, 17, 65535, 1, 73, 1, 65535, 1, 
    76, 1, 65535, 1, 3, 6, 65535, 1, 17, 4, 65535, 1, 11, 9, 65535, 1, 26, 
    6, 65535, 1, 36, 1, 29, 7, 65535, 1, 35, 2, 65535, 1, 37, 1, 12, 1, 
    13, 1, 14, 2, 65535, 1, 18, 1, 65535, 1, 21, 1, 22, 1, 31, 1, 32, 2, 
    65535, 1, 4, 1, 5, 6, 65535, 1, 23, 1, 19, 8, 65535, 1, 7, 3, 65535, 
    1, 33, 1, 65535, 1, 30, 1, 6, 1, 9, 1, 28, 1, 65535, 1, 20, 2, 65535, 
    1, 8, 1, 65535, 1, 34, 1, 65535, 1, 27);
    $special = array(36, 65535, 1, 0, 1, 1, 237, 65535);
    $transitionS = array(array(2, 2, 2, 65535, 1, 2, 18, 65535, 1, 2, 1, 
    28, 1, 37, 1, 48, 1, 35, 1, 65535, 1, 41, 1, 36, 1, 38, 1, 39, 1, 26, 
    1, 24, 1, 27, 1, 25, 1, 23, 1, 29, 10, 45, 1, 21, 1, 22, 1, 1, 1, 30, 
    1, 31, 1, 34, 1, 44, 1, 17, 1, 3, 1, 8, 1, 6, 1, 20, 1, 10, 1, 15, 1, 
    20, 1, 18, 2, 20, 1, 14, 1, 20, 1, 11, 1, 13, 1, 4, 1, 20, 1, 7, 1, 
    5, 1, 19, 1, 16, 1, 20, 1, 12, 3, 20, 1, 46, 1, 65535, 1, 47, 1, 40, 
    1, 43, 1, 65535, 1, 9, 1, 3, 1, 8, 1, 6, 1, 20, 1, 10, 1, 15, 1, 20, 
    1, 18, 2, 20, 1, 14, 1, 20, 1, 11, 1, 13, 1, 4, 1, 20, 1, 7, 1, 5, 1, 
    19, 1, 16, 1, 20, 1, 12, 3, 20, 1, 32, 1, 42, 1, 33, 66, 65535, 23, 
    20, 1, 65535, 31, 20, 1, 65535, 520, 20, 112, 65535, 14, 20, 1, 65535, 
    7297, 20, 12, 65535, 2, 20, 98, 65535, 288, 20, 2672, 65535, 1008, 20, 
    17, 65535, 43007, 20, 8448, 65535, 1232, 20, 32, 65535, 526, 20), array(
    1, 51, 1, 65535, 25, 51, 1, 65535, 1, 49, 30, 51, 1, 65535, 1, 51, 1, 
    65535, 1, 51, 1, 65535, 26, 51, 3, 65535, 65410, 51), array(), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 1, 52, 13, 55, 1, 54, 
    9, 55, 1, 53, 1, 55, 4, 65535, 1, 55, 1, 65535, 1, 52, 13, 55, 1, 54, 
    9, 55, 1, 53, 1, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 17, 55, 1, 57, 8, 55, 4, 65535, 1, 
    55, 1, 65535, 17, 55, 1, 57, 8, 55, 60, 65535, 1, 55, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 1, 60, 3, 55, 1, 58, 
    14, 55, 1, 59, 6, 55, 4, 65535, 1, 55, 1, 65535, 1, 60, 3, 55, 1, 58, 
    14, 55, 1, 59, 6, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 1, 63, 3, 55, 1, 62, 3, 55, 
    1, 61, 17, 55, 4, 65535, 1, 55, 1, 65535, 1, 63, 3, 55, 1, 62, 3, 55, 
    1, 61, 17, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 64, 21, 55, 4, 65535, 1, 
    55, 1, 65535, 4, 55, 1, 64, 21, 55, 60, 65535, 1, 55, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 14, 55, 1, 65, 11, 
    55, 4, 65535, 1, 55, 1, 65535, 14, 55, 1, 65, 11, 55, 60, 65535, 1, 
    55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 18, 
    55, 1, 66, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 66, 7, 55, 60, 
    65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 1, 70, 7, 55, 1, 69, 8, 55, 1, 68, 8, 55, 4, 65535, 1, 55, 
    1, 65535, 1, 70, 7, 55, 1, 69, 8, 55, 1, 68, 8, 55, 60, 65535, 1, 55, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 1, 71, 25, 
    55, 4, 65535, 1, 55, 1, 65535, 1, 71, 25, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 7, 55, 1, 72, 
    18, 55, 4, 65535, 1, 55, 1, 65535, 7, 55, 1, 72, 18, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 5, 
    55, 1, 74, 9, 55, 1, 75, 1, 55, 1, 73, 8, 55, 4, 65535, 1, 55, 1, 65535, 
    5, 55, 1, 74, 9, 55, 1, 75, 1, 55, 1, 73, 8, 55, 60, 65535, 1, 55, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 1, 77, 7, 
    55, 1, 76, 17, 55, 4, 65535, 1, 55, 1, 65535, 1, 77, 7, 55, 1, 76, 17, 
    55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 17, 55, 1, 78, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 
    55, 1, 78, 8, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 13, 55, 1, 79, 12, 55, 4, 65535, 
    1, 55, 1, 65535, 13, 55, 1, 79, 12, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 18, 55, 1, 66, 
    7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 66, 7, 55, 60, 65535, 1, 
    55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 18, 
    55, 1, 80, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 80, 7, 55, 60, 
    65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 17, 55, 1, 81, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 
    81, 8, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 
    65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 
    10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(10, 83, 7, 65535, 26, 83, 4, 65535, 1, 
    83, 1, 65535, 26, 83, 69, 65535, 23, 83, 1, 65535, 31, 83, 1, 65535, 
    520, 83, 112, 65535, 14, 83, 1, 65535, 7297, 83, 12, 65535, 2, 83, 98, 
    65535, 288, 83, 2672, 65535, 1008, 83, 17, 65535, 43007, 83, 8448, 65535, 
    1232, 83, 32, 65535, 526, 83), array(), array(10, 85), array(1, 88, 
    1, 65535, 10, 87), array(1, 91, 1, 65535, 10, 90), array(), array(), 
    array(1, 92), array(), array(), array(1, 94), array(), array(), array(
    ), array(), array(10, 97, 1, 65535, 2, 97, 1, 65535, 25, 97, 1, 96, 
    65496, 97), array(10, 99, 1, 65535, 2, 99, 1, 65535, 20, 99, 1, 98, 
    65501, 99), array(), array(), array(), array(), array(), array(), array(
    ), array(1, 101, 1, 65535, 10, 45, 11, 65535, 1, 102, 31, 65535, 1, 
    102), array(), array(), array(), array(1, 51, 1, 65535, 25, 51, 1, 65535, 
    31, 51, 1, 65535, 1, 51, 1, 65535, 1, 51, 1, 65535, 26, 51, 3, 65535, 
    65410, 51), array(), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 18, 55, 1, 104, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 
    55, 1, 104, 7, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 
    26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 20, 55, 1, 106, 5, 55, 4, 65535, 1, 55, 1, 65535, 20, 
    55, 1, 106, 5, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 
    26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    7, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 
    107, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 107, 21, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 11, 
    55, 1, 108, 14, 55, 4, 65535, 1, 55, 1, 65535, 11, 55, 1, 108, 14, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 17, 55, 1, 109, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 
    1, 109, 8, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 12, 55, 1, 110, 13, 55, 4, 65535, 
    1, 55, 1, 65535, 12, 55, 1, 110, 13, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 18, 55, 1, 111, 
    7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 111, 7, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 18, 
    55, 1, 112, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 112, 7, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 19, 55, 1, 113, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 
    1, 113, 6, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 3, 55, 1, 114, 2, 55, 1, 115, 19, 
    55, 4, 65535, 1, 55, 1, 65535, 3, 55, 1, 114, 2, 55, 1, 115, 19, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 13, 55, 1, 116, 12, 55, 4, 65535, 1, 55, 1, 65535, 13, 55, 
    1, 116, 12, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 2, 55, 1, 118, 7, 55, 1, 117, 15, 
    55, 4, 65535, 1, 55, 1, 65535, 2, 55, 1, 118, 7, 55, 1, 117, 15, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(), array(1, 55, 1, 56, 1, 65535, 10, 
    55, 1, 21, 6, 65535, 14, 55, 1, 119, 11, 55, 4, 65535, 1, 55, 1, 65535, 
    14, 55, 1, 119, 11, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 11, 55, 1, 120, 14, 55, 4, 
    65535, 1, 55, 1, 65535, 11, 55, 1, 120, 14, 55, 60, 65535, 1, 55, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 11, 55, 
    1, 121, 14, 55, 4, 65535, 1, 55, 1, 65535, 11, 55, 1, 121, 14, 55, 60, 
    65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 12, 55, 1, 122, 13, 55, 4, 65535, 1, 55, 1, 65535, 12, 55, 
    1, 122, 13, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 123, 21, 55, 4, 65535, 
    1, 55, 1, 65535, 4, 55, 1, 123, 21, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 3, 55, 1, 124, 
    22, 55, 4, 65535, 1, 55, 1, 65535, 3, 55, 1, 124, 22, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 5, 
    55, 1, 125, 20, 55, 4, 65535, 1, 55, 1, 65535, 5, 55, 1, 125, 20, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 19, 55, 1, 126, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 
    1, 126, 6, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 12, 55, 1, 127, 13, 55, 4, 65535, 
    1, 55, 1, 65535, 12, 55, 1, 127, 13, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 13, 55, 1, 128, 
    12, 55, 4, 65535, 1, 55, 1, 65535, 13, 55, 1, 128, 12, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 1, 
    129, 25, 55, 4, 65535, 1, 55, 1, 65535, 1, 129, 25, 55, 60, 65535, 1, 
    55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 8, 
    55, 1, 130, 17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 130, 17, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 1, 55, 1, 133, 6, 55, 1, 131, 2, 55, 1, 134, 8, 55, 1, 132, 
    5, 55, 4, 65535, 1, 55, 1, 65535, 1, 55, 1, 133, 6, 55, 1, 131, 2, 55, 
    1, 134, 8, 55, 1, 132, 5, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 20, 55, 1, 135, 5, 
    55, 4, 65535, 1, 55, 1, 65535, 20, 55, 1, 135, 5, 55, 60, 65535, 1, 
    55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(), array(), array(10, 85, 11, 65535, 1, 102, 
    31, 65535, 1, 102), array(), array(1, 138, 1, 65535, 10, 87, 11, 65535, 
    1, 139, 31, 65535, 1, 139), array(10, 140), array(), array(1, 142, 1, 
    65535, 10, 90, 11, 65535, 1, 143, 31, 65535, 1, 143), array(10, 144), 
    array(), array(), array(), array(), array(1, 145), array(), array(1, 
    146), array(), array(), array(10, 147, 11, 65535, 1, 102, 31, 65535, 
    1, 102), array(), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 
    21, 6, 65535, 4, 55, 1, 148, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 
    1, 148, 21, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 13, 55, 1, 149, 12, 55, 4, 
    65535, 1, 55, 1, 65535, 13, 55, 1, 149, 12, 55, 60, 65535, 1, 55, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 5, 55, 1, 
    150, 20, 55, 4, 65535, 1, 55, 1, 65535, 5, 55, 1, 150, 20, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 
    55, 1, 151, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 151, 21, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 
    153, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 153, 21, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 19, 
    55, 1, 154, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 154, 6, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 2, 55, 1, 155, 23, 55, 4, 65535, 1, 55, 1, 65535, 2, 55, 1, 
    155, 23, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 
    65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 
    10, 55, 1, 21, 6, 65535, 1, 156, 25, 55, 4, 65535, 1, 55, 1, 65535, 
    1, 156, 25, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 20, 55, 1, 157, 5, 55, 4, 65535, 
    1, 55, 1, 65535, 20, 55, 1, 157, 5, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 158, 
    21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 158, 21, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 18, 
    55, 1, 159, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 159, 7, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 
    4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 
    1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 12, 55, 1, 162, 13, 
    55, 4, 65535, 1, 55, 1, 65535, 12, 55, 1, 162, 13, 55, 60, 65535, 1, 
    55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 19, 
    55, 1, 163, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 163, 6, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 18, 55, 1, 164, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 
    1, 164, 7, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 165, 21, 55, 4, 65535, 
    1, 55, 1, 65535, 4, 55, 1, 165, 21, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 17, 55, 1, 166, 
    8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 166, 8, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 
    55, 1, 167, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 167, 21, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 18, 55, 1, 168, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 
    1, 168, 7, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 8, 55, 1, 169, 17, 55, 4, 65535, 
    1, 55, 1, 65535, 8, 55, 1, 169, 17, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 8, 55, 1, 170, 
    17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 170, 17, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 6, 
    55, 1, 171, 19, 55, 4, 65535, 1, 55, 1, 65535, 6, 55, 1, 171, 19, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 15, 55, 1, 172, 10, 55, 4, 65535, 1, 55, 1, 65535, 15, 55, 
    1, 172, 10, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 14, 55, 1, 173, 11, 55, 4, 65535, 
    1, 55, 1, 65535, 14, 55, 1, 173, 11, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 17, 55, 1, 174, 
    8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 174, 8, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 17, 
    55, 1, 175, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 175, 8, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 11, 55, 1, 176, 14, 55, 4, 65535, 1, 55, 1, 65535, 11, 55, 
    1, 176, 14, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 8, 55, 1, 177, 17, 55, 4, 65535, 
    1, 55, 1, 65535, 8, 55, 1, 177, 17, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 178, 
    21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 178, 21, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(), array(10, 180, 11, 65535, 1, 139, 31, 65535, 
    1, 139), array(), array(10, 140, 11, 65535, 1, 139, 31, 65535, 1, 139), 
    array(), array(10, 182, 11, 65535, 1, 143, 31, 65535, 1, 143), array(
    ), array(10, 144, 11, 65535, 1, 143, 31, 65535, 1, 143), array(), array(
    ), array(10, 147, 11, 65535, 1, 102, 31, 65535, 1, 102), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 
    65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 3, 55, 1, 184, 22, 55, 4, 65535, 
    1, 55, 1, 65535, 3, 55, 1, 184, 22, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 8, 55, 1, 185, 
    17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 185, 17, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 2, 
    55, 1, 186, 23, 55, 4, 65535, 1, 55, 1, 65535, 2, 55, 1, 186, 23, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(), array(1, 55, 1, 56, 1, 65535, 10, 
    55, 1, 21, 6, 65535, 19, 55, 1, 187, 6, 55, 4, 65535, 1, 55, 1, 65535, 
    19, 55, 1, 187, 6, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 8, 55, 1, 188, 17, 55, 4, 
    65535, 1, 55, 1, 65535, 8, 55, 1, 188, 17, 55, 60, 65535, 1, 55, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 17, 55, 
    1, 189, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 189, 8, 55, 60, 
    65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 
    1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 
    55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 19, 55, 1, 191, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 
    1, 191, 6, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 2, 55, 1, 192, 23, 55, 4, 65535, 
    1, 55, 1, 65535, 2, 55, 1, 192, 23, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 23, 55, 1, 193, 
    2, 55, 4, 65535, 1, 55, 1, 65535, 23, 55, 1, 193, 2, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 19, 
    55, 1, 194, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 194, 6, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(), array(), array(1, 55, 1, 56, 1, 65535, 
    10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 4, 55, 1, 196, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 
    196, 21, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 
    65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 
    10, 55, 1, 21, 6, 65535, 4, 55, 1, 197, 21, 55, 4, 65535, 1, 55, 1, 
    65535, 4, 55, 1, 197, 21, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 3, 55, 1, 198, 22, 
    55, 4, 65535, 1, 55, 1, 65535, 3, 55, 1, 198, 22, 55, 60, 65535, 1, 
    55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 
    55, 1, 199, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 199, 21, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 17, 55, 1, 200, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 
    1, 200, 8, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 201, 21, 55, 4, 65535, 
    1, 55, 1, 65535, 4, 55, 1, 201, 21, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 14, 55, 1, 202, 
    11, 55, 4, 65535, 1, 55, 1, 65535, 14, 55, 1, 202, 11, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 19, 
    55, 1, 203, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 203, 6, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 12, 55, 1, 204, 13, 55, 4, 65535, 1, 55, 1, 65535, 12, 55, 
    1, 204, 13, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 7, 55, 1, 206, 18, 55, 4, 65535, 
    1, 55, 1, 65535, 7, 55, 1, 206, 18, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 13, 55, 1, 207, 
    12, 55, 4, 65535, 1, 55, 1, 65535, 13, 55, 1, 207, 12, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 8, 
    55, 1, 208, 17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 208, 17, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 8, 55, 1, 209, 17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 
    209, 17, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 
    65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 
    10, 55, 1, 21, 6, 65535, 1, 210, 25, 55, 4, 65535, 1, 55, 1, 65535, 
    1, 210, 25, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 19, 55, 1, 211, 6, 55, 4, 65535, 
    1, 55, 1, 65535, 19, 55, 1, 211, 6, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 
    1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(
    10, 180, 11, 65535, 1, 139, 31, 65535, 1, 139), array(), array(10, 182, 
    11, 65535, 1, 143, 31, 65535, 1, 143), array(), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 
    26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 23, 55, 1, 214, 2, 55, 4, 65535, 1, 55, 1, 65535, 23, 
    55, 1, 214, 2, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 19, 55, 1, 215, 6, 55, 4, 65535, 
    1, 55, 1, 65535, 19, 55, 1, 215, 6, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 216, 
    21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 216, 21, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 13, 
    55, 1, 217, 12, 55, 4, 65535, 1, 55, 1, 65535, 13, 55, 1, 217, 12, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 8, 55, 1, 218, 17, 55, 4, 65535, 1, 55, 1, 65535, 8, 55, 1, 
    218, 17, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 
    65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(1, 55, 1, 
    56, 1, 65535, 10, 55, 1, 21, 6, 65535, 24, 55, 1, 219, 1, 55, 4, 65535, 
    1, 55, 1, 65535, 24, 55, 1, 219, 1, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 220, 
    21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 220, 21, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 17, 55, 1, 222, 8, 
    55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 222, 8, 55, 60, 65535, 1, 
    55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 
    17, 55, 1, 223, 8, 55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 223, 8, 
    55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 
    65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 19, 55, 1, 228, 6, 55, 4, 65535, 
    1, 55, 1, 65535, 19, 55, 1, 228, 6, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 13, 55, 1, 229, 
    12, 55, 4, 65535, 1, 55, 1, 65535, 13, 55, 1, 229, 12, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 1, 231, 25, 55, 4, 
    65535, 1, 55, 1, 65535, 1, 231, 25, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 
    55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 
    55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 
    65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 
    26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 13, 55, 1, 236, 12, 55, 4, 65535, 1, 55, 1, 65535, 
    13, 55, 1, 236, 12, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 237, 21, 55, 4, 
    65535, 1, 55, 1, 65535, 4, 55, 1, 237, 21, 55, 60, 65535, 1, 55, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 
    4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 
    1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 17, 55, 1, 240, 8, 
    55, 4, 65535, 1, 55, 1, 65535, 17, 55, 1, 240, 8, 55, 60, 65535, 1, 
    55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 2, 
    55, 1, 241, 23, 55, 4, 65535, 1, 55, 1, 65535, 2, 55, 1, 241, 23, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 1, 55, 1, 242, 24, 55, 4, 65535, 1, 55, 1, 65535, 1, 55, 1, 
    242, 24, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 
    65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 
    55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 
    8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 
    10, 55, 1, 21, 6, 65535, 15, 55, 1, 243, 10, 55, 4, 65535, 1, 55, 1, 
    65535, 15, 55, 1, 243, 10, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 3, 55, 1, 244, 22, 
    55, 4, 65535, 1, 55, 1, 65535, 3, 55, 1, 244, 22, 55, 60, 65535, 1, 
    55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 
    20, 55, 1, 245, 5, 55, 4, 65535, 1, 55, 1, 65535, 20, 55, 1, 245, 5, 
    55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(), array(), array(), array(1, 55, 1, 56, 1, 
    65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 
    55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 1, 248, 25, 55, 4, 65535, 1, 55, 1, 65535, 1, 248, 
    25, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 55, 1, 56, 1, 65535, 
    10, 55, 1, 21, 6, 65535, 19, 55, 1, 249, 6, 55, 4, 65535, 1, 55, 1, 
    65535, 19, 55, 1, 249, 6, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 
    65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 
    55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 
    65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    ), array(), array(), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 10, 55, 1, 250, 15, 55, 4, 65535, 1, 55, 1, 65535, 
    10, 55, 1, 250, 15, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 17, 55, 1, 251, 8, 55, 4, 
    65535, 1, 55, 1, 65535, 17, 55, 1, 251, 8, 55, 60, 65535, 1, 55, 8, 
    65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 12, 55, 1, 252, 13, 55, 4, 65535, 1, 55, 1, 65535, 12, 55, 
    1, 252, 13, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 19, 55, 1, 253, 6, 55, 4, 65535, 
    1, 55, 1, 65535, 19, 55, 1, 253, 6, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 55, 1, 254, 
    21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 254, 21, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 4, 
    55, 1, 255, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 255, 21, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 
    6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 2, 55, 1, 
    257, 23, 55, 4, 65535, 1, 55, 1, 65535, 2, 55, 1, 257, 23, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 
    21, 6, 65535, 11, 55, 1, 258, 14, 55, 4, 65535, 1, 55, 1, 65535, 11, 
    55, 1, 258, 14, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 
    55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 2, 55, 1, 259, 23, 55, 4, 65535, 
    1, 55, 1, 65535, 2, 55, 1, 259, 23, 55, 60, 65535, 1, 55, 8, 65535, 
    23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 
    65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 
    55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), 
    array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 
    1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 1, 261, 25, 55, 4, 65535, 
    1, 55, 1, 65535, 1, 261, 25, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 
    1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 
    2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 
    17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(
    1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 
    55, 1, 65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 
    1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 
    65535, 26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 
    1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 
    2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 
    55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 
    1, 65535, 10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 
    26, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 
    19, 55, 1, 266, 6, 55, 4, 65535, 1, 55, 1, 65535, 19, 55, 1, 266, 6, 
    55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 7, 
    55, 1, 268, 18, 55, 4, 65535, 1, 55, 1, 65535, 7, 55, 1, 268, 18, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array(), array(1, 55, 1, 56, 1, 65535, 10, 
    55, 1, 21, 6, 65535, 11, 55, 1, 269, 14, 55, 4, 65535, 1, 55, 1, 65535, 
    11, 55, 1, 269, 14, 55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 
    31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 
    65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 
    43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 55), array(), array(
    ), array(), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 
    65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 1, 55, 
    8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 7297, 
    55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 65535, 
    1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 526, 
    55), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 
    4, 55, 1, 271, 21, 55, 4, 65535, 1, 55, 1, 65535, 4, 55, 1, 271, 21, 
    55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(1, 55, 1, 56, 1, 65535, 10, 55, 
    1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 60, 65535, 
    1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 55, 1, 65535, 
    7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 288, 55, 2672, 
    65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 55, 32, 65535, 
    526, 55), array(), array(1, 55, 1, 56, 1, 65535, 10, 55, 1, 21, 6, 65535, 
    18, 55, 1, 273, 7, 55, 4, 65535, 1, 55, 1, 65535, 18, 55, 1, 273, 7, 
    55, 60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 
    646, 55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 
    65535, 288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 
    1232, 55, 32, 65535, 526, 55), array(), array(1, 55, 1, 56, 1, 65535, 
    10, 55, 1, 21, 6, 65535, 26, 55, 4, 65535, 1, 55, 1, 65535, 26, 55, 
    60, 65535, 1, 55, 8, 65535, 23, 55, 1, 65535, 31, 55, 1, 65535, 646, 
    55, 1, 65535, 7297, 55, 12, 65535, 2, 55, 49, 65535, 2, 55, 47, 65535, 
    288, 55, 2672, 65535, 1008, 55, 17, 65535, 43007, 55, 8448, 65535, 1232, 
    55, 32, 65535, 526, 55), array());

    $arr = array();
    $arr['eot'] = DFA::unpackRLE($eot);
    $arr['eof'] = DFA::unpackRLE($eof);
    $arr['min'] = DFA::unpackRLE($min, true);
    $arr['max'] = DFA::unpackRLE($max, true);
    $arr['accept'] = DFA::unpackRLE($accept);
    $arr['special'] = DFA::unpackRLE($special);


    $numStates = sizeof($transitionS);
    $arr['transition'] = array();
    for ($i=0; $i<$numStates; $i++) {
        $arr['transition'][$i] = DFA::unpackRLE($transitionS[$i]);
    }
    return $arr;
}
$Iri_DFA33 = Iri_DFA33_static();

class Iri_DFA33 extends DFA {

    public function __construct($recognizer) {
        global $Iri_DFA33;
        $DFA = $Iri_DFA33;
        $this->recognizer = $recognizer;
        $this->decisionNumber = 33;
        $this->eot = $DFA['eot'];
        $this->eof = $DFA['eof'];
        $this->min = $DFA['min'];
        $this->max = $DFA['max'];
        $this->accept = $DFA['accept'];
        $this->special = $DFA['special'];
        $this->transition = $DFA['transition'];
    }
    public function getDescription() {
        return "1:1: Tokens : ( IRI_REF | WS | BASE | PREFIX | SELECT | DISTINCT | REDUCED | CONSTRUCT | DESCRIBE | ASK | FROM | NAMED | WHERE | ORDER | BY | ASC | DESC | LIMIT | OFFSET | OPTIONAL | GRAPH | UNION | FILTER | A | STR | LANG | LANGMATCHES | DATATYPE | BOUND | SAMETERM | ISIRI | ISURI | ISBLANK | ISLITERAL | REGEX | TRUE | FALSE | PNAME_LN | PNAME_NS | SEMICOLON | DOT | PLUS | MINUS | ASTERISK | COMMA | NOT | DIVIDE | EQUAL | LESS | GREATER | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | VAR1 | VAR2 | STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | OPEN_BRACE | CLOSE_BRACE | REFERENCE | LESS_EQUAL | GREATER_EQUAL | NOT_EQUAL | AND | OR | BLANK_NODE_LABEL | LANGTAG | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | OPEN_SQUARE_BRACE | CLOSE_SQUARE_BRACE | COMMENT );";
    }
    public function specialStateTransition($s, IntStream $_input) {
        $input = $_input;
    	$_s = $s;
        switch ( $s ) {
                case 0 : 
                    $LA33_36 = $input->LA(1);

                    $s = -1;
                    if ( ($LA33_36==$this->getToken('39')) ) {$s = 96;}

                    else if ( (($LA33_36>=$this->getToken('0') && $LA33_36<=$this->getToken('9'))||($LA33_36>=$this->getToken('11') && $LA33_36<=$this->getToken('12'))||($LA33_36>=$this->getToken('14') && $LA33_36<=$this->getToken('38'))||($LA33_36>=$this->getToken('40') && $LA33_36<=$this->getToken('65535'))) ) {$s = 97;}

                    if ( $s>=0 ) return $s;
                    break;
                case 1 : 
                    $LA33_37 = $input->LA(1);

                    $s = -1;
                    if ( ($LA33_37==$this->getToken('34')) ) {$s = 98;}

                    else if ( (($LA33_37>=$this->getToken('0') && $LA33_37<=$this->getToken('9'))||($LA33_37>=$this->getToken('11') && $LA33_37<=$this->getToken('12'))||($LA33_37>=$this->getToken('14') && $LA33_37<=$this->getToken('33'))||($LA33_37>=$this->getToken('35') && $LA33_37<=$this->getToken('65535'))) ) {$s = 99;}

                    if ( $s>=0 ) return $s;
                    break;
        }
        $nvae =
            new NoViableAltException($this->getDescription(), 33, $_s, $input);
        $this->error($nvae);
        throw $nvae;        
    }
}
      

class Iri extends AntlrLexer {
    static $PREFIX=12;
    static $EXPONENT=83;
    static $CLOSE_SQUARE_BRACE=92;
    static $GRAPH=29;
    static $REGEX=43;
    static $PNAME_LN=48;
    static $CONSTRUCT=16;
    static $NOT=61;
    static $EOF=-1;
    static $VARNAME=55;
    static $ISLITERAL=42;
    static $GREATER=5;
    static $EOL=9;
    static $NOT_EQUAL=76;
    static $LESS=4;
    static $LANGMATCHES=35;
    static $DOUBLE=84;
    static $BASE=11;
    static $PN_CHARS_U=53;
    static $COMMENT=93;
    static $OPEN_CURLY_BRACE=6;
    static $SELECT=13;
    static $CLOSE_CURLY_BRACE=7;
    static $DOUBLE_POSITIVE=87;
    static $BOUND=37;
    static $DIVIDE=62;
    static $ISIRI=39;
    static $A=32;
    static $ASC=24;
    static $ASK=18;
    static $BLANK_NODE_LABEL=79;
    static $SEMICOLON=57;
    static $ISBLANK=41;
    static $WS=10;
    static $NAMED=20;
    static $INTEGER_POSITIVE=85;
    static $STRING_LITERAL2=68;
    static $OR=78;
    static $FILTER=31;
    static $DESCRIBE=17;
    static $STRING_LITERAL1=67;
    static $PN_CHARS=51;
    static $DATATYPE=36;
    static $LESS_EQUAL=74;
    static $DOUBLE_NEGATIVE=90;
    static $FROM=19;
    static $FALSE=45;
    static $DISTINCT=14;
    static $LANG=34;
    static $WHERE=21;
    static $IRI_REF=8;
    static $ORDER=22;
    static $LIMIT=26;
    static $AND=77;
    static $ASTERISK=59;
    static $ISURI=40;
    static $STR=33;
    static $SAMETERM=38;
    static $COMMA=60;
    static $OFFSET=27;
    static $EQUAL=63;
    static $DECIMAL_POSITIVE=86;
    static $PLUS=58;
    static $DIGIT=54;
    static $DOT=52;
    static $INTEGER=81;
    static $BY=23;
    static $REDUCED=15;
    static $INTEGER_NEGATIVE=88;
    static $PN_LOCAL=47;
    static $PNAME_NS=46;
    static $REFERENCE=73;
    static $CLOSE_BRACE=72;
    static $MINUS=56;
    static $TRUE=44;
    static $UNION=30;
    static $OPEN_SQUARE_BRACE=91;
    static $ECHAR=66;
    static $OPTIONAL=28;
    static $PN_CHARS_BASE=50;
    static $STRING_LITERAL_LONG2=70;
    static $DECIMAL=82;
    static $VAR1=64;
    static $VAR2=65;
    static $STRING_LITERAL_LONG1=69;
    static $DECIMAL_NEGATIVE=89;
    static $PN_PREFIX=49;
    static $DESC=25;
    static $OPEN_BRACE=71;
    static $GREATER_EQUAL=75;
    static $LANGTAG=80;

    // delegates
    // delegators

    function __construct($input, $state=null){
        parent::__construct($input,$state);

        
            $this->dfa29 = new Iri_DFA29($this);
            $this->dfa33 = new Iri_DFA33($this);
    }
    function getGrammarFileName() { return "Iri.g"; }

    // $ANTLR start "IRI_REF"
    function mIRI_REF(){
        try {
            $_type = Iri::$IRI_REF;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:8:5: ( LESS ( options {greedy=false; } : ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* GREATER ) 
            // Iri.g:8:7: LESS ( options {greedy=false; } : ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* GREATER 
            {
            $this->mLESS(); 
            // Iri.g:8:12: ( options {greedy=false; } : ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* 
            //loop1:
            do {
                $alt1=2;
                $LA1_0 = $this->input->LA(1);

                if ( ($LA1_0==$this->getToken('33')||($LA1_0>=$this->getToken('35') && $LA1_0<=$this->getToken('59'))||$LA1_0==$this->getToken('61')||($LA1_0>=$this->getToken('63') && $LA1_0<=$this->getToken('91'))||$LA1_0==$this->getToken('93')||$LA1_0==$this->getToken('95')||($LA1_0>=$this->getToken('97') && $LA1_0<=$this->getToken('122'))||($LA1_0>=$this->getToken('126') && $LA1_0<=$this->getToken('65535'))) ) {
                    $alt1=1;
                }
                else if ( ($LA1_0==$this->getToken('62')) ) {
                    $alt1=2;
                }


                switch ($alt1) {
            	case 1 :
            	    // Iri.g:8:40: ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) 
            	    {
            	    if ( $this->input->LA(1)==$this->getToken('33')||($this->input->LA(1)>=$this->getToken('35') && $this->input->LA(1)<=$this->getToken('59'))||$this->input->LA(1)==$this->getToken('61')||($this->input->LA(1)>=$this->getToken('63') && $this->input->LA(1)<=$this->getToken('91'))||$this->input->LA(1)==$this->getToken('93')||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('126') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;

            	default :
            	    break 2;//loop1;
                }
            } while (true);

            $this->mGREATER(); 
              $this->setText(substr($this->getText(), 1, strlen($this->getText()) - 2)); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "IRI_REF"

    // $ANTLR start "WS"
    function mWS(){
        try {
            $_type = Iri::$WS;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:12:5: ( ( ' ' | '\\t' | EOL )+ ) 
            // Iri.g:12:7: ( ' ' | '\\t' | EOL )+ 
            {
            // Iri.g:12:7: ( ' ' | '\\t' | EOL )+ 
            $cnt2=0;
            //loop2:
            do {
                $alt2=2;
                $LA2_0 = $this->input->LA(1);

                if ( (($LA2_0>=$this->getToken('9') && $LA2_0<=$this->getToken('10'))||$LA2_0==$this->getToken('13')||$LA2_0==$this->getToken('32')) ) {
                    $alt2=1;
                }


                switch ($alt2) {
            	case 1 :
            	    // Iri.g: 
            	    {
            	    if ( ($this->input->LA(1)>=$this->getToken('9') && $this->input->LA(1)<=$this->getToken('10'))||$this->input->LA(1)==$this->getToken('13')||$this->input->LA(1)==$this->getToken('32') ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;

            	default :
            	    if ( $cnt2 >= 1 ) break 2;//loop2;
                        $eee =
                            new EarlyExitException(2, $this->input);
                        throw $eee;
                }
                $cnt2++;
            } while (true);

               $_channel=HIDDEN; 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "WS"

    // $ANTLR start "EOL"
    function mEOL(){
        try {
            // Iri.g:17:5: ( '\\n' | '\\r' ) 
            // Iri.g: 
            {
            if ( $this->input->LA(1)==$this->getToken('10')||$this->input->LA(1)==$this->getToken('13') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "EOL"

    // $ANTLR start "BASE"
    function mBASE(){
        try {
            $_type = Iri::$BASE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:21:5: ( ( 'B' | 'b' ) ( 'A' | 'a' ) ( 'S' | 's' ) ( 'E' | 'e' ) ) 
            // Iri.g:21:7: ( 'B' | 'b' ) ( 'A' | 'a' ) ( 'S' | 's' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('66')||$this->input->LA(1)==$this->getToken('98') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BASE"

    // $ANTLR start "PREFIX"
    function mPREFIX(){
        try {
            $_type = Iri::$PREFIX;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:25:5: ( ( 'P' | 'p' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'F' | 'f' ) ( 'I' | 'i' ) ( 'X' | 'x' ) ) 
            // Iri.g:25:7: ( 'P' | 'p' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'F' | 'f' ) ( 'I' | 'i' ) ( 'X' | 'x' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('80')||$this->input->LA(1)==$this->getToken('112') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('88')||$this->input->LA(1)==$this->getToken('120') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PREFIX"

    // $ANTLR start "SELECT"
    function mSELECT(){
        try {
            $_type = Iri::$SELECT;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:29:5: ( ( 'S' | 's' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'C' | 'c' ) ( 'T' | 't' ) ) 
            // Iri.g:29:7: ( 'S' | 's' ) ( 'E' | 'e' ) ( 'L' | 'l' ) ( 'E' | 'e' ) ( 'C' | 'c' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SELECT"

    // $ANTLR start "DISTINCT"
    function mDISTINCT(){
        try {
            $_type = Iri::$DISTINCT;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:33:5: ( ( 'D' | 'd' ) ( 'I' | 'i' ) ( 'S' | 's' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'C' | 'c' ) ( 'T' | 't' ) ) 
            // Iri.g:33:7: ( 'D' | 'd' ) ( 'I' | 'i' ) ( 'S' | 's' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'N' | 'n' ) ( 'C' | 'c' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DISTINCT"

    // $ANTLR start "REDUCED"
    function mREDUCED(){
        try {
            $_type = Iri::$REDUCED;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:37:5: ( ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ( 'U' | 'u' ) ( 'C' | 'c' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ) 
            // Iri.g:37:7: ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ( 'U' | 'u' ) ( 'C' | 'c' ) ( 'E' | 'e' ) ( 'D' | 'd' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "REDUCED"

    // $ANTLR start "CONSTRUCT"
    function mCONSTRUCT(){
        try {
            $_type = Iri::$CONSTRUCT;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:41:5: ( ( 'C' | 'c' ) ( 'O' | 'o' ) ( 'N' | 'n' ) ( 'S' | 's' ) ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'C' | 'c' ) ( 'T' | 't' ) ) 
            // Iri.g:41:7: ( 'C' | 'c' ) ( 'O' | 'o' ) ( 'N' | 'n' ) ( 'S' | 's' ) ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'C' | 'c' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CONSTRUCT"

    // $ANTLR start "DESCRIBE"
    function mDESCRIBE(){
        try {
            $_type = Iri::$DESCRIBE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:45:5: ( ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'C' | 'c' ) ( 'R' | 'r' ) ( 'I' | 'i' ) ( 'B' | 'b' ) ( 'E' | 'e' ) ) 
            // Iri.g:45:7: ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'C' | 'c' ) ( 'R' | 'r' ) ( 'I' | 'i' ) ( 'B' | 'b' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('66')||$this->input->LA(1)==$this->getToken('98') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DESCRIBE"

    // $ANTLR start "ASK"
    function mASK(){
        try {
            $_type = Iri::$ASK;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:49:5: ( ( 'A' | 'a' ) ( 'S' | 's' ) ( 'K' | 'k' ) ) 
            // Iri.g:49:7: ( 'A' | 'a' ) ( 'S' | 's' ) ( 'K' | 'k' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('75')||$this->input->LA(1)==$this->getToken('107') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ASK"

    // $ANTLR start "FROM"
    function mFROM(){
        try {
            $_type = Iri::$FROM;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:53:5: ( ( 'F' | 'f' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'M' | 'm' ) ) 
            // Iri.g:53:7: ( 'F' | 'f' ) ( 'R' | 'r' ) ( 'O' | 'o' ) ( 'M' | 'm' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "FROM"

    // $ANTLR start "NAMED"
    function mNAMED(){
        try {
            $_type = Iri::$NAMED;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:57:5: ( ( 'N' | 'n' ) ( 'A' | 'a' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'D' | 'd' ) ) 
            // Iri.g:57:7: ( 'N' | 'n' ) ( 'A' | 'a' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'D' | 'd' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NAMED"

    // $ANTLR start "WHERE"
    function mWHERE(){
        try {
            $_type = Iri::$WHERE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:61:5: ( ( 'W' | 'w' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ) 
            // Iri.g:61:7: ( 'W' | 'w' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('87')||$this->input->LA(1)==$this->getToken('119') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('72')||$this->input->LA(1)==$this->getToken('104') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "WHERE"

    // $ANTLR start "ORDER"
    function mORDER(){
        try {
            $_type = Iri::$ORDER;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:65:5: ( ( 'O' | 'o' ) ( 'R' | 'r' ) ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ) 
            // Iri.g:65:7: ( 'O' | 'o' ) ( 'R' | 'r' ) ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'R' | 'r' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ORDER"

    // $ANTLR start "BY"
    function mBY(){
        try {
            $_type = Iri::$BY;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:69:5: ( ( 'B' | 'b' ) ( 'Y' | 'y' ) ) 
            // Iri.g:69:7: ( 'B' | 'b' ) ( 'Y' | 'y' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('66')||$this->input->LA(1)==$this->getToken('98') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('89')||$this->input->LA(1)==$this->getToken('121') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BY"

    // $ANTLR start "ASC"
    function mASC(){
        try {
            $_type = Iri::$ASC;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:73:5: ( ( 'A' | 'a' ) ( 'S' | 's' ) ( 'C' | 'c' ) ) 
            // Iri.g:73:7: ( 'A' | 'a' ) ( 'S' | 's' ) ( 'C' | 'c' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ASC"

    // $ANTLR start "DESC"
    function mDESC(){
        try {
            $_type = Iri::$DESC;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:77:5: ( ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'C' | 'c' ) ) 
            // Iri.g:77:7: ( 'D' | 'd' ) ( 'E' | 'e' ) ( 'S' | 's' ) ( 'C' | 'c' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DESC"

    // $ANTLR start "LIMIT"
    function mLIMIT(){
        try {
            $_type = Iri::$LIMIT;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:81:5: ( ( 'L' | 'l' ) ( 'I' | 'i' ) ( 'M' | 'm' ) ( 'I' | 'i' ) ( 'T' | 't' ) ) 
            // Iri.g:81:7: ( 'L' | 'l' ) ( 'I' | 'i' ) ( 'M' | 'm' ) ( 'I' | 'i' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LIMIT"

    // $ANTLR start "OFFSET"
    function mOFFSET(){
        try {
            $_type = Iri::$OFFSET;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:85:5: ( ( 'O' | 'o' ) ( 'F' | 'f' ) ( 'F' | 'f' ) ( 'S' | 's' ) ( 'E' | 'e' ) ( 'T' | 't' ) ) 
            // Iri.g:85:7: ( 'O' | 'o' ) ( 'F' | 'f' ) ( 'F' | 'f' ) ( 'S' | 's' ) ( 'E' | 'e' ) ( 'T' | 't' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OFFSET"

    // $ANTLR start "OPTIONAL"
    function mOPTIONAL(){
        try {
            $_type = Iri::$OPTIONAL;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:89:5: ( ( 'O' | 'o' ) ( 'P' | 'p' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ) 
            // Iri.g:89:7: ( 'O' | 'o' ) ( 'P' | 'p' ) ( 'T' | 't' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) ( 'A' | 'a' ) ( 'L' | 'l' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('80')||$this->input->LA(1)==$this->getToken('112') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPTIONAL"

    // $ANTLR start "GRAPH"
    function mGRAPH(){
        try {
            $_type = Iri::$GRAPH;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:93:5: ( ( 'G' | 'g' ) ( 'R' | 'r' ) ( 'A' | 'a' ) ( 'P' | 'p' ) ( 'H' | 'h' ) ) 
            // Iri.g:93:7: ( 'G' | 'g' ) ( 'R' | 'r' ) ( 'A' | 'a' ) ( 'P' | 'p' ) ( 'H' | 'h' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('80')||$this->input->LA(1)==$this->getToken('112') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('72')||$this->input->LA(1)==$this->getToken('104') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GRAPH"

    // $ANTLR start "UNION"
    function mUNION(){
        try {
            $_type = Iri::$UNION;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:97:5: ( ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) ) 
            // Iri.g:97:7: ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'I' | 'i' ) ( 'O' | 'o' ) ( 'N' | 'n' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "UNION"

    // $ANTLR start "FILTER"
    function mFILTER(){
        try {
            $_type = Iri::$FILTER;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:101:5: ( ( 'F' | 'f' ) ( 'I' | 'i' ) ( 'L' | 'l' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ) 
            // Iri.g:101:7: ( 'F' | 'f' ) ( 'I' | 'i' ) ( 'L' | 'l' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "FILTER"

    // $ANTLR start "A"
    function mA(){
        try {
            $_type = Iri::$A;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:105:5: ( ( 'a' ) ) 
            // Iri.g:105:7: ( 'a' ) 
            {
            // Iri.g:105:7: ( 'a' ) 
            // Iri.g:105:8: 'a' 
            {
            $this->matchChar(97); 

            }


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "A"

    // $ANTLR start "STR"
    function mSTR(){
        try {
            $_type = Iri::$STR;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:109:5: ( ( 'S' | 's' ) ( 'T' | 't' ) ( 'R' | 'r' ) ) 
            // Iri.g:109:7: ( 'S' | 's' ) ( 'T' | 't' ) ( 'R' | 'r' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STR"

    // $ANTLR start "LANG"
    function mLANG(){
        try {
            $_type = Iri::$LANG;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:113:5: ( ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'G' | 'g' ) ) 
            // Iri.g:113:7: ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'G' | 'g' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LANG"

    // $ANTLR start "LANGMATCHES"
    function mLANGMATCHES(){
        try {
            $_type = Iri::$LANGMATCHES;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:117:5: ( ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'G' | 'g' ) ( 'M' | 'm' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'C' | 'c' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'S' | 's' ) ) 
            // Iri.g:117:7: ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'G' | 'g' ) ( 'M' | 'm' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'C' | 'c' ) ( 'H' | 'h' ) ( 'E' | 'e' ) ( 'S' | 's' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('67')||$this->input->LA(1)==$this->getToken('99') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('72')||$this->input->LA(1)==$this->getToken('104') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LANGMATCHES"

    // $ANTLR start "DATATYPE"
    function mDATATYPE(){
        try {
            $_type = Iri::$DATATYPE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:121:5: ( ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'Y' | 'y' ) ( 'P' | 'p' ) ( 'E' | 'e' ) ) 
            // Iri.g:121:7: ( 'D' | 'd' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'A' | 'a' ) ( 'T' | 't' ) ( 'Y' | 'y' ) ( 'P' | 'p' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('89')||$this->input->LA(1)==$this->getToken('121') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('80')||$this->input->LA(1)==$this->getToken('112') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DATATYPE"

    // $ANTLR start "BOUND"
    function mBOUND(){
        try {
            $_type = Iri::$BOUND;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:125:5: ( ( 'B' | 'b' ) ( 'O' | 'o' ) ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'D' | 'd' ) ) 
            // Iri.g:125:7: ( 'B' | 'b' ) ( 'O' | 'o' ) ( 'U' | 'u' ) ( 'N' | 'n' ) ( 'D' | 'd' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('66')||$this->input->LA(1)==$this->getToken('98') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('79')||$this->input->LA(1)==$this->getToken('111') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('68')||$this->input->LA(1)==$this->getToken('100') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BOUND"

    // $ANTLR start "SAMETERM"
    function mSAMETERM(){
        try {
            $_type = Iri::$SAMETERM;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:129:5: ( ( 'S' | 's' ) ( 'A' | 'a' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'M' | 'm' ) ) 
            // Iri.g:129:7: ( 'S' | 's' ) ( 'A' | 'a' ) ( 'M' | 'm' ) ( 'E' | 'e' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'M' | 'm' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('77')||$this->input->LA(1)==$this->getToken('109') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SAMETERM"

    // $ANTLR start "ISIRI"
    function mISIRI(){
        try {
            $_type = Iri::$ISIRI;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:133:5: ( ( 'I' | 'i' ) ( 'S' | 's' ) ( 'I' | 'i' ) ( 'R' | 'r' ) ( 'I' | 'i' ) ) 
            // Iri.g:133:7: ( 'I' | 'i' ) ( 'S' | 's' ) ( 'I' | 'i' ) ( 'R' | 'r' ) ( 'I' | 'i' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISIRI"

    // $ANTLR start "ISURI"
    function mISURI(){
        try {
            $_type = Iri::$ISURI;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:137:5: ( ( 'I' | 'i' ) ( 'S' | 's' ) ( 'U' | 'u' ) ( 'R' | 'r' ) ( 'I' | 'i' ) ) 
            // Iri.g:137:7: ( 'I' | 'i' ) ( 'S' | 's' ) ( 'U' | 'u' ) ( 'R' | 'r' ) ( 'I' | 'i' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISURI"

    // $ANTLR start "ISBLANK"
    function mISBLANK(){
        try {
            $_type = Iri::$ISBLANK;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:141:5: ( ( 'I' | 'i' ) ( 'S' | 's' ) ( 'B' | 'b' ) ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'K' | 'k' ) ) 
            // Iri.g:141:7: ( 'I' | 'i' ) ( 'S' | 's' ) ( 'B' | 'b' ) ( 'L' | 'l' ) ( 'A' | 'a' ) ( 'N' | 'n' ) ( 'K' | 'k' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('66')||$this->input->LA(1)==$this->getToken('98') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('78')||$this->input->LA(1)==$this->getToken('110') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('75')||$this->input->LA(1)==$this->getToken('107') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISBLANK"

    // $ANTLR start "ISLITERAL"
    function mISLITERAL(){
        try {
            $_type = Iri::$ISLITERAL;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:145:5: ( ( 'I' | 'i' ) ( 'S' | 's' ) ( 'L' | 'l' ) ( 'I' | 'i' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ) 
            // Iri.g:145:7: ( 'I' | 'i' ) ( 'S' | 's' ) ( 'L' | 'l' ) ( 'I' | 'i' ) ( 'T' | 't' ) ( 'E' | 'e' ) ( 'R' | 'r' ) ( 'A' | 'a' ) ( 'L' | 'l' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('73')||$this->input->LA(1)==$this->getToken('105') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ISLITERAL"

    // $ANTLR start "REGEX"
    function mREGEX(){
        try {
            $_type = Iri::$REGEX;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:149:5: ( ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'G' | 'g' ) ( 'E' | 'e' ) ( 'X' | 'x' ) ) 
            // Iri.g:149:7: ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'G' | 'g' ) ( 'E' | 'e' ) ( 'X' | 'x' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('71')||$this->input->LA(1)==$this->getToken('103') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('88')||$this->input->LA(1)==$this->getToken('120') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "REGEX"

    // $ANTLR start "TRUE"
    function mTRUE(){
        try {
            $_type = Iri::$TRUE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:153:5: ( ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'E' | 'e' ) ) 
            // Iri.g:153:7: ( 'T' | 't' ) ( 'R' | 'r' ) ( 'U' | 'u' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('84')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('82')||$this->input->LA(1)==$this->getToken('114') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('85')||$this->input->LA(1)==$this->getToken('117') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "TRUE"

    // $ANTLR start "FALSE"
    function mFALSE(){
        try {
            $_type = Iri::$FALSE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:157:5: ( ( 'F' | 'f' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' ) ) 
            // Iri.g:157:7: ( 'F' | 'f' ) ( 'A' | 'a' ) ( 'L' | 'l' ) ( 'S' | 's' ) ( 'E' | 'e' ) 
            {
            if ( $this->input->LA(1)==$this->getToken('70')||$this->input->LA(1)==$this->getToken('102') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('65')||$this->input->LA(1)==$this->getToken('97') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('76')||$this->input->LA(1)==$this->getToken('108') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('83')||$this->input->LA(1)==$this->getToken('115') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "FALSE"

    // $ANTLR start "PNAME_LN"
    function mPNAME_LN(){
        try {
            $_type = Iri::$PNAME_LN;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:161:5: ( PNAME_NS PN_LOCAL ) 
            // Iri.g:161:7: PNAME_NS PN_LOCAL 
            {
            $this->mPNAME_NS(); 
            $this->mPN_LOCAL(); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PNAME_LN"

    // $ANTLR start "PNAME_NS"
    function mPNAME_NS(){
        try {
            $_type = Iri::$PNAME_NS;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            $p=null;

            // Iri.g:165:5: ( (p= PN_PREFIX )? ':' ) 
            // Iri.g:165:7: (p= PN_PREFIX )? ':' 
            {
            // Iri.g:165:8: (p= PN_PREFIX )? 
            $alt3=2;
            $LA3_0 = $this->input->LA(1);

            if ( (($LA3_0>=$this->getToken('65') && $LA3_0<=$this->getToken('90'))||($LA3_0>=$this->getToken('97') && $LA3_0<=$this->getToken('122'))||($LA3_0>=$this->getToken('192') && $LA3_0<=$this->getToken('214'))||($LA3_0>=$this->getToken('216') && $LA3_0<=$this->getToken('246'))||($LA3_0>=$this->getToken('248') && $LA3_0<=$this->getToken('767'))||($LA3_0>=$this->getToken('880') && $LA3_0<=$this->getToken('893'))||($LA3_0>=$this->getToken('895') && $LA3_0<=$this->getToken('8191'))||($LA3_0>=$this->getToken('8204') && $LA3_0<=$this->getToken('8205'))||($LA3_0>=$this->getToken('8304') && $LA3_0<=$this->getToken('8591'))||($LA3_0>=$this->getToken('11264') && $LA3_0<=$this->getToken('12271'))||($LA3_0>=$this->getToken('12289') && $LA3_0<=$this->getToken('55295'))||($LA3_0>=$this->getToken('63744') && $LA3_0<=$this->getToken('64975'))||($LA3_0>=$this->getToken('65008') && $LA3_0<=$this->getToken('65533'))) ) {
                $alt3=1;
            }
            switch ($alt3) {
                case 1 :
                    // Iri.g:165:8: p= PN_PREFIX 
                    {
                    $pStart1719 = $this->getCharIndex();
                    $this->mPN_PREFIX(); 
                    $p = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $pStart1719, $this->getCharIndex()-1);

                    }
                    break;

            }

            $this->matchChar(58); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PNAME_NS"

    // $ANTLR start "PN_PREFIX"
    function mPN_PREFIX(){
        try {
            // Iri.g:170:5: ( PN_CHARS_BASE ( ( PN_CHARS | DOT )* PN_CHARS )? ) 
            // Iri.g:170:7: PN_CHARS_BASE ( ( PN_CHARS | DOT )* PN_CHARS )? 
            {
            $this->mPN_CHARS_BASE(); 
            // Iri.g:170:21: ( ( PN_CHARS | DOT )* PN_CHARS )? 
            $alt5=2;
            $LA5_0 = $this->input->LA(1);

            if ( (($LA5_0>=$this->getToken('45') && $LA5_0<=$this->getToken('46'))||($LA5_0>=$this->getToken('48') && $LA5_0<=$this->getToken('57'))||($LA5_0>=$this->getToken('65') && $LA5_0<=$this->getToken('90'))||$LA5_0==$this->getToken('95')||($LA5_0>=$this->getToken('97') && $LA5_0<=$this->getToken('122'))||$LA5_0==$this->getToken('183')||($LA5_0>=$this->getToken('192') && $LA5_0<=$this->getToken('214'))||($LA5_0>=$this->getToken('216') && $LA5_0<=$this->getToken('246'))||($LA5_0>=$this->getToken('248') && $LA5_0<=$this->getToken('893'))||($LA5_0>=$this->getToken('895') && $LA5_0<=$this->getToken('8191'))||($LA5_0>=$this->getToken('8204') && $LA5_0<=$this->getToken('8205'))||($LA5_0>=$this->getToken('8255') && $LA5_0<=$this->getToken('8256'))||($LA5_0>=$this->getToken('8304') && $LA5_0<=$this->getToken('8591'))||($LA5_0>=$this->getToken('11264') && $LA5_0<=$this->getToken('12271'))||($LA5_0>=$this->getToken('12289') && $LA5_0<=$this->getToken('55295'))||($LA5_0>=$this->getToken('63744') && $LA5_0<=$this->getToken('64975'))||($LA5_0>=$this->getToken('65008') && $LA5_0<=$this->getToken('65533'))) ) {
                $alt5=1;
            }
            switch ($alt5) {
                case 1 :
                    // Iri.g:170:22: ( PN_CHARS | DOT )* PN_CHARS 
                    {
                    // Iri.g:170:22: ( PN_CHARS | DOT )* 
                    //loop4:
                    do {
                        $alt4=2;
                        $LA4_0 = $this->input->LA(1);

                        if ( ($LA4_0==$this->getToken('45')||($LA4_0>=$this->getToken('48') && $LA4_0<=$this->getToken('57'))||($LA4_0>=$this->getToken('65') && $LA4_0<=$this->getToken('90'))||$LA4_0==$this->getToken('95')||($LA4_0>=$this->getToken('97') && $LA4_0<=$this->getToken('122'))||$LA4_0==$this->getToken('183')||($LA4_0>=$this->getToken('192') && $LA4_0<=$this->getToken('214'))||($LA4_0>=$this->getToken('216') && $LA4_0<=$this->getToken('246'))||($LA4_0>=$this->getToken('248') && $LA4_0<=$this->getToken('893'))||($LA4_0>=$this->getToken('895') && $LA4_0<=$this->getToken('8191'))||($LA4_0>=$this->getToken('8204') && $LA4_0<=$this->getToken('8205'))||($LA4_0>=$this->getToken('8255') && $LA4_0<=$this->getToken('8256'))||($LA4_0>=$this->getToken('8304') && $LA4_0<=$this->getToken('8591'))||($LA4_0>=$this->getToken('11264') && $LA4_0<=$this->getToken('12271'))||($LA4_0>=$this->getToken('12289') && $LA4_0<=$this->getToken('55295'))||($LA4_0>=$this->getToken('63744') && $LA4_0<=$this->getToken('64975'))||($LA4_0>=$this->getToken('65008') && $LA4_0<=$this->getToken('65533'))) ) {
                            $LA4_1 = $this->input->LA(2);

                            if ( (($LA4_1>=$this->getToken('45') && $LA4_1<=$this->getToken('46'))||($LA4_1>=$this->getToken('48') && $LA4_1<=$this->getToken('57'))||($LA4_1>=$this->getToken('65') && $LA4_1<=$this->getToken('90'))||$LA4_1==$this->getToken('95')||($LA4_1>=$this->getToken('97') && $LA4_1<=$this->getToken('122'))||$LA4_1==$this->getToken('183')||($LA4_1>=$this->getToken('192') && $LA4_1<=$this->getToken('214'))||($LA4_1>=$this->getToken('216') && $LA4_1<=$this->getToken('246'))||($LA4_1>=$this->getToken('248') && $LA4_1<=$this->getToken('893'))||($LA4_1>=$this->getToken('895') && $LA4_1<=$this->getToken('8191'))||($LA4_1>=$this->getToken('8204') && $LA4_1<=$this->getToken('8205'))||($LA4_1>=$this->getToken('8255') && $LA4_1<=$this->getToken('8256'))||($LA4_1>=$this->getToken('8304') && $LA4_1<=$this->getToken('8591'))||($LA4_1>=$this->getToken('11264') && $LA4_1<=$this->getToken('12271'))||($LA4_1>=$this->getToken('12289') && $LA4_1<=$this->getToken('55295'))||($LA4_1>=$this->getToken('63744') && $LA4_1<=$this->getToken('64975'))||($LA4_1>=$this->getToken('65008') && $LA4_1<=$this->getToken('65533'))) ) {
                                $alt4=1;
                            }


                        }
                        else if ( ($LA4_0==$this->getToken('46')) ) {
                            $alt4=1;
                        }


                        switch ($alt4) {
                    	case 1 :
                    	    // Iri.g: 
                    	    {
                    	    if ( ($this->input->LA(1)>=$this->getToken('45') && $this->input->LA(1)<=$this->getToken('46'))||($this->input->LA(1)>=$this->getToken('48') && $this->input->LA(1)<=$this->getToken('57'))||($this->input->LA(1)>=$this->getToken('65') && $this->input->LA(1)<=$this->getToken('90'))||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||$this->input->LA(1)==$this->getToken('183')||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8255') && $this->input->LA(1)<=$this->getToken('8256'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                    	        $this->input->consume();

                    	    }
                    	    else {
                    	        $mse = new MismatchedSetException(null,$this->input);
                    	        $this->recover($mse);
                    	        throw $mse;}


                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop4;
                        }
                    } while (true);

                    $this->mPN_CHARS(); 

                    }
                    break;

            }


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_PREFIX"

    // $ANTLR start "PN_LOCAL"
    function mPN_LOCAL(){
        try {
            // Iri.g:175:5: ( ( PN_CHARS_U | DIGIT ) ( ( PN_CHARS | DOT )* PN_CHARS )? ) 
            // Iri.g:175:7: ( PN_CHARS_U | DIGIT ) ( ( PN_CHARS | DOT )* PN_CHARS )? 
            {
            if ( ($this->input->LA(1)>=$this->getToken('48') && $this->input->LA(1)<=$this->getToken('57'))||($this->input->LA(1)>=$this->getToken('65') && $this->input->LA(1)<=$this->getToken('90'))||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('767'))||($this->input->LA(1)>=$this->getToken('880') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            // Iri.g:175:30: ( ( PN_CHARS | DOT )* PN_CHARS )? 
            $alt7=2;
            $LA7_0 = $this->input->LA(1);

            if ( (($LA7_0>=$this->getToken('45') && $LA7_0<=$this->getToken('46'))||($LA7_0>=$this->getToken('48') && $LA7_0<=$this->getToken('57'))||($LA7_0>=$this->getToken('65') && $LA7_0<=$this->getToken('90'))||$LA7_0==$this->getToken('95')||($LA7_0>=$this->getToken('97') && $LA7_0<=$this->getToken('122'))||$LA7_0==$this->getToken('183')||($LA7_0>=$this->getToken('192') && $LA7_0<=$this->getToken('214'))||($LA7_0>=$this->getToken('216') && $LA7_0<=$this->getToken('246'))||($LA7_0>=$this->getToken('248') && $LA7_0<=$this->getToken('893'))||($LA7_0>=$this->getToken('895') && $LA7_0<=$this->getToken('8191'))||($LA7_0>=$this->getToken('8204') && $LA7_0<=$this->getToken('8205'))||($LA7_0>=$this->getToken('8255') && $LA7_0<=$this->getToken('8256'))||($LA7_0>=$this->getToken('8304') && $LA7_0<=$this->getToken('8591'))||($LA7_0>=$this->getToken('11264') && $LA7_0<=$this->getToken('12271'))||($LA7_0>=$this->getToken('12289') && $LA7_0<=$this->getToken('55295'))||($LA7_0>=$this->getToken('63744') && $LA7_0<=$this->getToken('64975'))||($LA7_0>=$this->getToken('65008') && $LA7_0<=$this->getToken('65533'))) ) {
                $alt7=1;
            }
            switch ($alt7) {
                case 1 :
                    // Iri.g:175:31: ( PN_CHARS | DOT )* PN_CHARS 
                    {
                    // Iri.g:175:31: ( PN_CHARS | DOT )* 
                    //loop6:
                    do {
                        $alt6=2;
                        $LA6_0 = $this->input->LA(1);

                        if ( ($LA6_0==$this->getToken('45')||($LA6_0>=$this->getToken('48') && $LA6_0<=$this->getToken('57'))||($LA6_0>=$this->getToken('65') && $LA6_0<=$this->getToken('90'))||$LA6_0==$this->getToken('95')||($LA6_0>=$this->getToken('97') && $LA6_0<=$this->getToken('122'))||$LA6_0==$this->getToken('183')||($LA6_0>=$this->getToken('192') && $LA6_0<=$this->getToken('214'))||($LA6_0>=$this->getToken('216') && $LA6_0<=$this->getToken('246'))||($LA6_0>=$this->getToken('248') && $LA6_0<=$this->getToken('893'))||($LA6_0>=$this->getToken('895') && $LA6_0<=$this->getToken('8191'))||($LA6_0>=$this->getToken('8204') && $LA6_0<=$this->getToken('8205'))||($LA6_0>=$this->getToken('8255') && $LA6_0<=$this->getToken('8256'))||($LA6_0>=$this->getToken('8304') && $LA6_0<=$this->getToken('8591'))||($LA6_0>=$this->getToken('11264') && $LA6_0<=$this->getToken('12271'))||($LA6_0>=$this->getToken('12289') && $LA6_0<=$this->getToken('55295'))||($LA6_0>=$this->getToken('63744') && $LA6_0<=$this->getToken('64975'))||($LA6_0>=$this->getToken('65008') && $LA6_0<=$this->getToken('65533'))) ) {
                            $LA6_1 = $this->input->LA(2);

                            if ( (($LA6_1>=$this->getToken('45') && $LA6_1<=$this->getToken('46'))||($LA6_1>=$this->getToken('48') && $LA6_1<=$this->getToken('57'))||($LA6_1>=$this->getToken('65') && $LA6_1<=$this->getToken('90'))||$LA6_1==$this->getToken('95')||($LA6_1>=$this->getToken('97') && $LA6_1<=$this->getToken('122'))||$LA6_1==$this->getToken('183')||($LA6_1>=$this->getToken('192') && $LA6_1<=$this->getToken('214'))||($LA6_1>=$this->getToken('216') && $LA6_1<=$this->getToken('246'))||($LA6_1>=$this->getToken('248') && $LA6_1<=$this->getToken('893'))||($LA6_1>=$this->getToken('895') && $LA6_1<=$this->getToken('8191'))||($LA6_1>=$this->getToken('8204') && $LA6_1<=$this->getToken('8205'))||($LA6_1>=$this->getToken('8255') && $LA6_1<=$this->getToken('8256'))||($LA6_1>=$this->getToken('8304') && $LA6_1<=$this->getToken('8591'))||($LA6_1>=$this->getToken('11264') && $LA6_1<=$this->getToken('12271'))||($LA6_1>=$this->getToken('12289') && $LA6_1<=$this->getToken('55295'))||($LA6_1>=$this->getToken('63744') && $LA6_1<=$this->getToken('64975'))||($LA6_1>=$this->getToken('65008') && $LA6_1<=$this->getToken('65533'))) ) {
                                $alt6=1;
                            }


                        }
                        else if ( ($LA6_0==$this->getToken('46')) ) {
                            $alt6=1;
                        }


                        switch ($alt6) {
                    	case 1 :
                    	    // Iri.g: 
                    	    {
                    	    if ( ($this->input->LA(1)>=$this->getToken('45') && $this->input->LA(1)<=$this->getToken('46'))||($this->input->LA(1)>=$this->getToken('48') && $this->input->LA(1)<=$this->getToken('57'))||($this->input->LA(1)>=$this->getToken('65') && $this->input->LA(1)<=$this->getToken('90'))||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||$this->input->LA(1)==$this->getToken('183')||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8255') && $this->input->LA(1)<=$this->getToken('8256'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                    	        $this->input->consume();

                    	    }
                    	    else {
                    	        $mse = new MismatchedSetException(null,$this->input);
                    	        $this->recover($mse);
                    	        throw $mse;}


                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop6;
                        }
                    } while (true);

                    $this->mPN_CHARS(); 

                    }
                    break;

            }


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_LOCAL"

    // $ANTLR start "PN_CHARS_BASE"
    function mPN_CHARS_BASE(){
        try {
            // Iri.g:180:5: ( 'A' .. 'Z' | 'a' .. 'z' | '\\u00C0' .. '\\u00D6' | '\\u00D8' .. '\\u00F6' | '\\u00F8' .. '\\u02FF' | '\\u0370' .. '\\u037D' | '\\u037F' .. '\\u1FFF' | '\\u200C' .. '\\u200D' | '\\u2070' .. '\\u218F' | '\\u2C00' .. '\\u2FEF' | '\\u3001' .. '\\uD7FF' | '\\uF900' .. '\\uFDCF' | '\\uFDF0' .. '\\uFFFD' ) 
            // Iri.g: 
            {
            if ( ($this->input->LA(1)>=$this->getToken('65') && $this->input->LA(1)<=$this->getToken('90'))||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('767'))||($this->input->LA(1)>=$this->getToken('880') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_CHARS_BASE"

    // $ANTLR start "DIGIT"
    function mDIGIT(){
        try {
            // Iri.g:197:5: ( '0' .. '9' ) 
            // Iri.g:197:7: '0' .. '9' 
            {
            $this->matchRange(48,57); 

            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DIGIT"

    // $ANTLR start "PN_CHARS_U"
    function mPN_CHARS_U(){
        try {
            // Iri.g:202:5: ( PN_CHARS_BASE | '_' ) 
            // Iri.g: 
            {
            if ( ($this->input->LA(1)>=$this->getToken('65') && $this->input->LA(1)<=$this->getToken('90'))||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('767'))||($this->input->LA(1)>=$this->getToken('880') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_CHARS_U"

    // $ANTLR start "VARNAME"
    function mVARNAME(){
        try {
            // Iri.g:207:5: ( ( PN_CHARS_U | DIGIT ) ( PN_CHARS_U | DIGIT | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )* ) 
            // Iri.g:207:7: ( PN_CHARS_U | DIGIT ) ( PN_CHARS_U | DIGIT | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )* 
            {
            if ( ($this->input->LA(1)>=$this->getToken('48') && $this->input->LA(1)<=$this->getToken('57'))||($this->input->LA(1)>=$this->getToken('65') && $this->input->LA(1)<=$this->getToken('90'))||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('767'))||($this->input->LA(1)>=$this->getToken('880') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            // Iri.g:207:30: ( PN_CHARS_U | DIGIT | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )* 
            //loop8:
            do {
                $alt8=2;
                $LA8_0 = $this->input->LA(1);

                if ( (($LA8_0>=$this->getToken('48') && $LA8_0<=$this->getToken('57'))||($LA8_0>=$this->getToken('65') && $LA8_0<=$this->getToken('90'))||$LA8_0==$this->getToken('95')||($LA8_0>=$this->getToken('97') && $LA8_0<=$this->getToken('122'))||$LA8_0==$this->getToken('183')||($LA8_0>=$this->getToken('192') && $LA8_0<=$this->getToken('214'))||($LA8_0>=$this->getToken('216') && $LA8_0<=$this->getToken('246'))||($LA8_0>=$this->getToken('248') && $LA8_0<=$this->getToken('893'))||($LA8_0>=$this->getToken('895') && $LA8_0<=$this->getToken('8191'))||($LA8_0>=$this->getToken('8204') && $LA8_0<=$this->getToken('8205'))||($LA8_0>=$this->getToken('8255') && $LA8_0<=$this->getToken('8256'))||($LA8_0>=$this->getToken('8304') && $LA8_0<=$this->getToken('8591'))||($LA8_0>=$this->getToken('11264') && $LA8_0<=$this->getToken('12271'))||($LA8_0>=$this->getToken('12289') && $LA8_0<=$this->getToken('55295'))||($LA8_0>=$this->getToken('63744') && $LA8_0<=$this->getToken('64975'))||($LA8_0>=$this->getToken('65008') && $LA8_0<=$this->getToken('65533'))) ) {
                    $alt8=1;
                }


                switch ($alt8) {
            	case 1 :
            	    // Iri.g: 
            	    {
            	    if ( ($this->input->LA(1)>=$this->getToken('48') && $this->input->LA(1)<=$this->getToken('57'))||($this->input->LA(1)>=$this->getToken('65') && $this->input->LA(1)<=$this->getToken('90'))||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||$this->input->LA(1)==$this->getToken('183')||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8255') && $this->input->LA(1)<=$this->getToken('8256'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;

            	default :
            	    break 2;//loop8;
                }
            } while (true);


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "VARNAME"

    // $ANTLR start "PN_CHARS"
    function mPN_CHARS(){
        try {
            // Iri.g:212:5: ( PN_CHARS_U | MINUS | DIGIT | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' ) 
            // Iri.g: 
            {
            if ( $this->input->LA(1)==$this->getToken('45')||($this->input->LA(1)>=$this->getToken('48') && $this->input->LA(1)<=$this->getToken('57'))||($this->input->LA(1)>=$this->getToken('65') && $this->input->LA(1)<=$this->getToken('90'))||$this->input->LA(1)==$this->getToken('95')||($this->input->LA(1)>=$this->getToken('97') && $this->input->LA(1)<=$this->getToken('122'))||$this->input->LA(1)==$this->getToken('183')||($this->input->LA(1)>=$this->getToken('192') && $this->input->LA(1)<=$this->getToken('214'))||($this->input->LA(1)>=$this->getToken('216') && $this->input->LA(1)<=$this->getToken('246'))||($this->input->LA(1)>=$this->getToken('248') && $this->input->LA(1)<=$this->getToken('893'))||($this->input->LA(1)>=$this->getToken('895') && $this->input->LA(1)<=$this->getToken('8191'))||($this->input->LA(1)>=$this->getToken('8204') && $this->input->LA(1)<=$this->getToken('8205'))||($this->input->LA(1)>=$this->getToken('8255') && $this->input->LA(1)<=$this->getToken('8256'))||($this->input->LA(1)>=$this->getToken('8304') && $this->input->LA(1)<=$this->getToken('8591'))||($this->input->LA(1)>=$this->getToken('11264') && $this->input->LA(1)<=$this->getToken('12271'))||($this->input->LA(1)>=$this->getToken('12289') && $this->input->LA(1)<=$this->getToken('55295'))||($this->input->LA(1)>=$this->getToken('63744') && $this->input->LA(1)<=$this->getToken('64975'))||($this->input->LA(1)>=$this->getToken('65008') && $this->input->LA(1)<=$this->getToken('65533')) ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PN_CHARS"

    // $ANTLR start "SEMICOLON"
    function mSEMICOLON(){
        try {
            $_type = Iri::$SEMICOLON;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:222:5: ( ';' ) 
            // Iri.g:222:7: ';' 
            {
            $this->matchChar(59); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "SEMICOLON"

    // $ANTLR start "DOT"
    function mDOT(){
        try {
            $_type = Iri::$DOT;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:226:5: ( '.' ) 
            // Iri.g:226:7: '.' 
            {
            $this->matchChar(46); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOT"

    // $ANTLR start "PLUS"
    function mPLUS(){
        try {
            $_type = Iri::$PLUS;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:230:5: ( '+' ) 
            // Iri.g:230:7: '+' 
            {
            $this->matchChar(43); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "PLUS"

    // $ANTLR start "MINUS"
    function mMINUS(){
        try {
            $_type = Iri::$MINUS;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:234:5: ( '-' ) 
            // Iri.g:234:7: '-' 
            {
            $this->matchChar(45); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "MINUS"

    // $ANTLR start "ASTERISK"
    function mASTERISK(){
        try {
            $_type = Iri::$ASTERISK;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:238:5: ( '*' ) 
            // Iri.g:238:7: '*' 
            {
            $this->matchChar(42); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ASTERISK"

    // $ANTLR start "COMMA"
    function mCOMMA(){
        try {
            $_type = Iri::$COMMA;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:242:5: ( ',' ) 
            // Iri.g:242:7: ',' 
            {
            $this->matchChar(44); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "COMMA"

    // $ANTLR start "NOT"
    function mNOT(){
        try {
            $_type = Iri::$NOT;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:246:5: ( '!' ) 
            // Iri.g:246:7: '!' 
            {
            $this->matchChar(33); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NOT"

    // $ANTLR start "DIVIDE"
    function mDIVIDE(){
        try {
            $_type = Iri::$DIVIDE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:249:5: ( '/' ) 
            // Iri.g:249:7: '/' 
            {
            $this->matchChar(47); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DIVIDE"

    // $ANTLR start "EQUAL"
    function mEQUAL(){
        try {
            $_type = Iri::$EQUAL;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:253:5: ( '=' ) 
            // Iri.g:253:7: '=' 
            {
            $this->matchChar(61); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "EQUAL"

    // $ANTLR start "LESS"
    function mLESS(){
        try {
            $_type = Iri::$LESS;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:257:2: ( '<' ) 
            // Iri.g:257:4: '<' 
            {
            $this->matchChar(60); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LESS"

    // $ANTLR start "GREATER"
    function mGREATER(){
        try {
            $_type = Iri::$GREATER;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:261:2: ( '>' ) 
            // Iri.g:261:4: '>' 
            {
            $this->matchChar(62); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GREATER"

    // $ANTLR start "OPEN_CURLY_BRACE"
    function mOPEN_CURLY_BRACE(){
        try {
            $_type = Iri::$OPEN_CURLY_BRACE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:265:2: ( '{' ) 
            // Iri.g:265:4: '{' 
            {
            $this->matchChar(123); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPEN_CURLY_BRACE"

    // $ANTLR start "CLOSE_CURLY_BRACE"
    function mCLOSE_CURLY_BRACE(){
        try {
            $_type = Iri::$CLOSE_CURLY_BRACE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:268:2: ( '}' ) 
            // Iri.g:268:4: '}' 
            {
            $this->matchChar(125); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CLOSE_CURLY_BRACE"

    // $ANTLR start "VAR1"
    function mVAR1(){
        try {
            $_type = Iri::$VAR1;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            $v=null;

            // Iri.g:272:5: ( '?' v= VARNAME ) 
            // Iri.g:272:7: '?' v= VARNAME 
            {
            $this->matchChar(63); 
            $vStart2312 = $this->getCharIndex();
            $this->mVARNAME(); 
            $v = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $vStart2312, $this->getCharIndex()-1);
              $this->setText(($v!=null?$v->getText():null)); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "VAR1"

    // $ANTLR start "VAR2"
    function mVAR2(){
        try {
            $_type = Iri::$VAR2;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            $v=null;

            // Iri.g:276:5: ( '$' v= VARNAME ) 
            // Iri.g:276:7: '$' v= VARNAME 
            {
            $this->matchChar(36); 
            $vStart2335 = $this->getCharIndex();
            $this->mVARNAME(); 
            $v = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $vStart2335, $this->getCharIndex()-1);
              $this->setText(($v!=null?$v->getText():null)); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "VAR2"

    // $ANTLR start "STRING_LITERAL1"
    function mSTRING_LITERAL1(){
        try {
            $_type = Iri::$STRING_LITERAL1;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:280:5: ( '\\'' ( options {greedy=false; } : ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\\'' ) 
            // Iri.g:280:7: '\\'' ( options {greedy=false; } : ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\\'' 
            {
            $this->matchChar(39); 
            // Iri.g:280:12: ( options {greedy=false; } : ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* 
            //loop9:
            do {
                $alt9=3;
                $LA9_0 = $this->input->LA(1);

                if ( (($LA9_0>=$this->getToken('0') && $LA9_0<=$this->getToken('9'))||($LA9_0>=$this->getToken('11') && $LA9_0<=$this->getToken('12'))||($LA9_0>=$this->getToken('14') && $LA9_0<=$this->getToken('38'))||($LA9_0>=$this->getToken('40') && $LA9_0<=$this->getToken('91'))||($LA9_0>=$this->getToken('93') && $LA9_0<=$this->getToken('65535'))) ) {
                    $alt9=1;
                }
                else if ( ($LA9_0==$this->getToken('92')) ) {
                    $alt9=2;
                }
                else if ( ($LA9_0==$this->getToken('39')) ) {
                    $alt9=3;
                }


                switch ($alt9) {
            	case 1 :
            	    // Iri.g:280:40: ~ ( '\\u0027' | '\\u005C' | '\\u000A' | '\\u000D' ) 
            	    {
            	    if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('9'))||($this->input->LA(1)>=$this->getToken('11') && $this->input->LA(1)<=$this->getToken('12'))||($this->input->LA(1)>=$this->getToken('14') && $this->input->LA(1)<=$this->getToken('38'))||($this->input->LA(1)>=$this->getToken('40') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;
            	case 2 :
            	    // Iri.g:280:87: ECHAR 
            	    {
            	    $this->mECHAR(); 

            	    }
            	    break;

            	default :
            	    break 2;//loop9;
                }
            } while (true);

            $this->matchChar(39); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL1"

    // $ANTLR start "STRING_LITERAL2"
    function mSTRING_LITERAL2(){
        try {
            $_type = Iri::$STRING_LITERAL2;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:284:5: ( '\"' ( options {greedy=false; } : ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\"' ) 
            // Iri.g:284:7: '\"' ( options {greedy=false; } : ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\"' 
            {
            $this->matchChar(34); 
            // Iri.g:284:12: ( options {greedy=false; } : ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* 
            //loop10:
            do {
                $alt10=3;
                $LA10_0 = $this->input->LA(1);

                if ( (($LA10_0>=$this->getToken('0') && $LA10_0<=$this->getToken('9'))||($LA10_0>=$this->getToken('11') && $LA10_0<=$this->getToken('12'))||($LA10_0>=$this->getToken('14') && $LA10_0<=$this->getToken('33'))||($LA10_0>=$this->getToken('35') && $LA10_0<=$this->getToken('91'))||($LA10_0>=$this->getToken('93') && $LA10_0<=$this->getToken('65535'))) ) {
                    $alt10=1;
                }
                else if ( ($LA10_0==$this->getToken('92')) ) {
                    $alt10=2;
                }
                else if ( ($LA10_0==$this->getToken('34')) ) {
                    $alt10=3;
                }


                switch ($alt10) {
            	case 1 :
            	    // Iri.g:284:40: ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) 
            	    {
            	    if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('9'))||($this->input->LA(1)>=$this->getToken('11') && $this->input->LA(1)<=$this->getToken('12'))||($this->input->LA(1)>=$this->getToken('14') && $this->input->LA(1)<=$this->getToken('33'))||($this->input->LA(1)>=$this->getToken('35') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	        $this->input->consume();

            	    }
            	    else {
            	        $mse = new MismatchedSetException(null,$this->input);
            	        $this->recover($mse);
            	        throw $mse;}


            	    }
            	    break;
            	case 2 :
            	    // Iri.g:284:87: ECHAR 
            	    {
            	    $this->mECHAR(); 

            	    }
            	    break;

            	default :
            	    break 2;//loop10;
                }
            } while (true);

            $this->matchChar(34); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL2"

    // $ANTLR start "STRING_LITERAL_LONG1"
    function mSTRING_LITERAL_LONG1(){
        try {
            $_type = Iri::$STRING_LITERAL_LONG1;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:288:5: ( '\\'\\'\\'' ( options {greedy=false; } : ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) )* '\\'\\'\\'' ) 
            // Iri.g:288:9: '\\'\\'\\'' ( options {greedy=false; } : ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) )* '\\'\\'\\'' 
            {
            $this->matchString("'''"); 

            // Iri.g:288:18: ( options {greedy=false; } : ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) )* 
            //loop13:
            do {
                $alt13=2;
                $LA13_0 = $this->input->LA(1);

                if ( ($LA13_0==$this->getToken('39')) ) {
                    $LA13_1 = $this->input->LA(2);

                    if ( ($LA13_1==$this->getToken('39')) ) {
                        $LA13_3 = $this->input->LA(3);

                        if ( ($LA13_3==$this->getToken('39')) ) {
                            $alt13=2;
                        }
                        else if ( (($LA13_3>=$this->getToken('0') && $LA13_3<=$this->getToken('38'))||($LA13_3>=$this->getToken('40') && $LA13_3<=$this->getToken('65535'))) ) {
                            $alt13=1;
                        }


                    }
                    else if ( (($LA13_1>=$this->getToken('0') && $LA13_1<=$this->getToken('38'))||($LA13_1>=$this->getToken('40') && $LA13_1<=$this->getToken('65535'))) ) {
                        $alt13=1;
                    }


                }
                else if ( (($LA13_0>=$this->getToken('0') && $LA13_0<=$this->getToken('38'))||($LA13_0>=$this->getToken('40') && $LA13_0<=$this->getToken('65535'))) ) {
                    $alt13=1;
                }


                switch ($alt13) {
            	case 1 :
            	    // Iri.g:288:46: ( '\\'' | '\\'\\'' )? (~ ( '\\'' | '\\\\' ) | ECHAR ) 
            	    {
            	    // Iri.g:288:46: ( '\\'' | '\\'\\'' )? 
            	    $alt11=3;
            	    $LA11_0 = $this->input->LA(1);

            	    if ( ($LA11_0==$this->getToken('39')) ) {
            	        $LA11_1 = $this->input->LA(2);

            	        if ( ($LA11_1==$this->getToken('39')) ) {
            	            $alt11=2;
            	        }
            	        else if ( (($LA11_1>=$this->getToken('0') && $LA11_1<=$this->getToken('38'))||($LA11_1>=$this->getToken('40') && $LA11_1<=$this->getToken('65535'))) ) {
            	            $alt11=1;
            	        }
            	    }
            	    switch ($alt11) {
            	        case 1 :
            	            // Iri.g:288:48: '\\'' 
            	            {
            	            $this->matchChar(39); 

            	            }
            	            break;
            	        case 2 :
            	            // Iri.g:288:55: '\\'\\'' 
            	            {
            	            $this->matchString("''"); 


            	            }
            	            break;

            	    }

            	    // Iri.g:288:65: (~ ( '\\'' | '\\\\' ) | ECHAR ) 
            	    $alt12=2;
            	    $LA12_0 = $this->input->LA(1);

            	    if ( (($LA12_0>=$this->getToken('0') && $LA12_0<=$this->getToken('38'))||($LA12_0>=$this->getToken('40') && $LA12_0<=$this->getToken('91'))||($LA12_0>=$this->getToken('93') && $LA12_0<=$this->getToken('65535'))) ) {
            	        $alt12=1;
            	    }
            	    else if ( ($LA12_0==$this->getToken('92')) ) {
            	        $alt12=2;
            	    }
            	    else {
            	        $nvae = new NoViableAltException("", 12, 0, $this->input);

            	        throw $nvae;
            	    }
            	    switch ($alt12) {
            	        case 1 :
            	            // Iri.g:288:67: ~ ( '\\'' | '\\\\' ) 
            	            {
            	            if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('38'))||($this->input->LA(1)>=$this->getToken('40') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	                $this->input->consume();

            	            }
            	            else {
            	                $mse = new MismatchedSetException(null,$this->input);
            	                $this->recover($mse);
            	                throw $mse;}


            	            }
            	            break;
            	        case 2 :
            	            // Iri.g:288:82: ECHAR 
            	            {
            	            $this->mECHAR(); 

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break 2;//loop13;
                }
            } while (true);

            $this->matchString("'''"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL_LONG1"

    // $ANTLR start "STRING_LITERAL_LONG2"
    function mSTRING_LITERAL_LONG2(){
        try {
            $_type = Iri::$STRING_LITERAL_LONG2;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:292:5: ( '\"\"\"' ( options {greedy=false; } : ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) )* '\"\"\"' ) 
            // Iri.g:292:9: '\"\"\"' ( options {greedy=false; } : ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) )* '\"\"\"' 
            {
            $this->matchString("\"\"\""); 

            // Iri.g:292:15: ( options {greedy=false; } : ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) )* 
            //loop16:
            do {
                $alt16=2;
                $LA16_0 = $this->input->LA(1);

                if ( ($LA16_0==$this->getToken('34')) ) {
                    $LA16_1 = $this->input->LA(2);

                    if ( ($LA16_1==$this->getToken('34')) ) {
                        $LA16_3 = $this->input->LA(3);

                        if ( ($LA16_3==$this->getToken('34')) ) {
                            $alt16=2;
                        }
                        else if ( (($LA16_3>=$this->getToken('0') && $LA16_3<=$this->getToken('33'))||($LA16_3>=$this->getToken('35') && $LA16_3<=$this->getToken('65535'))) ) {
                            $alt16=1;
                        }


                    }
                    else if ( (($LA16_1>=$this->getToken('0') && $LA16_1<=$this->getToken('33'))||($LA16_1>=$this->getToken('35') && $LA16_1<=$this->getToken('65535'))) ) {
                        $alt16=1;
                    }


                }
                else if ( (($LA16_0>=$this->getToken('0') && $LA16_0<=$this->getToken('33'))||($LA16_0>=$this->getToken('35') && $LA16_0<=$this->getToken('65535'))) ) {
                    $alt16=1;
                }


                switch ($alt16) {
            	case 1 :
            	    // Iri.g:292:43: ( '\"' | '\"\"' )? (~ ( '\"' | '\\\\' ) | ECHAR ) 
            	    {
            	    // Iri.g:292:43: ( '\"' | '\"\"' )? 
            	    $alt14=3;
            	    $LA14_0 = $this->input->LA(1);

            	    if ( ($LA14_0==$this->getToken('34')) ) {
            	        $LA14_1 = $this->input->LA(2);

            	        if ( ($LA14_1==$this->getToken('34')) ) {
            	            $alt14=2;
            	        }
            	        else if ( (($LA14_1>=$this->getToken('0') && $LA14_1<=$this->getToken('33'))||($LA14_1>=$this->getToken('35') && $LA14_1<=$this->getToken('65535'))) ) {
            	            $alt14=1;
            	        }
            	    }
            	    switch ($alt14) {
            	        case 1 :
            	            // Iri.g:292:45: '\"' 
            	            {
            	            $this->matchChar(34); 

            	            }
            	            break;
            	        case 2 :
            	            // Iri.g:292:51: '\"\"' 
            	            {
            	            $this->matchString("\"\""); 


            	            }
            	            break;

            	    }

            	    // Iri.g:292:59: (~ ( '\"' | '\\\\' ) | ECHAR ) 
            	    $alt15=2;
            	    $LA15_0 = $this->input->LA(1);

            	    if ( (($LA15_0>=$this->getToken('0') && $LA15_0<=$this->getToken('33'))||($LA15_0>=$this->getToken('35') && $LA15_0<=$this->getToken('91'))||($LA15_0>=$this->getToken('93') && $LA15_0<=$this->getToken('65535'))) ) {
            	        $alt15=1;
            	    }
            	    else if ( ($LA15_0==$this->getToken('92')) ) {
            	        $alt15=2;
            	    }
            	    else {
            	        $nvae = new NoViableAltException("", 15, 0, $this->input);

            	        throw $nvae;
            	    }
            	    switch ($alt15) {
            	        case 1 :
            	            // Iri.g:292:61: ~ ( '\"' | '\\\\' ) 
            	            {
            	            if ( ($this->input->LA(1)>=$this->getToken('0') && $this->input->LA(1)<=$this->getToken('33'))||($this->input->LA(1)>=$this->getToken('35') && $this->input->LA(1)<=$this->getToken('91'))||($this->input->LA(1)>=$this->getToken('93') && $this->input->LA(1)<=$this->getToken('65535')) ) {
            	                $this->input->consume();

            	            }
            	            else {
            	                $mse = new MismatchedSetException(null,$this->input);
            	                $this->recover($mse);
            	                throw $mse;}


            	            }
            	            break;
            	        case 2 :
            	            // Iri.g:292:75: ECHAR 
            	            {
            	            $this->mECHAR(); 

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break 2;//loop16;
                }
            } while (true);

            $this->matchString("\"\"\""); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "STRING_LITERAL_LONG2"

    // $ANTLR start "ECHAR"
    function mECHAR(){
        try {
            // Iri.g:297:5: ( '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' ) ) 
            // Iri.g:297:7: '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' ) 
            {
            $this->matchChar(92); 
            if ( $this->input->LA(1)==$this->getToken('34')||$this->input->LA(1)==$this->getToken('39')||$this->input->LA(1)==$this->getToken('92')||$this->input->LA(1)==$this->getToken('98')||$this->input->LA(1)==$this->getToken('102')||$this->input->LA(1)==$this->getToken('110')||$this->input->LA(1)==$this->getToken('114')||$this->input->LA(1)==$this->getToken('116') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "ECHAR"

    // $ANTLR start "OPEN_BRACE"
    function mOPEN_BRACE(){
        try {
            $_type = Iri::$OPEN_BRACE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:301:5: ( '(' ) 
            // Iri.g:301:7: '(' 
            {
            $this->matchChar(40); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPEN_BRACE"

    // $ANTLR start "CLOSE_BRACE"
    function mCLOSE_BRACE(){
        try {
            $_type = Iri::$CLOSE_BRACE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:305:5: ( ')' ) 
            // Iri.g:305:7: ')' 
            {
            $this->matchChar(41); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CLOSE_BRACE"

    // $ANTLR start "REFERENCE"
    function mREFERENCE(){
        try {
            $_type = Iri::$REFERENCE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:310:2: ( '^^' ) 
            // Iri.g:310:4: '^^' 
            {
            $this->matchString("^^"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "REFERENCE"

    // $ANTLR start "LESS_EQUAL"
    function mLESS_EQUAL(){
        try {
            $_type = Iri::$LESS_EQUAL;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:314:5: ( '<=' ) 
            // Iri.g:314:7: '<=' 
            {
            $this->matchString("<="); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LESS_EQUAL"

    // $ANTLR start "GREATER_EQUAL"
    function mGREATER_EQUAL(){
        try {
            $_type = Iri::$GREATER_EQUAL;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:318:5: ( '>=' ) 
            // Iri.g:318:7: '>=' 
            {
            $this->matchString(">="); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "GREATER_EQUAL"

    // $ANTLR start "NOT_EQUAL"
    function mNOT_EQUAL(){
        try {
            $_type = Iri::$NOT_EQUAL;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:322:5: ( '!=' ) 
            // Iri.g:322:7: '!=' 
            {
            $this->matchString("!="); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "NOT_EQUAL"

    // $ANTLR start "AND"
    function mAND(){
        try {
            $_type = Iri::$AND;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:326:5: ( '&&' ) 
            // Iri.g:326:7: '&&' 
            {
            $this->matchString("&&"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "AND"

    // $ANTLR start "OR"
    function mOR(){
        try {
            $_type = Iri::$OR;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:330:5: ( '||' ) 
            // Iri.g:330:7: '||' 
            {
            $this->matchString("||"); 


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OR"

    // $ANTLR start "BLANK_NODE_LABEL"
    function mBLANK_NODE_LABEL(){
        try {
            $_type = Iri::$BLANK_NODE_LABEL;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            $t=null;

            // Iri.g:334:5: ( '_:' t= PN_LOCAL ) 
            // Iri.g:334:7: '_:' t= PN_LOCAL 
            {
            $this->matchString("_:"); 

            $tStart2771 = $this->getCharIndex();
            $this->mPN_LOCAL(); 
            $t = new CommonToken($this->input, TokenConst::$INVALID_TOKEN_TYPE, TokenConst::$DEFAULT_CHANNEL, $tStart2771, $this->getCharIndex()-1);
              $this->setText(($t!=null?$t->getText():null)); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "BLANK_NODE_LABEL"

    // $ANTLR start "LANGTAG"
    function mLANGTAG(){
        try {
            $_type = Iri::$LANGTAG;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:338:5: ( '@' ( PN_CHARS_BASE )+ ( MINUS ( PN_CHARS_BASE DIGIT )+ )* ) 
            // Iri.g:338:7: '@' ( PN_CHARS_BASE )+ ( MINUS ( PN_CHARS_BASE DIGIT )+ )* 
            {
            $this->matchChar(64); 
            // Iri.g:338:11: ( PN_CHARS_BASE )+ 
            $cnt17=0;
            //loop17:
            do {
                $alt17=2;
                $LA17_0 = $this->input->LA(1);

                if ( (($LA17_0>=$this->getToken('65') && $LA17_0<=$this->getToken('90'))||($LA17_0>=$this->getToken('97') && $LA17_0<=$this->getToken('122'))||($LA17_0>=$this->getToken('192') && $LA17_0<=$this->getToken('214'))||($LA17_0>=$this->getToken('216') && $LA17_0<=$this->getToken('246'))||($LA17_0>=$this->getToken('248') && $LA17_0<=$this->getToken('767'))||($LA17_0>=$this->getToken('880') && $LA17_0<=$this->getToken('893'))||($LA17_0>=$this->getToken('895') && $LA17_0<=$this->getToken('8191'))||($LA17_0>=$this->getToken('8204') && $LA17_0<=$this->getToken('8205'))||($LA17_0>=$this->getToken('8304') && $LA17_0<=$this->getToken('8591'))||($LA17_0>=$this->getToken('11264') && $LA17_0<=$this->getToken('12271'))||($LA17_0>=$this->getToken('12289') && $LA17_0<=$this->getToken('55295'))||($LA17_0>=$this->getToken('63744') && $LA17_0<=$this->getToken('64975'))||($LA17_0>=$this->getToken('65008') && $LA17_0<=$this->getToken('65533'))) ) {
                    $alt17=1;
                }


                switch ($alt17) {
            	case 1 :
            	    // Iri.g:338:11: PN_CHARS_BASE 
            	    {
            	    $this->mPN_CHARS_BASE(); 

            	    }
            	    break;

            	default :
            	    if ( $cnt17 >= 1 ) break 2;//loop17;
                        $eee =
                            new EarlyExitException(17, $this->input);
                        throw $eee;
                }
                $cnt17++;
            } while (true);

            // Iri.g:338:26: ( MINUS ( PN_CHARS_BASE DIGIT )+ )* 
            //loop19:
            do {
                $alt19=2;
                $LA19_0 = $this->input->LA(1);

                if ( ($LA19_0==$this->getToken('45')) ) {
                    $alt19=1;
                }


                switch ($alt19) {
            	case 1 :
            	    // Iri.g:338:27: MINUS ( PN_CHARS_BASE DIGIT )+ 
            	    {
            	    $this->mMINUS(); 
            	    // Iri.g:338:33: ( PN_CHARS_BASE DIGIT )+ 
            	    $cnt18=0;
            	    //loop18:
            	    do {
            	        $alt18=2;
            	        $LA18_0 = $this->input->LA(1);

            	        if ( (($LA18_0>=$this->getToken('65') && $LA18_0<=$this->getToken('90'))||($LA18_0>=$this->getToken('97') && $LA18_0<=$this->getToken('122'))||($LA18_0>=$this->getToken('192') && $LA18_0<=$this->getToken('214'))||($LA18_0>=$this->getToken('216') && $LA18_0<=$this->getToken('246'))||($LA18_0>=$this->getToken('248') && $LA18_0<=$this->getToken('767'))||($LA18_0>=$this->getToken('880') && $LA18_0<=$this->getToken('893'))||($LA18_0>=$this->getToken('895') && $LA18_0<=$this->getToken('8191'))||($LA18_0>=$this->getToken('8204') && $LA18_0<=$this->getToken('8205'))||($LA18_0>=$this->getToken('8304') && $LA18_0<=$this->getToken('8591'))||($LA18_0>=$this->getToken('11264') && $LA18_0<=$this->getToken('12271'))||($LA18_0>=$this->getToken('12289') && $LA18_0<=$this->getToken('55295'))||($LA18_0>=$this->getToken('63744') && $LA18_0<=$this->getToken('64975'))||($LA18_0>=$this->getToken('65008') && $LA18_0<=$this->getToken('65533'))) ) {
            	            $alt18=1;
            	        }


            	        switch ($alt18) {
            	    	case 1 :
            	    	    // Iri.g:338:34: PN_CHARS_BASE DIGIT 
            	    	    {
            	    	    $this->mPN_CHARS_BASE(); 
            	    	    $this->mDIGIT(); 

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( $cnt18 >= 1 ) break 2;//loop18;
            	                $eee =
            	                    new EarlyExitException(18, $this->input);
            	                throw $eee;
            	        }
            	        $cnt18++;
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break 2;//loop19;
                }
            } while (true);


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "LANGTAG"

    // $ANTLR start "INTEGER"
    function mINTEGER(){
        try {
            $_type = Iri::$INTEGER;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:342:5: ( ( DIGIT )+ ) 
            // Iri.g:342:7: ( DIGIT )+ 
            {
            // Iri.g:342:7: ( DIGIT )+ 
            $cnt20=0;
            //loop20:
            do {
                $alt20=2;
                $LA20_0 = $this->input->LA(1);

                if ( (($LA20_0>=$this->getToken('48') && $LA20_0<=$this->getToken('57'))) ) {
                    $alt20=1;
                }


                switch ($alt20) {
            	case 1 :
            	    // Iri.g:342:7: DIGIT 
            	    {
            	    $this->mDIGIT(); 

            	    }
            	    break;

            	default :
            	    if ( $cnt20 >= 1 ) break 2;//loop20;
                        $eee =
                            new EarlyExitException(20, $this->input);
                        throw $eee;
                }
                $cnt20++;
            } while (true);


            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INTEGER"

    // $ANTLR start "DECIMAL"
    function mDECIMAL(){
        try {
            $_type = Iri::$DECIMAL;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:346:5: ( ( DIGIT )+ DOT ( DIGIT )* | DOT ( DIGIT )+ ) 
            $alt24=2;
            $LA24_0 = $this->input->LA(1);

            if ( (($LA24_0>=$this->getToken('48') && $LA24_0<=$this->getToken('57'))) ) {
                $alt24=1;
            }
            else if ( ($LA24_0==$this->getToken('46')) ) {
                $alt24=2;
            }
            else {
                $nvae = new NoViableAltException("", 24, 0, $this->input);

                throw $nvae;
            }
            switch ($alt24) {
                case 1 :
                    // Iri.g:346:7: ( DIGIT )+ DOT ( DIGIT )* 
                    {
                    // Iri.g:346:7: ( DIGIT )+ 
                    $cnt21=0;
                    //loop21:
                    do {
                        $alt21=2;
                        $LA21_0 = $this->input->LA(1);

                        if ( (($LA21_0>=$this->getToken('48') && $LA21_0<=$this->getToken('57'))) ) {
                            $alt21=1;
                        }


                        switch ($alt21) {
                    	case 1 :
                    	    // Iri.g:346:7: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt21 >= 1 ) break 2;//loop21;
                                $eee =
                                    new EarlyExitException(21, $this->input);
                                throw $eee;
                        }
                        $cnt21++;
                    } while (true);

                    $this->mDOT(); 
                    // Iri.g:346:18: ( DIGIT )* 
                    //loop22:
                    do {
                        $alt22=2;
                        $LA22_0 = $this->input->LA(1);

                        if ( (($LA22_0>=$this->getToken('48') && $LA22_0<=$this->getToken('57'))) ) {
                            $alt22=1;
                        }


                        switch ($alt22) {
                    	case 1 :
                    	    // Iri.g:346:18: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop22;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // Iri.g:347:7: DOT ( DIGIT )+ 
                    {
                    $this->mDOT(); 
                    // Iri.g:347:11: ( DIGIT )+ 
                    $cnt23=0;
                    //loop23:
                    do {
                        $alt23=2;
                        $LA23_0 = $this->input->LA(1);

                        if ( (($LA23_0>=$this->getToken('48') && $LA23_0<=$this->getToken('57'))) ) {
                            $alt23=1;
                        }


                        switch ($alt23) {
                    	case 1 :
                    	    // Iri.g:347:11: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt23 >= 1 ) break 2;//loop23;
                                $eee =
                                    new EarlyExitException(23, $this->input);
                                throw $eee;
                        }
                        $cnt23++;
                    } while (true);


                    }
                    break;

            }
            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DECIMAL"

    // $ANTLR start "DOUBLE"
    function mDOUBLE(){
        try {
            $_type = Iri::$DOUBLE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:351:5: ( ( DIGIT )+ DOT ( DIGIT )* EXPONENT | DOT ( DIGIT )+ EXPONENT | ( DIGIT )+ EXPONENT ) 
            $alt29=3;
            $alt29 = $this->dfa29->predict($this->input);
            switch ($alt29) {
                case 1 :
                    // Iri.g:351:7: ( DIGIT )+ DOT ( DIGIT )* EXPONENT 
                    {
                    // Iri.g:351:7: ( DIGIT )+ 
                    $cnt25=0;
                    //loop25:
                    do {
                        $alt25=2;
                        $LA25_0 = $this->input->LA(1);

                        if ( (($LA25_0>=$this->getToken('48') && $LA25_0<=$this->getToken('57'))) ) {
                            $alt25=1;
                        }


                        switch ($alt25) {
                    	case 1 :
                    	    // Iri.g:351:7: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt25 >= 1 ) break 2;//loop25;
                                $eee =
                                    new EarlyExitException(25, $this->input);
                                throw $eee;
                        }
                        $cnt25++;
                    } while (true);

                    $this->mDOT(); 
                    // Iri.g:351:18: ( DIGIT )* 
                    //loop26:
                    do {
                        $alt26=2;
                        $LA26_0 = $this->input->LA(1);

                        if ( (($LA26_0>=$this->getToken('48') && $LA26_0<=$this->getToken('57'))) ) {
                            $alt26=1;
                        }


                        switch ($alt26) {
                    	case 1 :
                    	    // Iri.g:351:18: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    break 2;//loop26;
                        }
                    } while (true);

                    $this->mEXPONENT(); 

                    }
                    break;
                case 2 :
                    // Iri.g:352:7: DOT ( DIGIT )+ EXPONENT 
                    {
                    $this->mDOT(); 
                    // Iri.g:352:11: ( DIGIT )+ 
                    $cnt27=0;
                    //loop27:
                    do {
                        $alt27=2;
                        $LA27_0 = $this->input->LA(1);

                        if ( (($LA27_0>=$this->getToken('48') && $LA27_0<=$this->getToken('57'))) ) {
                            $alt27=1;
                        }


                        switch ($alt27) {
                    	case 1 :
                    	    // Iri.g:352:11: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt27 >= 1 ) break 2;//loop27;
                                $eee =
                                    new EarlyExitException(27, $this->input);
                                throw $eee;
                        }
                        $cnt27++;
                    } while (true);

                    $this->mEXPONENT(); 

                    }
                    break;
                case 3 :
                    // Iri.g:353:7: ( DIGIT )+ EXPONENT 
                    {
                    // Iri.g:353:7: ( DIGIT )+ 
                    $cnt28=0;
                    //loop28:
                    do {
                        $alt28=2;
                        $LA28_0 = $this->input->LA(1);

                        if ( (($LA28_0>=$this->getToken('48') && $LA28_0<=$this->getToken('57'))) ) {
                            $alt28=1;
                        }


                        switch ($alt28) {
                    	case 1 :
                    	    // Iri.g:353:7: DIGIT 
                    	    {
                    	    $this->mDIGIT(); 

                    	    }
                    	    break;

                    	default :
                    	    if ( $cnt28 >= 1 ) break 2;//loop28;
                                $eee =
                                    new EarlyExitException(28, $this->input);
                                throw $eee;
                        }
                        $cnt28++;
                    } while (true);

                    $this->mEXPONENT(); 

                    }
                    break;

            }
            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOUBLE"

    // $ANTLR start "INTEGER_POSITIVE"
    function mINTEGER_POSITIVE(){
        try {
            $_type = Iri::$INTEGER_POSITIVE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:357:5: ( PLUS INTEGER ) 
            // Iri.g:357:7: PLUS INTEGER 
            {
            $this->mPLUS(); 
            $this->mINTEGER(); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INTEGER_POSITIVE"

    // $ANTLR start "DECIMAL_POSITIVE"
    function mDECIMAL_POSITIVE(){
        try {
            $_type = Iri::$DECIMAL_POSITIVE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:361:5: ( PLUS DECIMAL ) 
            // Iri.g:361:7: PLUS DECIMAL 
            {
            $this->mPLUS(); 
            $this->mDECIMAL(); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DECIMAL_POSITIVE"

    // $ANTLR start "DOUBLE_POSITIVE"
    function mDOUBLE_POSITIVE(){
        try {
            $_type = Iri::$DOUBLE_POSITIVE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:365:5: ( PLUS DOUBLE ) 
            // Iri.g:365:7: PLUS DOUBLE 
            {
            $this->mPLUS(); 
            $this->mDOUBLE(); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOUBLE_POSITIVE"

    // $ANTLR start "INTEGER_NEGATIVE"
    function mINTEGER_NEGATIVE(){
        try {
            $_type = Iri::$INTEGER_NEGATIVE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:369:5: ( MINUS INTEGER ) 
            // Iri.g:369:7: MINUS INTEGER 
            {
            $this->mMINUS(); 
            $this->mINTEGER(); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "INTEGER_NEGATIVE"

    // $ANTLR start "DECIMAL_NEGATIVE"
    function mDECIMAL_NEGATIVE(){
        try {
            $_type = Iri::$DECIMAL_NEGATIVE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:373:5: ( MINUS DECIMAL ) 
            // Iri.g:373:7: MINUS DECIMAL 
            {
            $this->mMINUS(); 
            $this->mDECIMAL(); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DECIMAL_NEGATIVE"

    // $ANTLR start "DOUBLE_NEGATIVE"
    function mDOUBLE_NEGATIVE(){
        try {
            $_type = Iri::$DOUBLE_NEGATIVE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:377:5: ( MINUS DOUBLE ) 
            // Iri.g:377:7: MINUS DOUBLE 
            {
            $this->mMINUS(); 
            $this->mDOUBLE(); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "DOUBLE_NEGATIVE"

    // $ANTLR start "EXPONENT"
    function mEXPONENT(){
        try {
            // Iri.g:382:5: ( ( 'e' | 'E' ) ( PLUS | MINUS )? ( DIGIT )+ ) 
            // Iri.g:382:7: ( 'e' | 'E' ) ( PLUS | MINUS )? ( DIGIT )+ 
            {
            if ( $this->input->LA(1)==$this->getToken('69')||$this->input->LA(1)==$this->getToken('101') ) {
                $this->input->consume();

            }
            else {
                $mse = new MismatchedSetException(null,$this->input);
                $this->recover($mse);
                throw $mse;}

            // Iri.g:382:17: ( PLUS | MINUS )? 
            $alt30=2;
            $LA30_0 = $this->input->LA(1);

            if ( ($LA30_0==$this->getToken('43')||$LA30_0==$this->getToken('45')) ) {
                $alt30=1;
            }
            switch ($alt30) {
                case 1 :
                    // Iri.g: 
                    {
                    if ( $this->input->LA(1)==$this->getToken('43')||$this->input->LA(1)==$this->getToken('45') ) {
                        $this->input->consume();

                    }
                    else {
                        $mse = new MismatchedSetException(null,$this->input);
                        $this->recover($mse);
                        throw $mse;}


                    }
                    break;

            }

            // Iri.g:382:31: ( DIGIT )+ 
            $cnt31=0;
            //loop31:
            do {
                $alt31=2;
                $LA31_0 = $this->input->LA(1);

                if ( (($LA31_0>=$this->getToken('48') && $LA31_0<=$this->getToken('57'))) ) {
                    $alt31=1;
                }


                switch ($alt31) {
            	case 1 :
            	    // Iri.g:382:31: DIGIT 
            	    {
            	    $this->mDIGIT(); 

            	    }
            	    break;

            	default :
            	    if ( $cnt31 >= 1 ) break 2;//loop31;
                        $eee =
                            new EarlyExitException(31, $this->input);
                        throw $eee;
                }
                $cnt31++;
            } while (true);


            }

        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "EXPONENT"

    // $ANTLR start "OPEN_SQUARE_BRACE"
    function mOPEN_SQUARE_BRACE(){
        try {
            $_type = Iri::$OPEN_SQUARE_BRACE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:386:5: ( '[' ) 
            // Iri.g:386:7: '[' 
            {
            $this->matchChar(91); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "OPEN_SQUARE_BRACE"

    // $ANTLR start "CLOSE_SQUARE_BRACE"
    function mCLOSE_SQUARE_BRACE(){
        try {
            $_type = Iri::$CLOSE_SQUARE_BRACE;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:390:5: ( ']' ) 
            // Iri.g:390:7: ']' 
            {
            $this->matchChar(93); 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "CLOSE_SQUARE_BRACE"

    // $ANTLR start "COMMENT"
    function mCOMMENT(){
        try {
            $_type = Iri::$COMMENT;
            $_channel = Iri::$DEFAULT_TOKEN_CHANNEL;
            // Iri.g:394:5: ( '#' ( . )* EOL ) 
            // Iri.g:394:7: '#' ( . )* EOL 
            {
            $this->matchChar(35); 
            // Iri.g:394:11: ( . )* 
            //loop32:
            do {
                $alt32=2;
                $LA32_0 = $this->input->LA(1);

                if ( ($LA32_0==$this->getToken('10')||$LA32_0==$this->getToken('13')) ) {
                    $alt32=2;
                }
                else if ( (($LA32_0>=$this->getToken('0') && $LA32_0<=$this->getToken('9'))||($LA32_0>=$this->getToken('11') && $LA32_0<=$this->getToken('12'))||($LA32_0>=$this->getToken('14') && $LA32_0<=$this->getToken('65535'))) ) {
                    $alt32=1;
                }


                switch ($alt32) {
            	case 1 :
            	    // Iri.g:394:11: . 
            	    {
            	    $this->matchAny(); 

            	    }
            	    break;

            	default :
            	    break 2;//loop32;
                }
            } while (true);

            $this->mEOL(); 
               $_channel=HIDDEN; 

            }

            $this->state->type = $_type;
            $this->state->channel = $_channel;
        }
        catch(Exception $e){
            throw $e;
        }
    }
    // $ANTLR end "COMMENT"

    function mTokens(){
        // Iri.g:1:8: ( IRI_REF | WS | BASE | PREFIX | SELECT | DISTINCT | REDUCED | CONSTRUCT | DESCRIBE | ASK | FROM | NAMED | WHERE | ORDER | BY | ASC | DESC | LIMIT | OFFSET | OPTIONAL | GRAPH | UNION | FILTER | A | STR | LANG | LANGMATCHES | DATATYPE | BOUND | SAMETERM | ISIRI | ISURI | ISBLANK | ISLITERAL | REGEX | TRUE | FALSE | PNAME_LN | PNAME_NS | SEMICOLON | DOT | PLUS | MINUS | ASTERISK | COMMA | NOT | DIVIDE | EQUAL | LESS | GREATER | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | VAR1 | VAR2 | STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | OPEN_BRACE | CLOSE_BRACE | REFERENCE | LESS_EQUAL | GREATER_EQUAL | NOT_EQUAL | AND | OR | BLANK_NODE_LABEL | LANGTAG | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | OPEN_SQUARE_BRACE | CLOSE_SQUARE_BRACE | COMMENT ) 
        $alt33=80;
        $alt33 = $this->dfa33->predict($this->input);
        switch ($alt33) {
            case 1 :
                // Iri.g:1:10: IRI_REF 
                {
                $this->mIRI_REF(); 

                }
                break;
            case 2 :
                // Iri.g:1:18: WS 
                {
                $this->mWS(); 

                }
                break;
            case 3 :
                // Iri.g:1:21: BASE 
                {
                $this->mBASE(); 

                }
                break;
            case 4 :
                // Iri.g:1:26: PREFIX 
                {
                $this->mPREFIX(); 

                }
                break;
            case 5 :
                // Iri.g:1:33: SELECT 
                {
                $this->mSELECT(); 

                }
                break;
            case 6 :
                // Iri.g:1:40: DISTINCT 
                {
                $this->mDISTINCT(); 

                }
                break;
            case 7 :
                // Iri.g:1:49: REDUCED 
                {
                $this->mREDUCED(); 

                }
                break;
            case 8 :
                // Iri.g:1:57: CONSTRUCT 
                {
                $this->mCONSTRUCT(); 

                }
                break;
            case 9 :
                // Iri.g:1:67: DESCRIBE 
                {
                $this->mDESCRIBE(); 

                }
                break;
            case 10 :
                // Iri.g:1:76: ASK 
                {
                $this->mASK(); 

                }
                break;
            case 11 :
                // Iri.g:1:80: FROM 
                {
                $this->mFROM(); 

                }
                break;
            case 12 :
                // Iri.g:1:85: NAMED 
                {
                $this->mNAMED(); 

                }
                break;
            case 13 :
                // Iri.g:1:91: WHERE 
                {
                $this->mWHERE(); 

                }
                break;
            case 14 :
                // Iri.g:1:97: ORDER 
                {
                $this->mORDER(); 

                }
                break;
            case 15 :
                // Iri.g:1:103: BY 
                {
                $this->mBY(); 

                }
                break;
            case 16 :
                // Iri.g:1:106: ASC 
                {
                $this->mASC(); 

                }
                break;
            case 17 :
                // Iri.g:1:110: DESC 
                {
                $this->mDESC(); 

                }
                break;
            case 18 :
                // Iri.g:1:115: LIMIT 
                {
                $this->mLIMIT(); 

                }
                break;
            case 19 :
                // Iri.g:1:121: OFFSET 
                {
                $this->mOFFSET(); 

                }
                break;
            case 20 :
                // Iri.g:1:128: OPTIONAL 
                {
                $this->mOPTIONAL(); 

                }
                break;
            case 21 :
                // Iri.g:1:137: GRAPH 
                {
                $this->mGRAPH(); 

                }
                break;
            case 22 :
                // Iri.g:1:143: UNION 
                {
                $this->mUNION(); 

                }
                break;
            case 23 :
                // Iri.g:1:149: FILTER 
                {
                $this->mFILTER(); 

                }
                break;
            case 24 :
                // Iri.g:1:156: A 
                {
                $this->mA(); 

                }
                break;
            case 25 :
                // Iri.g:1:158: STR 
                {
                $this->mSTR(); 

                }
                break;
            case 26 :
                // Iri.g:1:162: LANG 
                {
                $this->mLANG(); 

                }
                break;
            case 27 :
                // Iri.g:1:167: LANGMATCHES 
                {
                $this->mLANGMATCHES(); 

                }
                break;
            case 28 :
                // Iri.g:1:179: DATATYPE 
                {
                $this->mDATATYPE(); 

                }
                break;
            case 29 :
                // Iri.g:1:188: BOUND 
                {
                $this->mBOUND(); 

                }
                break;
            case 30 :
                // Iri.g:1:194: SAMETERM 
                {
                $this->mSAMETERM(); 

                }
                break;
            case 31 :
                // Iri.g:1:203: ISIRI 
                {
                $this->mISIRI(); 

                }
                break;
            case 32 :
                // Iri.g:1:209: ISURI 
                {
                $this->mISURI(); 

                }
                break;
            case 33 :
                // Iri.g:1:215: ISBLANK 
                {
                $this->mISBLANK(); 

                }
                break;
            case 34 :
                // Iri.g:1:223: ISLITERAL 
                {
                $this->mISLITERAL(); 

                }
                break;
            case 35 :
                // Iri.g:1:233: REGEX 
                {
                $this->mREGEX(); 

                }
                break;
            case 36 :
                // Iri.g:1:239: TRUE 
                {
                $this->mTRUE(); 

                }
                break;
            case 37 :
                // Iri.g:1:244: FALSE 
                {
                $this->mFALSE(); 

                }
                break;
            case 38 :
                // Iri.g:1:250: PNAME_LN 
                {
                $this->mPNAME_LN(); 

                }
                break;
            case 39 :
                // Iri.g:1:259: PNAME_NS 
                {
                $this->mPNAME_NS(); 

                }
                break;
            case 40 :
                // Iri.g:1:268: SEMICOLON 
                {
                $this->mSEMICOLON(); 

                }
                break;
            case 41 :
                // Iri.g:1:278: DOT 
                {
                $this->mDOT(); 

                }
                break;
            case 42 :
                // Iri.g:1:282: PLUS 
                {
                $this->mPLUS(); 

                }
                break;
            case 43 :
                // Iri.g:1:287: MINUS 
                {
                $this->mMINUS(); 

                }
                break;
            case 44 :
                // Iri.g:1:293: ASTERISK 
                {
                $this->mASTERISK(); 

                }
                break;
            case 45 :
                // Iri.g:1:302: COMMA 
                {
                $this->mCOMMA(); 

                }
                break;
            case 46 :
                // Iri.g:1:308: NOT 
                {
                $this->mNOT(); 

                }
                break;
            case 47 :
                // Iri.g:1:312: DIVIDE 
                {
                $this->mDIVIDE(); 

                }
                break;
            case 48 :
                // Iri.g:1:319: EQUAL 
                {
                $this->mEQUAL(); 

                }
                break;
            case 49 :
                // Iri.g:1:325: LESS 
                {
                $this->mLESS(); 

                }
                break;
            case 50 :
                // Iri.g:1:330: GREATER 
                {
                $this->mGREATER(); 

                }
                break;
            case 51 :
                // Iri.g:1:338: OPEN_CURLY_BRACE 
                {
                $this->mOPEN_CURLY_BRACE(); 

                }
                break;
            case 52 :
                // Iri.g:1:355: CLOSE_CURLY_BRACE 
                {
                $this->mCLOSE_CURLY_BRACE(); 

                }
                break;
            case 53 :
                // Iri.g:1:373: VAR1 
                {
                $this->mVAR1(); 

                }
                break;
            case 54 :
                // Iri.g:1:378: VAR2 
                {
                $this->mVAR2(); 

                }
                break;
            case 55 :
                // Iri.g:1:383: STRING_LITERAL1 
                {
                $this->mSTRING_LITERAL1(); 

                }
                break;
            case 56 :
                // Iri.g:1:399: STRING_LITERAL2 
                {
                $this->mSTRING_LITERAL2(); 

                }
                break;
            case 57 :
                // Iri.g:1:415: STRING_LITERAL_LONG1 
                {
                $this->mSTRING_LITERAL_LONG1(); 

                }
                break;
            case 58 :
                // Iri.g:1:436: STRING_LITERAL_LONG2 
                {
                $this->mSTRING_LITERAL_LONG2(); 

                }
                break;
            case 59 :
                // Iri.g:1:457: OPEN_BRACE 
                {
                $this->mOPEN_BRACE(); 

                }
                break;
            case 60 :
                // Iri.g:1:468: CLOSE_BRACE 
                {
                $this->mCLOSE_BRACE(); 

                }
                break;
            case 61 :
                // Iri.g:1:480: REFERENCE 
                {
                $this->mREFERENCE(); 

                }
                break;
            case 62 :
                // Iri.g:1:490: LESS_EQUAL 
                {
                $this->mLESS_EQUAL(); 

                }
                break;
            case 63 :
                // Iri.g:1:501: GREATER_EQUAL 
                {
                $this->mGREATER_EQUAL(); 

                }
                break;
            case 64 :
                // Iri.g:1:515: NOT_EQUAL 
                {
                $this->mNOT_EQUAL(); 

                }
                break;
            case 65 :
                // Iri.g:1:525: AND 
                {
                $this->mAND(); 

                }
                break;
            case 66 :
                // Iri.g:1:529: OR 
                {
                $this->mOR(); 

                }
                break;
            case 67 :
                // Iri.g:1:532: BLANK_NODE_LABEL 
                {
                $this->mBLANK_NODE_LABEL(); 

                }
                break;
            case 68 :
                // Iri.g:1:549: LANGTAG 
                {
                $this->mLANGTAG(); 

                }
                break;
            case 69 :
                // Iri.g:1:557: INTEGER 
                {
                $this->mINTEGER(); 

                }
                break;
            case 70 :
                // Iri.g:1:565: DECIMAL 
                {
                $this->mDECIMAL(); 

                }
                break;
            case 71 :
                // Iri.g:1:573: DOUBLE 
                {
                $this->mDOUBLE(); 

                }
                break;
            case 72 :
                // Iri.g:1:580: INTEGER_POSITIVE 
                {
                $this->mINTEGER_POSITIVE(); 

                }
                break;
            case 73 :
                // Iri.g:1:597: DECIMAL_POSITIVE 
                {
                $this->mDECIMAL_POSITIVE(); 

                }
                break;
            case 74 :
                // Iri.g:1:614: DOUBLE_POSITIVE 
                {
                $this->mDOUBLE_POSITIVE(); 

                }
                break;
            case 75 :
                // Iri.g:1:630: INTEGER_NEGATIVE 
                {
                $this->mINTEGER_NEGATIVE(); 

                }
                break;
            case 76 :
                // Iri.g:1:647: DECIMAL_NEGATIVE 
                {
                $this->mDECIMAL_NEGATIVE(); 

                }
                break;
            case 77 :
                // Iri.g:1:664: DOUBLE_NEGATIVE 
                {
                $this->mDOUBLE_NEGATIVE(); 

                }
                break;
            case 78 :
                // Iri.g:1:680: OPEN_SQUARE_BRACE 
                {
                $this->mOPEN_SQUARE_BRACE(); 

                }
                break;
            case 79 :
                // Iri.g:1:698: CLOSE_SQUARE_BRACE 
                {
                $this->mCLOSE_SQUARE_BRACE(); 

                }
                break;
            case 80 :
                // Iri.g:1:717: COMMENT 
                {
                $this->mCOMMENT(); 

                }
                break;

        }

    }



}
?>